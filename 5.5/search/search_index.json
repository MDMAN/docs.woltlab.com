{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"WoltLab Suite 5.5 Documentation","text":""},{"location":"#introduction","title":"Introduction","text":"<p>This documentation explains the basic API functionality and the creation of own packages. It is expected that you are somewhat experienced with PHP, object-oriented programming and MySQL.</p> <p>Head over to the quick start tutorial to learn more.</p>"},{"location":"#about-woltlab-suite","title":"About WoltLab Suite","text":"<p>WoltLab Suite Core as well as most of the other packages are available on GitHub and are licensed under the terms of the GNU Lesser General Public License 2.1.</p>"},{"location":"getting-started/","title":"Creating a simple package","text":""},{"location":"getting-started/#setup-and-requirements","title":"Setup and Requirements","text":"<p>This guide will help you to create a simple package that provides a simple test page. It is nothing too fancy, but you can use it as the foundation for your next project.</p> <p>There are some requirements you should met before starting:</p> <ul> <li>Text editor with syntax highlighting for PHP, Notepad++ is a solid pick</li> <li><code>*.php</code> and <code>*.tpl</code> should be encoded with ANSI/ASCII</li> <li><code>*.xml</code> are always encoded with UTF-8, but omit the BOM (byte-order-mark)</li> <li>Use tabs instead of spaces to indent lines</li> <li>It is recommended to set the tab width to <code>8</code> spaces, this is used in the entire software and will ease reading the source files</li> <li>An active installation of WoltLab Suite</li> <li>An application to create <code>*.tar</code> archives, e.g. 7-Zip on Windows</li> </ul>"},{"location":"getting-started/#the-packagexml-file","title":"The package.xml File","text":"<p>We want to create a simple page that will display the sentence \"Hello World\" embedded into the application frame. Create an empty directory in the workspace of your choice to start with.</p> <p>Create a new file called <code>package.xml</code> and insert the code below:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;package xmlns=\"http://www.woltlab.com\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.woltlab.com http://www.woltlab.com/XSD/2019/package.xsd\" name=\"com.example.test\"&gt;\n&lt;packageinformation&gt;\n&lt;!-- com.example.test --&gt;\n&lt;packagename&gt;Simple Package&lt;/packagename&gt;\n&lt;packagedescription&gt;A simple package to demonstrate the package system of WoltLab Suite Core&lt;/packagedescription&gt;\n&lt;version&gt;1.0.0&lt;/version&gt;\n&lt;date&gt;2019-04-28&lt;/date&gt;\n&lt;/packageinformation&gt;\n&lt;authorinformation&gt;\n&lt;author&gt;Your Name&lt;/author&gt;\n&lt;authorurl&gt;http://www.example.com&lt;/authorurl&gt;\n&lt;/authorinformation&gt;\n&lt;excludedpackages&gt;\n&lt;excludedpackage version=\"6.0.0 Alpha 1\"&gt;com.woltlab.wcf&lt;/excludedpackage&gt;\n&lt;/excludedpackages&gt;\n&lt;instructions type=\"install\"&gt;\n&lt;instruction type=\"file\" /&gt;\n&lt;instruction type=\"template\" /&gt;\n&lt;instruction type=\"page\" /&gt;\n&lt;/instructions&gt;\n&lt;/package&gt;\n</code></pre> <p>There is an entire chapter on the package system that explains what the code above does and how you can adjust it to fit your needs. For now we'll keep it as it is.</p>"},{"location":"getting-started/#the-php-class","title":"The PHP Class","text":"<p>The next step is to create the PHP class which will serve our page:</p> <ol> <li>Create the directory <code>files</code> in the same directory where <code>package.xml</code> is located</li> <li>Open <code>files</code> and create the directory <code>lib</code></li> <li>Open <code>lib</code> and create the directory <code>page</code></li> <li>Within the directory <code>page</code>, please create the file <code>TestPage.class.php</code></li> </ol> <p>Copy and paste the following code into the <code>TestPage.class.php</code>:</p> <pre><code>&lt;?php\nnamespace wcf\\page;\nuse wcf\\system\\WCF;\n\n/**\n * A simple test page for demonstration purposes.\n *\n * @author  YOUR NAME\n * @license GNU Lesser General Public License &lt;http://opensource.org/licenses/lgpl-license.php&gt;\n */\nclass TestPage extends AbstractPage {\n    /**\n     * @var string\n     */\n    protected $greet = '';\n\n    /**\n     * @inheritDoc\n     */\n    public function readParameters() {\n        parent::readParameters();\n\n        if (isset($_GET['greet'])) $this-&gt;greet = $_GET['greet'];\n    }\n\n    /**\n     * @inheritDoc\n     */\n    public function readData() {\n        parent::readData();\n\n        if (empty($this-&gt;greet)) {\n            $this-&gt;greet = 'World';\n        }\n    }\n\n    /**\n     * @inheritDoc\n     */\n    public function assignVariables() {\n        parent::assignVariables();\n\n        WCF::getTPL()-&gt;assign([\n            'greet' =&gt; $this-&gt;greet\n        ]);\n    }\n}\n</code></pre> <p>The class inherits from wcf\\page\\AbstractPage, the default implementation of pages without form controls. It defines quite a few methods that will be automatically invoked in a specific order, for example <code>readParameters()</code> before <code>readData()</code> and finally <code>assignVariables()</code> to pass arbitrary values to the template.</p> <p>The property <code>$greet</code> is defined as <code>World</code>, but can optionally be populated through a GET variable (<code>index.php?test/&amp;greet=You</code> would output <code>Hello You!</code>). This extra code illustrates the separation of data processing that takes place within all sort of pages, where all user-supplied data is read from within a single method. It helps organizing the code, but most of all it enforces a clean class logic that does not start reading user input at random places, including the risk to only escape the input of variable <code>$_GET['foo']</code> 4 out of 5 times.</p> <p>Reading and processing the data is only half the story, now we need a template to display the actual content for our page. You don't need to specify it yourself, it will be automatically guessed based on your namespace and class name, you can read more about it later.</p> <p>Last but not least, you must not include the closing PHP tag <code>?&gt;</code> at the end, it can cause PHP to break on whitespaces and is not required at all.</p>"},{"location":"getting-started/#the-template","title":"The Template","text":"<p>Navigate back to the root directory of your package until you see both the <code>files</code> directory and the <code>package.xml</code>. Now create a directory called <code>templates</code>, open it and create the file <code>test.tpl</code>.</p> <pre><code>{include file='header'}\n\n&lt;div class=\"section\"&gt;\n    Hello {$greet}!\n&lt;/div&gt;\n\n{include file='footer'}\n</code></pre> <p>Templates are a mixture of HTML and Smarty-like template scripting to overcome the static nature of raw HTML. The above code will display the phrase <code>Hello World!</code> in the application frame, just as any other page would render. The included templates <code>header</code> and <code>footer</code> are responsible for the majority of the overall page functionality, but offer a whole lot of customization abilities to influence their behavior and appearance.</p>"},{"location":"getting-started/#the-page-definition","title":"The Page Definition","text":"<p>The package now contains the PHP class and the matching template, but it is still missing the page definition. Please create the file <code>page.xml</code> in your project's root directory, thus on the same level as the <code>package.xml</code>.</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;data xmlns=\"http://www.woltlab.com\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.woltlab.com http://www.woltlab.com/XSD/2019/page.xsd\"&gt;\n&lt;import&gt;\n&lt;page identifier=\"com.example.test.Test\"&gt;\n&lt;controller&gt;wcf\\page\\TestPage&lt;/controller&gt;\n&lt;name language=\"en\"&gt;Test Page&lt;/name&gt;\n&lt;pageType&gt;system&lt;/pageType&gt;\n&lt;/page&gt;\n&lt;/import&gt;\n&lt;/data&gt;\n</code></pre> <p>You can provide a lot more data for a page, including logical nesting and dedicated handler classes for display in menus.</p>"},{"location":"getting-started/#building-the-package","title":"Building the Package","text":"<p>If you have followed the above guidelines carefully, your package directory should now look like this:</p> <pre><code>\u251c\u2500\u2500 files\n\u2502   \u2514\u2500\u2500 lib\n\u2502       \u2514\u2500\u2500 page\n\u2502           \u2514\u2500\u2500 TestPage.class.php\n\u251c\u2500\u2500 package.xml\n\u251c\u2500\u2500 page.xml\n\u2514\u2500\u2500 templates\n    \u2514\u2500\u2500 test.tpl\n</code></pre> <p>Both files and templates are archive-based package components, that deploy their payload using tar archives rather than adding the raw files to the package file. Please create the archive <code>files.tar</code> and add the contents of the <code>files/*</code> directory, but not the directory <code>files/</code> itself. Repeat the same process for the <code>templates</code> directory, but this time with the file name <code>templates.tar</code>. Place both files in the root of your project.</p> <p>Last but not least, create the package archive <code>com.example.test.tar</code> and add all the files listed below.</p> <ul> <li><code>files.tar</code></li> <li><code>package.xml</code></li> <li><code>page.xml</code></li> <li><code>templates.tar</code></li> </ul> <p>The archive's filename can be anything you want, all though it is the general convention to use the package name itself for easier recognition.</p>"},{"location":"getting-started/#installation","title":"Installation","text":"<p>Open the Administration Control Panel and navigate to <code>Configuration &gt; Packages &gt; Install Package</code>, click on <code>Upload Package</code> and select the file <code>com.example.test.tar</code> from your disk. Follow the on-screen instructions until it has been successfully installed.</p> <p>Open a new browser tab and navigate to your newly created page. If WoltLab Suite is installed at <code>https://example.com/wsc/</code>, then the URL should read <code>https://example.com/wsc/index.php?test/</code>.</p> <p>Congratulations, you have just created your first package!</p>"},{"location":"getting-started/#developer-tools","title":"Developer Tools","text":"<p>The developer tools provide an interface to synchronize the data of an installed package with a bare repository on the local disk. You can re-import most PIPs at any time and have the changes applied without crafting a manual update. This process simulates a regular package update with a single PIP only, and resets the cache after the import has been completed.</p>"},{"location":"getting-started/#registering-a-project","title":"Registering a Project","text":"<p>Projects require the absolute path to the package directory, that is, the directory where it can find the <code>package.xml</code>. It is not required to install an package to register it as a project, but you have to install it in order to work with it. It does not install the package by itself!</p> <p>There is a special button on the project list that allows for a mass-import of projects based on a search path. Each direct child directory of the provided path will be tested and projects created this way will use the identifier extracted from the <code>package.xml</code>.</p>"},{"location":"getting-started/#synchronizing","title":"Synchronizing","text":"<p>The install instructions in the <code>package.xml</code> are ignored when offering the PIP imports, the detection works entirely based on the default filename for each PIP. On top of that, only PIPs that implement the interface <code>wcf\\system\\devtools\\pip\\IIdempotentPackageInstallationPlugin</code> are valid for import, as it indicates that importing the PIP multiple times will have no side-effects and that the result is deterministic regardless of the number of times it has been imported.</p> <p>Some built-in PIPs, such as <code>sql</code> or <code>script</code>, do not qualify for this step and remain unavailable at all times. However, you can still craft and perform an actual package update to have these PIPs executed.</p>"},{"location":"getting-started/#appendix","title":"Appendix","text":""},{"location":"getting-started/#template-guessing","title":"Template Guessing","text":"<p>The class name including the namespace is used to automatically determine the path to the template and its name. The example above used the page class name <code>wcf\\page\\TestPage</code> that is then split into four distinct parts:</p> <ol> <li><code>wcf</code>, the internal abbreviation of WoltLab Suite Core (previously known as WoltLab Community Framework)</li> <li><code>\\page\\</code> (ignored)</li> <li><code>Test</code>, the actual name that is used for both the template and the URL</li> <li><code>Page</code> (page type, ignored)</li> </ol> <p>The fragments <code>1.</code> and <code>3.</code> from above are used to construct the path to the template: <code>&lt;installDirOfWSC&gt;/templates/test.tpl</code> (the first letter of <code>Test</code> is being converted to lower-case).</p>"},{"location":"javascript/code-snippets/","title":"Code Snippets - JavaScript API","text":"<p>This is a list of code snippets that do not fit into any of the other articles and merely describe how to achieve something very specific, rather than explaining the inner workings of a function.</p>"},{"location":"javascript/code-snippets/#imageviewer","title":"ImageViewer","text":"<p>The ImageViewer is available on all frontend pages by default, you can easily add images to the viewer by wrapping the thumbnails with a link with the CSS class <code>jsImageViewer</code> that points to the full version.</p> <pre><code>&lt;a href=\"http://example.com/full.jpg\" class=\"jsImageViewer\"&gt;\n  &lt;img src=\"http://example.com/thumbnail.jpg\"&gt;\n&lt;/a&gt;\n</code></pre>"},{"location":"javascript/general-usage/","title":"General JavaScript Usage","text":"<p>WoltLab Suite 5.4 introduced support for TypeScript, migrating all existing modules to TypeScript. The JavaScript section of the documentation is not yet updated to account for the changes, possibly explaining concepts that cannot be applied as-is when writing TypeScript. You can learn about basic TypeScript use in WoltLab Suite, such as consuming WoltLab Suite\u2019s types in own packages, within in the TypeScript section.</p>"},{"location":"javascript/general-usage/#the-history-of-the-legacy-api","title":"The History of the Legacy API","text":"<p>The WoltLab Suite 3.0 introduced a new API based on AMD-Modules with ES5-JavaScript that was designed with high performance and visible dependencies in mind. This was a fundamental change in comparison to the legacy API that was build many years before while jQuery was still a thing and we had to deal with ancient browsers such as Internet Explorer 9 that felt short in both CSS and JavaScript capabilities.</p> <p>Fast forward a few years, the old API is still around and most important, it is actively being used by some components that have not been rewritten yet. This has been done to preserve the backwards-compatibility and to avoid the significant amount of work that it requires to rewrite a component. The components invoked on page initialization have all been rewritten to use the modern API, but some deferred objects that are invoked later during the page runtime may still use the old API.</p> <p>However, the legacy API is deprecated and you should not rely on it for new components at all. It slowly but steadily gets replaced up until a point where its last bits are finally removed from the code base.</p>"},{"location":"javascript/general-usage/#embedding-javascript-inside-templates","title":"Embedding JavaScript inside Templates","text":"<p>The <code>&lt;script&gt;</code>-tags are extracted and moved during template processing, eventually placing them at the very end of the body element while preserving their order of appearance.</p> <p>This behavior is controlled through the <code>data-relocate=\"true\"</code> attribute on the <code>&lt;script&gt;</code> which is mandatory for almost all scripts, mostly because their dependencies (such as jQuery) are moved to the bottom anyway.</p> <pre><code>&lt;script data-relocate=\"true\"&gt;\n$(function() {\n// Code that uses jQuery (Legacy API)\n});\n&lt;/script&gt;\n\n&lt;!-- or --&gt;\n\n&lt;script data-relocate=\"true\"&gt;\nrequire([\"Some\", \"Dependencies\"], function(Some, Dependencies) {\n// Modern API\n});\n&lt;/script&gt;\n</code></pre>"},{"location":"javascript/general-usage/#including-external-javascript-files","title":"Including External JavaScript Files","text":"<p>The AMD-Modules used in the new API are automatically recognized and lazy-loaded on demand, so unless you have a rather large and pre-compiled code-base, there is nothing else to worry about.</p>"},{"location":"javascript/general-usage/#debug-variants-and-cache-buster","title":"Debug-Variants and Cache-Buster","text":"<p>Your JavaScript files may change over time and you would want the users' browsers to always load and use the latest version of your files. This can be achieved by appending the special <code>LAST_UPDATE_TIME</code> constant to your file path. It contains the unix timestamp of the last time any package was installed, updated or removed and thus avoid outdated caches by relying on a unique value, without invalidating the cache more often that it needs to be.</p> <pre><code>&lt;script data-relocate=\"true\" src=\"{$__wcf-&gt;getPath('app')}js/App.js?t={@LAST_UPDATE_TIME}\"&gt;&lt;/script&gt;\n</code></pre> <p>For small scripts you can simply serve the full, non-minified version to the user at all times, the differences in size and execution speed are insignificant and are very unlikely to offer any benefits. They might even yield a worse performance, because you'll have to include them statically in the template, even if the code is never called.</p> <p>However, if you're including a minified build in your app or plugin, you should include a switch to load the uncompressed version in the debug mode, while serving the minified and optimized file to the average visitor. You should use the <code>ENABLE_DEBUG_MODE</code> constant to decide which version should be loaded.</p> <pre><code>&lt;script data-relocate=\"true\" src=\"{$__wcf-&gt;getPath('app')}js/App{if !ENABLE_DEBUG_MODE}.min{/if}.js?t={@LAST_UPDATE_TIME}\"&gt;&lt;/script&gt;\n</code></pre>"},{"location":"javascript/general-usage/#the-accelerated-guest-view-tiny-builds","title":"The Accelerated Guest View (\"Tiny Builds\")","text":"<p>You can learn more on the Accelerated Guest View in the migration docs.</p> <p>The \u201cAccelerated Guest View\u201d aims to decrease page size and to improve responsiveness by enabling a read-only mode for visitors. If you are providing a separate compiled build for this mode, you'll need to include yet another switch to serve the right version to the visitor.</p> <pre><code>&lt;script data-relocate=\"true\" src=\"{$__wcf-&gt;getPath('app')}js/App{if !ENABLE_DEBUG_MODE}{if VISITOR_USE_TINY_BUILD}.tiny{/if}.min{/if}.js?t={@LAST_UPDATE_TIME}\"&gt;&lt;/script&gt;\n</code></pre>"},{"location":"javascript/general-usage/#the-js-template-plugin","title":"The <code>{js}</code> Template Plugin","text":"<p>The <code>{js}</code> template plugin exists solely to provide a much easier and less error-prone method to include external JavaScript files.</p> <pre><code>{js application='app' file='App' hasTiny=true}\n</code></pre> <p>The <code>hasTiny</code> attribute is optional, you can set it to <code>false</code> or just omit it entirely if you do not provide a tiny build for your file.</p>"},{"location":"javascript/helper-functions/","title":"JavaScript Helper Functions","text":"<p>These helper functions are deprecated since version 5.4. Refer to our migration guide on how to replace them.</p>"},{"location":"javascript/helper-functions/#introduction","title":"Introduction","text":"<p>Since version 3.0, WoltLab Suite ships with a set of global helper functions that are exposed on the <code>window</code>-object and thus are available regardless of the context. They are meant to reduce code repetition and to increase readability by moving potentially relevant parts to the front of an instruction.</p>"},{"location":"javascript/helper-functions/#elements","title":"Elements","text":""},{"location":"javascript/helper-functions/#elcreatetagname-string-element","title":"<code>elCreate(tagName: string): Element</code>","text":"<p>Creates a new element with the provided tag name.</p> <pre><code>var element = elCreate(\"div\");\n// equals\nvar element = document.createElement(\"div\");\n</code></pre>"},{"location":"javascript/helper-functions/#elremoveelement-element","title":"<code>elRemove(element: Element)</code>","text":"<p>Removes an element from its parent without returning it. This function will throw an error if the <code>element</code> doesn't have a parent node.</p> <pre><code>elRemove(element);\n// equals\nelement.parentNode.removeChild(element);\n</code></pre>"},{"location":"javascript/helper-functions/#elshowelement-element","title":"<code>elShow(element: Element)</code>","text":"<p>Attempts to show an element by removing the <code>display</code> CSS-property, usually used in conjunction with the <code>elHide()</code> function.</p> <pre><code>elShow(element);\n// equals\nelement.style.removeProperty(\"display\");\n</code></pre>"},{"location":"javascript/helper-functions/#elhideelement-element","title":"<code>elHide(element: Element)</code>","text":"<p>Attempts to hide an element by setting the <code>display</code> CSS-property to <code>none</code>, this is intended to be used with <code>elShow()</code> that relies on this behavior.</p> <pre><code>elHide(element);\n// equals\nelement.style.setProperty(\"display\", \"none\", \"\");\n</code></pre>"},{"location":"javascript/helper-functions/#eltoggleelement-element","title":"<code>elToggle(element: Element)</code>","text":"<p>Attempts to toggle the visibility of an element by examining the value of the <code>display</code> CSS-property and calls either <code>elShow()</code> or <code>elHide()</code>.</p>"},{"location":"javascript/helper-functions/#attributes","title":"Attributes","text":""},{"location":"javascript/helper-functions/#elattrelement-element-attribute-string-value-string-string","title":"<code>elAttr(element: Element, attribute: string, value?: string): string</code>","text":"<p>Sets or reads an attribute value, value are implicitly casted into strings and reading non-existing attributes will always yield an empty string. If you want to test for attribute existence, you'll have to fall-back to the native <code>Element.hasAttribute()</code> method.</p> <p>You should read and set native attributes directly, such as <code>img.src</code> rather than <code>img.getAttribute(\"src\");</code>.</p> <pre><code>var value = elAttr(element, \"some-attribute\");\n// equals\nvar value = element.getAttribute(\"some-attribute\");\n\nelAttr(element, \"some-attribute\", \"some value\");\n// equals\nelement.setAttribute(\"some-attribute\", \"some value\");\n</code></pre>"},{"location":"javascript/helper-functions/#elattrboolelement-element-attribute-string-boolean","title":"<code>elAttrBool(element: Element, attribute: string): boolean</code>","text":"<p>Reads an attribute and converts it value into a boolean value, the strings <code>\"1\"</code> and <code>\"true\"</code> will evaluate to <code>true</code>. All other values, including a missing attribute, will return <code>false</code>.</p> <pre><code>if (elAttrBool(element, \"some-attribute\")) {\n// attribute is true-ish\n}\n</code></pre>"},{"location":"javascript/helper-functions/#eldataelement-element-attribute-string-value-string-string","title":"<code>elData(element: Element, attribute: string, value?: string): string</code>","text":"<p>Short-hand function to read or set HTML5 <code>data-*</code>-attributes, it essentially prepends the <code>data-</code> prefix before forwarding the call to <code>elAttr()</code>.</p> <pre><code>var value = elData(element, \"some-attribute\");\n// equals\nvar value = elAttr(element, \"data-some-attribute\");\n\nelData(element, \"some-attribute\", \"some value\");\n// equals\nelAttr(element, \"data-some-attribute\", \"some value\");\n</code></pre>"},{"location":"javascript/helper-functions/#eldataboolelement-element-attribute-string-boolean","title":"<code>elDataBool(element: Element, attribute: string): boolean</code>","text":"<p>Short-hand function to convert a HTML5 <code>data-*</code>-attribute into a boolean value. It prepends the <code>data-</code> prefix before forwarding the call to <code>elAttrBool()</code>.</p> <pre><code>if (elDataBool(element, \"some-attribute\")) {\n// attribute is true-ish\n}\n// equals\nif (elAttrBool(element, \"data-some-attribute\")) {\n// attribute is true-ish\n}\n</code></pre>"},{"location":"javascript/helper-functions/#selecting-elements","title":"Selecting Elements","text":"<p>Unlike libraries like jQuery, these functions will return <code>null</code> if an element is not found. You are responsible to validate if the element exist and to branch accordingly, invoking methods on the return value without checking for <code>null</code> will yield an error.</p>"},{"location":"javascript/helper-functions/#elbyidid-string-element-null","title":"<code>elById(id: string): Element | null</code>","text":"<p>Selects an element by its <code>id</code>-attribute value.</p> <pre><code>var element = elById(\"my-awesome-element\");\n// equals\nvar element = document.getElementById(\"my-awesome-element\");\n</code></pre>"},{"location":"javascript/helper-functions/#elbyselselector-string-context-element-element-null","title":"<code>elBySel(selector: string, context?: Element): Element | null</code>","text":"<p>The underlying <code>querySelector()</code>-method works on the entire DOM hierarchy and can yield results outside of your context element! Please read and understand the MDN article on <code>Element.querySelector()</code> to learn more about this.</p> <p>Select a single element based on a CSS selector, optionally limiting the results to be a direct or indirect children of the context element.</p> <pre><code>var element = elBySel(\".some-element\");\n// equals\nvar element = document.querySelector(\".some-element\");\n\n// limiting the scope to a context element:\nvar element = elBySel(\".some-element\", context);\n// equals\nvar element = context.querySelector(\".some-element\");\n</code></pre>"},{"location":"javascript/helper-functions/#elbyselallselector-string-context-element-callback-element-element-void-nodelist","title":"<code>elBySelAll(selector: string, context?: Element, callback: (element: Element) =&gt; void): NodeList</code>","text":"<p>The underlying <code>querySelector()</code>-method works on the entire DOM hierarchy and can yield results outside of your context element! Please read and understand the MDN article on <code>Element.querySelector()</code> to learn more about this.</p> <p>Finds and returns a <code>NodeList</code> containing all elements that match the provided CSS selector. Although <code>NodeList</code> is an array-like structure, it is not possible to iterate over it using array functions, including <code>.forEach()</code> which is not available in Internet Explorer 11.</p> <pre><code>var elements = elBySelAll(\".some-element\");\n// equals\nvar elements = document.querySelectorAll(\".some-element\");\n\n// limiting the scope to a context element:\nvar elements = elBySelAll(\".some-element\", context);\n// equals\nvar elements = context.querySelectorAll(\".some-element\");\n</code></pre>"},{"location":"javascript/helper-functions/#callback-to-iterate-over-elements","title":"Callback to Iterate Over Elements","text":"<p><code>elBySelAll()</code> supports an optional third parameter that expects a callback function that is invoked for every element in the list.</p> <pre><code>// set the 2nd parameter to `undefined` or `null` to query the whole document\nelBySelAll(\".some-element\", undefined, function(element) {\n// is called for each element\n});\n\n// limiting the scope to a context element:\nelBySelAll(\".some-element\", context, function(element) {\n// is called for each element\n});\n</code></pre>"},{"location":"javascript/helper-functions/#elclosestelement-element-selector-string-element-null","title":"<code>elClosest(element: Element, selector: string): Element | null</code>","text":"<p>Returns the first <code>Element</code> that matches the provided CSS selector, this will return the provided element itself if it matches the selector.</p> <pre><code>var element = elClosest(context, \".some-element\");\n// equals\nvar element = context.closest(\".some-element\");\n</code></pre>"},{"location":"javascript/helper-functions/#text-nodes","title":"Text Nodes","text":"<p>If the provided context is a <code>Text</code>-node, the function will move the context to the parent element before applying the CSS selector. If the <code>Text</code> has no parent, <code>null</code> is returned without evaluating the selector.</p>"},{"location":"javascript/helper-functions/#elbyclassclassname-string-context-element-nodelist","title":"<code>elByClass(className: string, context?: Element): NodeList</code>","text":"<p>Returns a live <code>NodeList</code> containing all elements that match the provided CSS class now and in the future! The collection is automatically updated whenever an element with that class is added or removed from the DOM, it will also include elements that get dynamically assigned or removed this CSS class.</p> <p>You absolutely need to understand that this collection is dynamic, that means that elements can and will be added and removed from the collection even while you iterate over it. There are only very few cases where you would need such a collection, almost always <code>elBySelAll()</code> is what you're looking for.</p> <pre><code>// no leading dot!\nvar elements = elByClass(\"some-element\");\n// equals\nvar elements = document.getElementsByClassName(\"some-element\");\n\n// limiting the scope to a context element:\nvar elements = elByClass(\"some-element\", context);\n// equals\nvar elements = context.getElementsByClassName(\".some-element\");\n</code></pre>"},{"location":"javascript/helper-functions/#elbytagtagname-string-context-element-nodelist","title":"<code>elByTag(tagName: string, context?: Element): NodeList</code>","text":"<p>Returns a live <code>NodeList</code> containing all elements with the provided tag name now and in the future! Please read the remarks on <code>elByClass()</code> above to understand the implications of this.</p> <pre><code>var elements = elByTag(\"div\");\n// equals\nvar elements = document.getElementsByTagName(\"div\");\n\n// limiting the scope to a context element:\nvar elements = elByTag(\"div\", context);\n// equals\nvar elements = context.getElementsByTagName(\"div\");\n</code></pre>"},{"location":"javascript/helper-functions/#utility-functions","title":"Utility Functions","text":""},{"location":"javascript/helper-functions/#elinnererrorelement-element-errormessage-string-ishtml-boolean-element-null","title":"<code>elInnerError(element: Element, errorMessage?: string, isHtml?: boolean): Element | null</code>","text":"<p>Unified function to display and remove inline error messages for input elements, please read the section in the migration docs to learn more about this function.</p>"},{"location":"javascript/helper-functions/#string-extensions","title":"String Extensions","text":""},{"location":"javascript/helper-functions/#hashcode-string","title":"<code>hashCode(): string</code>","text":"<p>Computes a numeric hash value of a string similar to Java's <code>String.hashCode()</code> method.</p> <pre><code>console.log(\"Hello World\".hashCode());\n// outputs: -862545276\n</code></pre>"},{"location":"javascript/legacy-api/","title":"Legacy JavaScript API","text":""},{"location":"javascript/legacy-api/#introduction","title":"Introduction","text":"<p>The legacy JavaScript API is the original code that was part of the 2.x series of WoltLab Suite, formerly known as WoltLab Community Framework. It has been superseded for the most part by the ES5/AMD-modules API introduced with WoltLab Suite 3.0.</p> <p>Some parts still exist to this day for backwards-compatibility and because some less important components have not been rewritten yet. The old API is still supported, but marked as deprecated and will continue to be replaced parts by part in future releases, up until their entire removal, including jQuery support.</p> <p>This guide does not provide any explanation on the usage of those legacy components, but instead serves as a cheat sheet to convert code to use the new API.</p>"},{"location":"javascript/legacy-api/#classes","title":"Classes","text":""},{"location":"javascript/legacy-api/#singletons","title":"Singletons","text":"<p>Singleton instances are designed to provide a unique \"instance\" of an object regardless of when its first instance was created. Due to the lack of a <code>class</code> construct in ES5, they are represented by mere objects that act as an instance.</p> <pre><code>// App.js\nwindow.App = {};\nApp.Foo = {\nbar: function() {}\n};\n\n// --- NEW API ---\n\n// App/Foo.js\ndefine([], function() {\n\"use strict\";\n\nreturn {\nbar: function() {}\n};\n});\n</code></pre>"},{"location":"javascript/legacy-api/#regular-classes","title":"Regular Classes","text":"<pre><code>// App.js\nwindow.App = {};\nApp.Foo = Class.extend({\nbar: function() {}\n});\n\n// --- NEW API ---\n\n// App/Foo.js\ndefine([], function() {\n\"use strict\";\n\nfunction Foo() {};\nFoo.prototype = {\nbar: function() {}\n};\n\nreturn Foo;\n});\n</code></pre>"},{"location":"javascript/legacy-api/#inheritance","title":"Inheritance","text":"<pre><code>// App.js\nwindow.App = {};\nApp.Foo = Class.extend({\nbar: function() {}\n});\nApp.Baz = App.Foo.extend({\nmakeSnafucated: function() {}\n});\n\n// --- NEW API ---\n\n// App/Foo.js\ndefine([], function() {\n\"use strict\";\n\nfunction Foo() {};\nFoo.prototype = {\nbar: function() {}\n};\n\nreturn Foo;\n});\n\n// App/Baz.js\ndefine([\"Core\", \"./Foo\"], function(Core, Foo) {\n\"use strict\";\n\nfunction Baz() {};\nCore.inherit(Baz, Foo, {\nmakeSnafucated: function() {}\n});\n\nreturn Baz;\n});\n</code></pre>"},{"location":"javascript/legacy-api/#ajax-requests","title":"Ajax Requests","text":"<pre><code>// App.js\nApp.Foo = Class.extend({\n_proxy: null,\n\ninit: function() {\nthis._proxy = new WCF.Action.Proxy({\nsuccess: $.proxy(this._success, this)\n});\n},\n\nbar: function() {\nthis._proxy.setOption(\"data\", {\nactionName: \"baz\",\nclassName: \"app\\\\foo\\\\FooAction\",\nobjectIDs: [1, 2, 3],\nparameters: {\nfoo: \"bar\",\nbaz: true\n}\n});\nthis._proxy.sendRequest();\n},\n\n_success: function(data) {\n// ajax request result\n}\n});\n\n// --- NEW API ---\n\n// App/Foo.js\ndefine([\"Ajax\"], function(Ajax) {\n\"use strict\";\n\nfunction Foo() {}\nFoo.prototype = {\nbar: function() {\nAjax.api(this, {\nobjectIDs: [1, 2, 3],\nparameters: {\nfoo: \"bar\",\nbaz: true\n}\n});\n},\n\n// magic method!\n_ajaxSuccess: function(data) {\n// ajax request result\n},\n\n// magic method!\n_ajaxSetup: function() {\nreturn {\nactionName: \"baz\",\nclassName: \"app\\\\foo\\\\FooAction\"\n}\n}\n}\n\nreturn Foo;\n});\n</code></pre>"},{"location":"javascript/legacy-api/#phrases","title":"Phrases","text":"<pre><code>&lt;script data-relocate=\"true\"&gt;\n$(function() {\nWCF.Language.addObject({\n'app.foo.bar': '{lang}app.foo.bar{/lang}'\n});\n\nconsole.log(WCF.Language.get(\"app.foo.bar\"));\n});\n&lt;/script&gt;\n\n&lt;!-- NEW API --&gt;\n\n&lt;script data-relocate=\"true\"&gt;\nrequire([\"Language\"], function(Language) {\nLanguage.addObject({\n'app.foo.bar': '{jslang}app.foo.bar{/jslang}'\n});\n\nconsole.log(Language.get(\"app.foo.bar\"));\n});\n&lt;/script&gt;\n</code></pre>"},{"location":"javascript/legacy-api/#event-listener","title":"Event-Listener","text":"<pre><code>&lt;script data-relocate=\"true\"&gt;\n$(function() {\nWCF.System.Event.addListener(\"app.foo.bar\", \"makeSnafucated\", function(data) {\nconsole.log(\"Event was invoked.\");\n});\n\nWCF.System.Event.fireEvent(\"app.foo.bar\", \"makeSnafucated\", { some: \"data\" });\n});\n&lt;/script&gt;\n\n&lt;!-- NEW API --&gt;\n\n&lt;script data-relocate=\"true\"&gt;\nrequire([\"EventHandler\"], function(EventHandler) {\nEventHandler.add(\"app.foo.bar\", \"makeSnafucated\", function(data) {\nconsole.log(\"Event was invoked\");\n});\n\nEventHandler.fire(\"app.foo.bar\", \"makeSnafucated\", { some: \"data\" });\n});\n&lt;/script&gt;\n</code></pre>"},{"location":"javascript/new-api_ajax/","title":"Ajax Requests - JavaScript API","text":""},{"location":"javascript/new-api_ajax/#promise-based-api-for-databaseobjectaction","title":"<code>Promise</code>-based API for <code>DatabaseObjectAction</code>","text":"<p>WoltLab Suite 5.5 introduces a new API for Ajax requests that uses <code>Promise</code>s to control the code flow. It does not rely on references to existing objects and does not use arbitrary callbacks to handle the setup and handling of the request.</p>"},{"location":"javascript/new-api_ajax/#usage","title":"Usage","text":"MyModule.ts<pre><code>import * as Ajax from \"./Ajax\";\n\ntype ResponseGetLatestFoo = {\ntemplate: string;\n};\n\nexport class MyModule {\nprivate readonly bar: string;\nprivate readonly objectId: number;\n\nconstructor(objectId: number, bar: string, buttonId: string) {\nthis.bar = bar;\nthis.objectId = objectId;\n\nconst button = document.getElementById(buttonId);\nbutton?.addEventListener(\"click\", (event) =&gt; void this.click(event));\n}\n\nasync click(event: MouseEvent): Promise&lt;void&gt; {\nevent.preventDefault();\n\nconst button = event.currentTarget as HTMLElement;\nif (button.classList.contains(\"disabled\")) {\nreturn;\n}\nbutton.classList.add(\"disabled\");\n\ntry {\nconst response = (await Ajax.dboAction(\"getLatestFoo\", \"wcf\\\\data\\\\foo\\\\FooAction\")\n.objectIds([this.objectId])\n.payload({ bar: this.bar })\n.dispatch()) as ResponseGetLatestFoo;\n\ndocument.getElementById(\"latestFoo\")!.innerHTML = response.template;\n} finally {\nbutton.classList.remove(\"disabled\");\n}\n}\n}\n\nexport default MyModule;\n</code></pre> <p>The actual code to dispatch and evaluate a request is only four lines long and offers full IDE auto completion support. This example uses a <code>finally</code> block to reset the button class once the request has finished, regardless of the result.</p> <p>If you do not handle the errors (or chose not to handle some errors), the global rejection handler will take care of this and show an dialog that informs about the failed request. This mimics the behavior of the <code>_ajaxFailure()</code> callback in the legacy API.</p>"},{"location":"javascript/new-api_ajax/#aborting-in-flight-requests","title":"Aborting in-flight requests","text":"<p>Sometimes new requests are dispatched against the same API before the response from the previous has arrived. This applies to either long running requests or requests that are dispatched in rapid succession, for example, looking up values when the user is actively typing into a search field.</p> RapidRequests.ts<pre><code>import * as Ajax from \"./Ajax\";\n\nexport class RapidRequests {\nprivate lastRequest: AbortController | undefined = undefined;\n\nconstructor(inputId: string) {\nconst input = document.getElementById(inputId) as HTMLInputElement;\ninput.addEventListener(\"input\", (event) =&gt; void this.input(event));\n}\n\nasync input(event: Event): Promise&lt;void&gt; {\nevent.preventDefault();\n\nconst input = event.currentTarget as HTMLInputElement;\nconst value = input.value.trim();\n\nif (this.lastRequest) {\nthis.lastRequest.abort();\n}\n\nif (value) {\nconst request = Ajax.dboAction(\"getSuggestions\", \"wcf\\\\data\\\\bar\\\\BarAction\").payload({ value });\nthis.lastRequest = request.getAbortController();\n\nconst response = await request.dispatch();\n// Handle the response\n}\n}\n}\n\nexport default RapidRequests;\n</code></pre>"},{"location":"javascript/new-api_ajax/#ajax-inside-modules-legacy-api","title":"Ajax inside Modules (Legacy API)","text":"<p>The Ajax component was designed to be used from inside modules where an object reference is used to delegate request callbacks. This is acomplished through a set of magic methods that are automatically called when the request is created or its state has changed.</p>"},{"location":"javascript/new-api_ajax/#_ajaxsetup","title":"<code>_ajaxSetup()</code>","text":"<p>The lazy initialization is performed upon the first invocation from the callee, using the magic <code>_ajaxSetup()</code> method to retrieve the basic configuration for this and any future requests.</p> <p>The data returned by <code>_ajaxSetup()</code> is cached and the data will be used to pre-populate the request data before sending it. The callee can overwrite any of these properties. It is intended to reduce the overhead when issuing request when these requests share the same properties, such as accessing the same endpoint.</p> <pre><code>// App/Foo.js\ndefine([\"Ajax\"], function(Ajax) {\n\"use strict\";\n\nfunction Foo() {};\nFoo.prototype = {\none: function() {\n// this will issue an ajax request with the parameter `value` set to `1`\nAjax.api(this);\n},\n\ntwo: function() {\n// this request is almost identical to the one issued with `.one()`, but\n// the value is now set to `2` for this invocation only.\nAjax.api(this, {\nparameters: {\nvalue: 2\n}\n});\n},\n\n_ajaxSetup: function() {\nreturn {\ndata: {\nactionName: \"makeSnafucated\",\nclassName: \"app\\\\data\\\\foo\\\\FooAction\",\nparameters: {\nvalue: 1\n}\n}\n}\n}\n};\n\nreturn Foo;\n});\n</code></pre>"},{"location":"javascript/new-api_ajax/#request-settings","title":"Request Settings","text":"<p>The object returned by the aforementioned <code>_ajaxSetup()</code> callback can contain these values:</p>"},{"location":"javascript/new-api_ajax/#data","title":"<code>data</code>","text":"<p>Defaults to <code>{}</code>.</p> <p>A plain JavaScript object that contains the request data that represents the form data of the request. The <code>parameters</code> key is recognized by the PHP Ajax API and becomes accessible through <code>$this-&gt;parameters</code>.</p>"},{"location":"javascript/new-api_ajax/#contenttype","title":"<code>contentType</code>","text":"<p>Defaults to <code>application/x-www-form-urlencoded; charset=UTF-8</code>.</p> <p>The request content type, sets the <code>Content-Type</code> HTTP header if it is not empty.</p>"},{"location":"javascript/new-api_ajax/#responsetype","title":"<code>responseType</code>","text":"<p>Defaults to <code>application/json</code>.</p> <p>The server must respond with the <code>Content-Type</code> HTTP header set to this value, otherwise the request will be treated as failed. Requests for <code>application/json</code> will have the return body attempted to be evaluated as JSON.</p> <p>Other content types will only be validated based on the HTTP header, but no additional transformation is performed. For example, setting the <code>responseType</code> to <code>application/xml</code> will check the HTTP header, but will not transform the <code>data</code> parameter, you'll still receive a string in <code>_ajaxSuccess</code>!</p>"},{"location":"javascript/new-api_ajax/#type","title":"<code>type</code>","text":"<p>Defaults to <code>POST</code>.</p> <p>The HTTP Verb used for this request.</p>"},{"location":"javascript/new-api_ajax/#url","title":"<code>url</code>","text":"<p>Defaults to an empty string.</p> <p>Manual override for the request endpoint, it will be automatically set to the Core API endpoint if left empty. If the Core API endpoint is used, the options <code>includeRequestedWith</code> and <code>withCredentials</code> will be force-set to true.</p>"},{"location":"javascript/new-api_ajax/#withcredentials","title":"<code>withCredentials</code>","text":"<p>Enabling this parameter for any domain other than the current will trigger a CORS preflight request.</p> <p>Defaults to <code>false</code>.</p> <p>Include cookies with this requested, is always true when <code>url</code> is (implicitly) set to the Core API endpoint.</p>"},{"location":"javascript/new-api_ajax/#autoabort","title":"<code>autoAbort</code>","text":"<p>Defaults to <code>false</code>.</p> <p>When set to <code>true</code>, any pending responses to earlier requests will be silently discarded when issuing a new request. This only makes sense if the new request is meant to completely replace the result of the previous one, regardless of its reponse body.</p> <p>Typical use-cases include input field with suggestions, where possible values are requested from the server, but the input changed faster than the server was able to reply. In this particular case the client is not interested in the result for an earlier value, auto-aborting these requests avoids implementing this logic in the requesting code.</p>"},{"location":"javascript/new-api_ajax/#ignoreerror","title":"<code>ignoreError</code>","text":"<p>Defaults to <code>false</code>.</p> <p>Any failing request will invoke the <code>failure</code>-callback to check if an error message should be displayed. Enabling this option will suppress the general error overlay that reports a failed request.</p> <p>You can achieve the same result by returning <code>false</code> in the <code>failure</code>-callback.</p>"},{"location":"javascript/new-api_ajax/#silent","title":"<code>silent</code>","text":"<p>Defaults to <code>false</code>.</p> <p>Enabling this option will suppress the loading indicator overlay for this request, other non-\"silent\" requests will still trigger the loading indicator.</p>"},{"location":"javascript/new-api_ajax/#includerequestedwith","title":"<code>includeRequestedWith</code>","text":"<p>Enabling this parameter for any domain other than the current will trigger a CORS preflight request.</p> <p>Defaults to <code>true</code>.</p> <p>Sets the custom HTTP header <code>X-Requested-With: XMLHttpRequest</code> for the request, it is automatically set to <code>true</code> when <code>url</code> is pointing at the WSC API endpoint.</p>"},{"location":"javascript/new-api_ajax/#failure","title":"<code>failure</code>","text":"<p>Defaults to <code>null</code>.</p> <p>Optional callback function that will be invoked for requests that have failed for one of these reasons:  1. The request timed out.  2. The HTTP status is not <code>2xx</code> or <code>304</code>.  3. A <code>responseType</code> was set, but the response HTTP header <code>Content-Type</code> did not match the expected value.  4. The <code>responseType</code> was set to <code>application/json</code>, but the response body was not valid JSON.</p> <p>The callback function receives the parameter <code>xhr</code> (the <code>XMLHttpRequest</code> object) and <code>options</code> (deep clone of the request parameters). If the callback returns <code>false</code>, the general error overlay for failed requests will be suppressed.</p> <p>There will be no error overlay if <code>ignoreError</code> is set to <code>true</code> or if the request failed while attempting to evaluate the response body as JSON.</p>"},{"location":"javascript/new-api_ajax/#finalize","title":"<code>finalize</code>","text":"<p>Defaults to <code>null</code>.</p> <p>Optional callback function that will be invoked once the request has completed, regardless if it succeeded or failed. The only parameter it receives is <code>options</code> (the request parameters object), but it does not receive the request's <code>XMLHttpRequest</code>.</p>"},{"location":"javascript/new-api_ajax/#success","title":"<code>success</code>","text":"<p>Defaults to <code>null</code>.</p> <p>This semi-optional callback function will always be set to <code>_ajaxSuccess()</code> when invoking <code>Ajax.api()</code>. It receives four parameters:  1. <code>data</code> - The request's response body as a string, or a JavaScript object if     <code>contentType</code> was set to <code>application/json</code>.  2. <code>responseText</code> - The unmodified response body, it equals the value for <code>data</code>     for non-JSON requests.  3. <code>xhr</code> - The underlying <code>XMLHttpRequest</code> object.  4. <code>requestData</code> - The request parameters that were supplied when the request     was issued.</p>"},{"location":"javascript/new-api_ajax/#_ajaxsuccess","title":"<code>_ajaxSuccess()</code>","text":"<p>This callback method is automatically called for successful AJAX requests, it receives four parameters, with the first one containing either the response body as a string, or a JavaScript object for JSON requests.</p>"},{"location":"javascript/new-api_ajax/#_ajaxfailure","title":"<code>_ajaxFailure()</code>","text":"<p>Optional callback function that is invoked for failed requests, it will be automatically called if the callee implements it, otherwise the global error handler will be executed.</p>"},{"location":"javascript/new-api_ajax/#single-requests-without-a-module-legacy-api","title":"Single Requests Without a Module (Legacy API)","text":"<p>The <code>Ajax.api()</code> method expects an object that is used to extract the request configuration as well as providing the callback functions when the request state changes.</p> <p>You can issue a simple Ajax request without object binding through <code>Ajax.apiOnce()</code> that will destroy the instance after the request was finalized. This method is significantly more expensive for repeated requests and does not offer deriving modules from altering the behavior. It is strongly  recommended to always use <code>Ajax.api()</code> for requests to the WSC API endpoint.</p> <pre><code>&lt;script data-relocate=\"true\"&gt;\nrequire([\"Ajax\"], function(Ajax) {\nAjax.apiOnce({\ndata: {\nactionName: \"makeSnafucated\",\nclassName: \"app\\\\data\\\\foo\\\\FooAction\",\nparameters: {\nvalue: 3\n}\n},\nsuccess: function(data) {\nelBySel(\".some-element\").textContent = data.bar;\n}\n})\n});\n&lt;/script&gt;\n</code></pre>"},{"location":"javascript/new-api_browser/","title":"Browser and Screen Sizes - JavaScript API","text":""},{"location":"javascript/new-api_browser/#uiscreen","title":"<code>Ui/Screen</code>","text":"<p>CSS offers powerful media queries that alter the layout depending on the screen sizes, including but not limited to changes between landscape and portrait mode on mobile devices.</p> <p>The <code>Ui/Screen</code> module exposes a consistent interface to execute JavaScript code based on the same media queries that are available in the CSS code already. It features support for unmatching and executing code when a rule matches for the first time during the page lifecycle.</p>"},{"location":"javascript/new-api_browser/#supported-aliases","title":"Supported Aliases","text":"<p>You can pass in custom media queries, but it is strongly recommended to use the built-in media queries that match the same dimensions as your CSS.</p> Alias Media Query <code>screen-xs</code> <code>(max-width: 544px)</code> <code>screen-sm</code> <code>(min-width: 545px) and (max-width: 768px)</code> <code>screen-sm-down</code> <code>(max-width: 768px)</code> <code>screen-sm-up</code> <code>(min-width: 545px)</code> <code>screen-sm-md</code> <code>(min-width: 545px) and (max-width: 1024px)</code> <code>screen-md</code> <code>(min-width: 769px) and (max-width: 1024px)</code> <code>screen-md-down</code> <code>(max-width: 1024px)</code> <code>screen-md-up</code> <code>(min-width: 769px)</code> <code>screen-lg</code> <code>(min-width: 1025px)</code>"},{"location":"javascript/new-api_browser/#onquery-string-callbacks-object-string","title":"<code>on(query: string, callbacks: Object): string</code>","text":"<p>Registers a set of callback functions for the provided media query, the possible keys are <code>match</code>, <code>unmatch</code> and <code>setup</code>. The method returns a randomly generated UUIDv4 that is used to identify these callbacks and allows them to be removed via <code>.remove()</code>.</p>"},{"location":"javascript/new-api_browser/#removequery-string-uuid-string","title":"<code>remove(query: string, uuid: string)</code>","text":"<p>Removes all callbacks for a media query that match the UUIDv4 that was previously obtained from the call to <code>.on()</code>.</p>"},{"location":"javascript/new-api_browser/#isquery-string-boolean","title":"<code>is(query: string): boolean</code>","text":"<p>Tests if the provided media query currently matches and returns true on match.</p>"},{"location":"javascript/new-api_browser/#scrolldisable","title":"<code>scrollDisable()</code>","text":"<p>Temporarily prevents the page from being scrolled, until <code>.scrollEnable()</code> is called.</p>"},{"location":"javascript/new-api_browser/#scrollenable","title":"<code>scrollEnable()</code>","text":"<p>Enables page scrolling again, unless another pending action has also prevented the page scrolling.</p>"},{"location":"javascript/new-api_browser/#environment","title":"<code>Environment</code>","text":"<p>The <code>Environment</code> module uses a mixture of feature detection and user agent sniffing to determine the browser and platform. In general, its results have proven to be very accurate, but it should be taken with a grain of salt regardless. Especially the browser checks are designed to be your last resort, please use feature detection instead whenever it is possible!</p> <p>Sometimes it may be necessary to alter the behavior of your code depending on the browser platform (e. g. mobile devices) or based on a specific browser in order to work-around some quirks.</p>"},{"location":"javascript/new-api_browser/#browser-string","title":"<code>browser(): string</code>","text":"<p>Attempts to detect browsers based on their technology and supported CSS vendor prefixes, and although somewhat reliable for major browsers, it is highly recommended to use feature detection instead.</p> <p>Possible values:  - <code>chrome</code> (includes Opera 15+ and Vivaldi)  - <code>firefox</code>  - <code>safari</code>  - <code>microsoft</code> (Internet Explorer and Edge)  - <code>other</code> (default)</p>"},{"location":"javascript/new-api_browser/#platform-string","title":"<code>platform(): string</code>","text":"<p>Attempts to detect the browser platform using user agent sniffing.</p> <p>Possible values:  - <code>ios</code>  - <code>android</code>  - <code>windows</code> (IE Mobile)  - <code>mobile</code> (generic mobile device)  - <code>desktop</code> (default)</p>"},{"location":"javascript/new-api_core/","title":"Core Modules and Functions - JavaScript API","text":"<p>A brief overview of common methods that may be useful when writing any module.</p>"},{"location":"javascript/new-api_core/#core","title":"<code>Core</code>","text":""},{"location":"javascript/new-api_core/#cloneobject-object-object","title":"<code>clone(object: Object): Object</code>","text":"<p>Creates a deep-clone of the provided object by value, removing any references on the original element, including arrays. However, this does not clone references to non-plain objects, these instances will be copied by reference.</p> <pre><code>require([\"Core\"], function(Core) {\nvar obj1 = { a: 1 };\nvar obj2 = Core.clone(obj1);\n\nconsole.log(obj1 === obj2); // output: false\nconsole.log(obj2.hasOwnProperty(\"a\") &amp;&amp; obj2.a === 1); // output: true\n});\n</code></pre>"},{"location":"javascript/new-api_core/#extendbase-object-merge-object-object","title":"<code>extend(base: Object, ...merge: Object[]): Object</code>","text":"<p>Accepts an infinite amount of plain objects as parameters, values will be copied from the 2nd...nth object into the first object. The first parameter will be cloned and the resulting object is returned.</p> <pre><code>require([\"Core\"], function(Core) {\nvar obj1 = { a: 2 };\nvar obj2 = { a: 1, b: 2 };\nvar obj = Core.extend({\nb: 1\n}, obj1, obj2);\n\nconsole.log(obj.b === 2); // output: true\nconsole.log(obj.hasOwnProperty(\"a\") &amp;&amp; obj.a === 2); // output: false\n});\n</code></pre>"},{"location":"javascript/new-api_core/#inheritbase-object-target-object-merge-object","title":"<code>inherit(base: Object, target: Object, merge?: Object)</code>","text":"<p>Derives the second object's prototype from the first object, afterwards the derived class will pass the <code>instanceof</code> check against the original class.</p> <pre><code>// App.js\nwindow.App = {};\nApp.Foo = Class.extend({\nbar: function() {}\n});\nApp.Baz = App.Foo.extend({\nmakeSnafucated: function() {}\n});\n\n// --- NEW API ---\n\n// App/Foo.js\ndefine([], function() {\n\"use strict\";\n\nfunction Foo() {};\nFoo.prototype = {\nbar: function() {}\n};\n\nreturn Foo;\n});\n\n// App/Baz.js\ndefine([\"Core\", \"./Foo\"], function(Core, Foo) {\n\"use strict\";\n\nfunction Baz() {};\nCore.inherit(Baz, Foo, {\nmakeSnafucated: function() {}\n});\n\nreturn Baz;\n});\n</code></pre>"},{"location":"javascript/new-api_core/#isplainobjectobject-object-boolean","title":"<code>isPlainObject(object: Object): boolean</code>","text":"<p>Verifies if an object is a plain JavaScript object and not an object instance.</p> <pre><code>require([\"Core\"], function(Core) {\nfunction Foo() {}\nFoo.prototype = {\nhello: \"world\";\n};\n\nvar obj1 = { hello: \"world\" };\nvar obj2 = new Foo();\n\nconsole.log(Core.isPlainObject(obj1)); // output: true\nconsole.log(obj1.hello === obj2.hello); // output: true\nconsole.log(Core.isPlainObject(obj2)); // output: false\n});\n</code></pre>"},{"location":"javascript/new-api_core/#triggereventelement-element-eventname-string","title":"<code>triggerEvent(element: Element, eventName: string)</code>","text":"<p>Creates and dispatches a synthetic JavaScript event on an element.</p> <pre><code>require([\"Core\"], function(Core) {\nvar element = elBySel(\".some-element\");\nCore.triggerEvent(element, \"click\");\n});\n</code></pre>"},{"location":"javascript/new-api_core/#language","title":"<code>Language</code>","text":""},{"location":"javascript/new-api_core/#addkey-string-value-string","title":"<code>add(key: string, value: string)</code>","text":"<p>Registers a new phrase.</p> <pre><code>&lt;script data-relocate=\"true\"&gt;\nrequire([\"Language\"], function(Language) {\nLanguage.add('app.foo.bar', '{jslang}app.foo.bar{/jslang}');\n});\n&lt;/script&gt;\n</code></pre>"},{"location":"javascript/new-api_core/#addobjectobject-object","title":"<code>addObject(object: Object)</code>","text":"<p>Registers a list of phrases using a plain object.</p> <pre><code>&lt;script data-relocate=\"true\"&gt;\nrequire([\"Language\"], function(Language) {\nLanguage.addObject({\n'app.foo.bar': '{jslang}app.foo.bar{/jslang}'\n});\n});\n&lt;/script&gt;\n</code></pre>"},{"location":"javascript/new-api_core/#getkey-string-parameters-object-string","title":"<code>get(key: string, parameters?: Object): string</code>","text":"<p>Retrieves a phrase by its key, optionally supporting basic template scripting with dynamic variables passed using the <code>parameters</code> object.</p> <pre><code>require([\"Language\"], function(Language) {\nvar title = Language.get(\"app.foo.title\");\nvar content = Language.get(\"app.foo.content\", {\nsome: \"value\"\n});\n});\n</code></pre>"},{"location":"javascript/new-api_core/#stringutil","title":"<code>StringUtil</code>","text":""},{"location":"javascript/new-api_core/#escapehtmlstr-string-string","title":"<code>escapeHTML(str: string): string</code>","text":"<p>Escapes special HTML characters by converting them into an HTML entity.</p> Character Replacement <code>&amp;</code> <code>&amp;amp;</code> <code>\"</code> <code>&amp;quot;</code> <code>&lt;</code> <code>&amp;lt;</code> <code>&gt;</code> <code>&amp;gt;</code>"},{"location":"javascript/new-api_core/#escaperegexpstr-string-string","title":"<code>escapeRegExp(str: string): string</code>","text":"<p>Escapes a list of characters that have a special meaning in regular expressions and could alter the behavior when embedded into regular expressions.</p>"},{"location":"javascript/new-api_core/#lcfirststr-string-string","title":"<code>lcfirst(str: string): string</code>","text":"<p>Makes a string's first character lowercase.</p>"},{"location":"javascript/new-api_core/#ucfirststr-string-string","title":"<code>ucfirst(str: string): string</code>","text":"<p>Makes a string's first character uppercase.</p>"},{"location":"javascript/new-api_core/#unescapehtmlstr-string-string","title":"<code>unescapeHTML(str: string): string</code>","text":"<p>Converts some HTML entities into their original character. This is the reverse function of <code>escapeHTML()</code>.</p>"},{"location":"javascript/new-api_data-structures/","title":"Data Structures - JavaScript API","text":"<p>These data structures are deprecated since version 5.4. Refer to our migration guide on how to replace them.</p>"},{"location":"javascript/new-api_data-structures/#introduction","title":"Introduction","text":"<p>JavaScript offers only limited types of collections to hold and iterate over data. Despite the ongoing efforts in ES6 and newer, these new data structures and access methods, such as <code>for \u2026 of</code>, are not available in the still supported Internet Explorer 11.</p>"},{"location":"javascript/new-api_data-structures/#dictionary","title":"<code>Dictionary</code>","text":"<p>Represents a simple key-value map, but unlike the use of plain objects, will always to guarantee to iterate over directly set values only.</p> <p>In supported browsers this will use a native <code>Map</code> internally, otherwise a plain object.</p>"},{"location":"javascript/new-api_data-structures/#setkey-string-value-any","title":"<code>set(key: string, value: any)</code>","text":"<p>Adds or updates an item using the provided key. Numeric keys will be converted into strings.</p>"},{"location":"javascript/new-api_data-structures/#deletekey-string","title":"<code>delete(key: string)</code>","text":"<p>Removes an item from the collection.</p>"},{"location":"javascript/new-api_data-structures/#haskey-string-boolean","title":"<code>has(key: string): boolean</code>","text":"<p>Returns true if the key is contained in the collection.</p>"},{"location":"javascript/new-api_data-structures/#getkey-string-any","title":"<code>get(key: string): any</code>","text":"<p>Returns the value for the provided key, or <code>undefined</code> if the key was not found. Use <code>.has()</code> to check for key existence.</p>"},{"location":"javascript/new-api_data-structures/#foreachcallback-value-any-key-string-void","title":"<code>forEach(callback: (value: any, key: string) =&gt; void)</code>","text":"<p>Iterates over all items in the collection in an arbitrary order and invokes the supplied callback with the value and the key.</p>"},{"location":"javascript/new-api_data-structures/#size-number","title":"<code>size: number</code>","text":"<p>This read-only property counts the number of items in the collection.</p>"},{"location":"javascript/new-api_data-structures/#list","title":"<code>List</code>","text":"<p>Represents a list of unique values.</p> <p>In supported browsers this will use a native <code>Set</code> internally, otherwise an array.</p>"},{"location":"javascript/new-api_data-structures/#addvalue-any","title":"<code>add(value: any)</code>","text":"<p>Adds a value to the list. If the value is already part of the list, this method will silently abort.</p>"},{"location":"javascript/new-api_data-structures/#clear","title":"<code>clear()</code>","text":"<p>Resets the collection.</p>"},{"location":"javascript/new-api_data-structures/#deletevalue-any-boolean","title":"<code>delete(value: any): boolean</code>","text":"<p>Attempts to remove a value from the list, it returns true if the value has been part of the list.</p>"},{"location":"javascript/new-api_data-structures/#foreachcallback-value-any-void","title":"<code>forEach(callback: (value: any) =&gt; void)</code>","text":"<p>Iterates over all values in the list in an arbitrary order and invokes the supplied callback for each value.</p>"},{"location":"javascript/new-api_data-structures/#hasvalue-any-boolean","title":"<code>has(value: any): boolean</code>","text":"<p>Returns true if the provided value is part of this list.</p>"},{"location":"javascript/new-api_data-structures/#size-number_1","title":"<code>size: number</code>","text":"<p>This read-only property counts the number of items in the list.</p>"},{"location":"javascript/new-api_data-structures/#objectmap","title":"<code>ObjectMap</code>","text":"<p>This class uses a <code>WeakMap</code> internally, the keys are only weakly referenced and do not prevent garbage collection.</p> <p>Represents a collection where any kind of objects, such as class instances or DOM elements, can be used as key. These keys are weakly referenced and will not prevent garbage collection from happening, but this also means that it is not possible to enumerate or iterate over the stored keys and values.</p> <p>This class is especially useful when you want to store additional data for objects that may get disposed on runtime, such as DOM elements. Using any regular data collections will cause the object to be referenced indefinitely, preventing the garbage collection from removing orphaned objects.</p>"},{"location":"javascript/new-api_data-structures/#setkey-object-value-object","title":"<code>set(key: Object, value: Object)</code>","text":"<p>Adds the key with the provided value to the map, if the key was already part of the collection, its value is overwritten.</p>"},{"location":"javascript/new-api_data-structures/#deletekey-object","title":"<code>delete(key: Object)</code>","text":"<p>Attempts to remove a key from the collection. The method will abort silently if the key is not part of the collection.</p>"},{"location":"javascript/new-api_data-structures/#haskey-object-boolean","title":"<code>has(key: Object): boolean</code>","text":"<p>Returns true if there is a value for the provided key in this collection.</p>"},{"location":"javascript/new-api_data-structures/#getkey-object-object-undefined","title":"<code>get(key: Object): Object | undefined</code>","text":"<p>Retrieves the value of the provided key, or <code>undefined</code> if the key was not found.</p>"},{"location":"javascript/new-api_dialogs/","title":"Dialogs - JavaScript API","text":""},{"location":"javascript/new-api_dialogs/#introduction","title":"Introduction","text":"<p>Dialogs are full screen overlays that cover the currently visible window area using a semi-opague backdrop and a prominently placed dialog window in the foreground. They shift the attention away from the original content towards the dialog and usually contain additional details and/or dedicated form inputs.</p>"},{"location":"javascript/new-api_dialogs/#_dialogsetup","title":"<code>_dialogSetup()</code>","text":"<p>The lazy initialization is performed upon the first invocation from the callee, using the magic <code>_dialogSetup()</code> method to retrieve the basic configuration for the dialog construction and any event callbacks.</p> <pre><code>// App/Foo.js\ndefine([\"Ui/Dialog\"], function(UiDialog) {\n\"use strict\";\n\nfunction Foo() {};\nFoo.prototype = {\nbar: function() {\n// this will open the dialog constructed by _dialogSetup\nUiDialog.open(this);\n},\n\n_dialogSetup: function() {\nreturn {\nid: \"myDialog\",\nsource: \"&lt;p&gt;Hello World!&lt;/p&gt;\",\noptions: {\nonClose: function() {\n// the fancy dialog was closed!\n}\n}\n}\n}\n};\n\nreturn Foo;\n});\n</code></pre>"},{"location":"javascript/new-api_dialogs/#id-string","title":"<code>id: string</code>","text":"<p>The <code>id</code> is used to identify a dialog on runtime, but is also part of the first- time setup when the dialog has not been opened before. If <code>source</code> is <code>undefined</code>, the module attempts to construct the dialog using an element with the same id.</p>"},{"location":"javascript/new-api_dialogs/#source-any","title":"<code>source: any</code>","text":"<p>There are six different types of value that <code>source</code> does allow and each of them changes how the initial dialog is constructed:</p> <ol> <li><code>undefined</code>   The dialog exists already and the value of <code>id</code> should be used to identify the   element.</li> <li><code>null</code>   The HTML is provided using the second argument of <code>.open()</code>.</li> <li><code>() =&gt; void</code>   If the <code>source</code> is a function, it is executed and is expected to start the   dialog initialization itself.</li> <li><code>Object</code>   Plain objects are interpreted as parameters for an Ajax request, in particular   <code>source.data</code> will be used to issue the request. It is possible to specify the   key <code>source.after</code> as a callback <code>(content: Element, responseData: Object) =&gt; void</code>   that is executed after the dialog was opened.</li> <li><code>string</code>   The string is expected to be plain HTML that should be used to construct the   dialog.</li> <li><code>DocumentFragment</code>   A new container <code>&lt;div&gt;</code> with the provided <code>id</code> is created and the contents of   the <code>DocumentFragment</code> is appended to it. This container is then used for the   dialog.</li> </ol>"},{"location":"javascript/new-api_dialogs/#options-object","title":"<code>options: Object</code>","text":"<p>All configuration options and callbacks are handled through this object.</p>"},{"location":"javascript/new-api_dialogs/#optionsbackdropcloseonclick-boolean","title":"<code>options.backdropCloseOnClick: boolean</code>","text":"<p>Defaults to <code>true</code>.</p> <p>Clicks on the dialog backdrop will close the top-most dialog. This option will be force-disabled if the option <code>closeable</code> is set to <code>false</code>.</p>"},{"location":"javascript/new-api_dialogs/#optionsclosable-boolean","title":"<code>options.closable: boolean</code>","text":"<p>Defaults to <code>true</code>.</p> <p>Enables the close button in the dialog title, when disabled the dialog can be closed through the <code>.close()</code> API call only.</p>"},{"location":"javascript/new-api_dialogs/#optionsclosebuttonlabel-string","title":"<code>options.closeButtonLabel: string</code>","text":"<p>Defaults to <code>Language.get(\"wcf.global.button.close\")</code>.</p> <p>The phrase that is displayed in the tooltip for the close button.</p>"},{"location":"javascript/new-api_dialogs/#optionscloseconfirmmessage-string","title":"<code>options.closeConfirmMessage: string</code>","text":"<p>Defaults to <code>\"\"</code>.</p> <p>Shows a confirmation dialog using the configured message before closing the dialog. The dialog will not be closed if the dialog is rejected by the user.</p>"},{"location":"javascript/new-api_dialogs/#optionstitle-string","title":"<code>options.title: string</code>","text":"<p>Defaults to <code>\"\"</code>.</p> <p>The phrase that is displayed in the dialog title.</p>"},{"location":"javascript/new-api_dialogs/#optionsonbeforeclose-id-string-void","title":"<code>options.onBeforeClose: (id: string) =&gt; void</code>","text":"<p>Defaults to <code>null</code>.</p> <p>The callback is executed when the user clicks on the close button or, if enabled, on the backdrop. The callback is responsible to close the dialog by itself, the default close behavior is automatically prevented.</p>"},{"location":"javascript/new-api_dialogs/#optionsonclose-id-string-void","title":"<code>options.onClose: (id: string) =&gt; void</code>","text":"<p>Defaults to <code>null</code>.</p> <p>The callback is notified once the dialog is about to be closed, but is still visible at this point. It is not possible to abort the close operation at this point.</p>"},{"location":"javascript/new-api_dialogs/#optionsonshow-content-element-void","title":"<code>options.onShow: (content: Element) =&gt; void</code>","text":"<p>Defaults to <code>null</code>.</p> <p>Receives the dialog content element as its only argument, allowing the callback to modify the DOM or to register event listeners before the dialog is presented to the user. The dialog is already visible at call time, but the dialog has not been finalized yet.</p>"},{"location":"javascript/new-api_dialogs/#settitleid-string-object-title-string","title":"<code>setTitle(id: string | Object, title: string)</code>","text":"<p>Sets the title of a dialog.</p>"},{"location":"javascript/new-api_dialogs/#setcallbackid-string-object-key-string-value-data-any-void-null","title":"<code>setCallback(id: string | Object, key: string, value: (data: any) =&gt; void | null)</code>","text":"<p>Sets a callback function after the dialog initialization, the special value <code>null</code> will remove a previously set callback. Valid values for <code>key</code> are <code>onBeforeClose</code>, <code>onClose</code> and <code>onShow</code>.</p>"},{"location":"javascript/new-api_dialogs/#rebuildid-string-object","title":"<code>rebuild(id: string | Object)</code>","text":"<p>Rebuilds a dialog by performing various calculations on the maximum dialog height in regards to the overflow handling and adjustments for embedded forms. This method is automatically invoked whenever a dialog is shown, after invoking the <code>options.onShow</code> callback.</p>"},{"location":"javascript/new-api_dialogs/#closeid-string-object","title":"<code>close(id: string | Object)</code>","text":"<p>Closes an open dialog, this will neither trigger a confirmation dialog, nor does it invoke the <code>options.onBeforeClose</code> callback. The <code>options.onClose</code> callback will always be invoked, but it cannot abort the close operation.</p>"},{"location":"javascript/new-api_dialogs/#getdialogid-string-object-object","title":"<code>getDialog(id: string | Object): Object</code>","text":"<p>This method returns an internal data object by reference, any modifications made do have an effect on the dialogs behavior and in particular no validation is performed on the modification. It is strongly recommended to use the <code>.set*()</code> methods only.</p> <p>Returns the internal dialog data that is attached to a dialog. The most important key is <code>.content</code> which holds a reference to the dialog's inner content element.</p>"},{"location":"javascript/new-api_dialogs/#isopenid-string-object-boolean","title":"<code>isOpen(id: string | Object): boolean</code>","text":"<p>Returns true if the dialog exists and is open.</p>"},{"location":"javascript/new-api_dom/","title":"Working with the DOM - JavaScript API","text":""},{"location":"javascript/new-api_dom/#helper-functions","title":"Helper Functions","text":"<p>There is large set of helper functions that assist you when working with the DOM tree and its elements. These functions are globally available and do not require explicit module imports.</p>"},{"location":"javascript/new-api_dom/#domutil","title":"<code>Dom/Util</code>","text":""},{"location":"javascript/new-api_dom/#createfragmentfromhtmlhtml-string-documentfragment","title":"<code>createFragmentFromHtml(html: string): DocumentFragment</code>","text":"<p>Parses a HTML string and creates a <code>DocumentFragment</code> object that holds the resulting nodes.</p>"},{"location":"javascript/new-api_dom/#identifyelement-element-string","title":"<code>identify(element: Element): string</code>","text":"<p>Retrieves the unique identifier (<code>id</code>) of an element. If it does not currently have an id assigned, a generic identifier is used instead.</p>"},{"location":"javascript/new-api_dom/#outerheightelement-element-styles-cssstyledeclaration-number","title":"<code>outerHeight(element: Element, styles?: CSSStyleDeclaration): number</code>","text":"<p>Computes the outer height of an element using the element's <code>offsetHeight</code> and the sum of the rounded down values for <code>margin-top</code> and <code>margin-bottom</code>.</p>"},{"location":"javascript/new-api_dom/#outerwidthelement-element-styles-cssstyledeclaration-number","title":"<code>outerWidth(element: Element, styles?: CSSStyleDeclaration): number</code>","text":"<p>Computes the outer width of an element using the element's <code>offsetWidth</code> and the sum of the rounded down values for <code>margin-left</code> and <code>margin-right</code>.</p>"},{"location":"javascript/new-api_dom/#outerdimensionselement-element-height-number-width-number","title":"<code>outerDimensions(element: Element): { height: number, width: number }</code>","text":"<p>Computes the outer dimensions of an element including its margins.</p>"},{"location":"javascript/new-api_dom/#offsetelement-element-top-number-left-number","title":"<code>offset(element: Element): { top: number, left: number }</code>","text":"<p>Computes the element's offset relative to the top left corner of the document.</p>"},{"location":"javascript/new-api_dom/#setinnerhtmlelement-element-innerhtml-string","title":"<code>setInnerHtml(element: Element, innerHtml: string)</code>","text":"<p>Sets the inner HTML of an element via <code>element.innerHTML = innerHtml</code>. Browsers do not evaluate any embedded <code>&lt;script&gt;</code> tags, therefore this method extracts each of them, creates new <code>&lt;script&gt;</code> tags and inserts them in their original order of appearance.</p>"},{"location":"javascript/new-api_dom/#containselement-element-child-element-boolean","title":"<code>contains(element: Element, child: Element): boolean</code>","text":"<p>Evaluates if <code>element</code> is a direct or indirect parent element of <code>child</code>.</p>"},{"location":"javascript/new-api_dom/#unwrapchildnodeselement-element","title":"<code>unwrapChildNodes(element: Element)</code>","text":"<p>Moves all child nodes out of <code>element</code> while maintaining their order, then removes <code>element</code> from the document.</p>"},{"location":"javascript/new-api_dom/#domchangelistener","title":"<code>Dom/ChangeListener</code>","text":"<p>This class is used to observe specific changes to the DOM, for example after an Ajax request has completed. For performance reasons this is a manually-invoked listener that does not rely on a <code>MutationObserver</code>.</p> <pre><code>require([\"Dom/ChangeListener\"], function(DomChangeListener) {\nDomChangeListener.add(\"App/Foo\", function() {\n// the DOM may have been altered significantly\n});\n\n// propagate changes to the DOM\nDomChangeListener.trigger();\n});\n</code></pre>"},{"location":"javascript/new-api_events/","title":"Event Handling - JavaScript API","text":""},{"location":"javascript/new-api_events/#eventkey","title":"<code>EventKey</code>","text":"<p>This class offers a set of static methods that can be used to determine if some common keys are being pressed. Internally it compares either the <code>.key</code> property if it is supported or the value of <code>.which</code>.</p> <pre><code>require([\"EventKey\"], function(EventKey) {\nelBySel(\".some-input\").addEventListener(\"keydown\", function(event) {\nif (EventKey.Enter(event)) {\n// the `Enter` key was pressed\n}\n});\n});\n</code></pre>"},{"location":"javascript/new-api_events/#arrowdownevent-keyboardevent-boolean","title":"<code>ArrowDown(event: KeyboardEvent): boolean</code>","text":"<p>Returns true if the user has pressed the <code>\u2193</code> key.</p>"},{"location":"javascript/new-api_events/#arrowleftevent-keyboardevent-boolean","title":"<code>ArrowLeft(event: KeyboardEvent): boolean</code>","text":"<p>Returns true if the user has pressed the <code>\u2190</code> key.</p>"},{"location":"javascript/new-api_events/#arrowrightevent-keyboardevent-boolean","title":"<code>ArrowRight(event: KeyboardEvent): boolean</code>","text":"<p>Returns true if the user has pressed the <code>\u2192</code> key.</p>"},{"location":"javascript/new-api_events/#arrowupevent-keyboardevent-boolean","title":"<code>ArrowUp(event: KeyboardEvent): boolean</code>","text":"<p>Returns true if the user has pressed the <code>\u2191</code> key.</p>"},{"location":"javascript/new-api_events/#commaevent-keyboardevent-boolean","title":"<code>Comma(event: KeyboardEvent): boolean</code>","text":"<p>Returns true if the user has pressed the <code>,</code> key.</p>"},{"location":"javascript/new-api_events/#enterevent-keyboardevent-boolean","title":"<code>Enter(event: KeyboardEvent): boolean</code>","text":"<p>Returns true if the user has pressed the <code>\u21b2</code> key.</p>"},{"location":"javascript/new-api_events/#escapeevent-keyboardevent-boolean","title":"<code>Escape(event: KeyboardEvent): boolean</code>","text":"<p>Returns true if the user has pressed the <code>Esc</code> key.</p>"},{"location":"javascript/new-api_events/#tabevent-keyboardevent-boolean","title":"<code>Tab(event: KeyboardEvent): boolean</code>","text":"<p>Returns true if the user has pressed the <code>\u21b9</code> key.</p>"},{"location":"javascript/new-api_events/#eventhandler","title":"<code>EventHandler</code>","text":"<p>A synchronous event system based on string identifiers rather than DOM elements, similar to the PHP event system in WoltLab Suite. Any components can listen to events or trigger events itself at any time.</p>"},{"location":"javascript/new-api_events/#identifiying-events-with-the-developer-tools","title":"Identifiying Events with the Developer Tools","text":"<p>The Developer Tools offer an easy option to identify existing events that are fired while code is being executed. You can enable this watch mode through your browser's console using <code>Devtools.toggleEventLogging()</code>:</p> <pre><code>&gt; Devtools.toggleEventLogging();\n&lt;   Event logging enabled\n&lt; [Devtools.EventLogging] Firing event: bar @ com.example.app.foo\n&lt; [Devtools.EventLogging] Firing event: baz @ com.example.app.foo\n</code></pre>"},{"location":"javascript/new-api_events/#addidentifier-string-action-string-callback-data-object-void-string","title":"<code>add(identifier: string, action: string, callback: (data: Object) =&gt; void): string</code>","text":"<p>Adding an event listeners returns a randomly generated UUIDv4 that is used to identify the listener. This UUID is required to remove a specific listener through the <code>remove()</code> method.</p>"},{"location":"javascript/new-api_events/#fireidentifier-string-action-string-data-object","title":"<code>fire(identifier: string, action: string, data?: Object)</code>","text":"<p>Triggers an event using an optional <code>data</code> object that is passed to each listener by reference.</p>"},{"location":"javascript/new-api_events/#removeidentifier-string-action-string-uuid-string","title":"<code>remove(identifier: string, action: string, uuid: string)</code>","text":"<p>Removes a previously registered event listener using the UUID returned by <code>add()</code>.</p>"},{"location":"javascript/new-api_events/#removeallidentifier-string-action-string","title":"<code>removeAll(identifier: string, action: string)</code>","text":"<p>Removes all event listeners registered for the provided <code>identifier</code> and <code>action</code>.</p>"},{"location":"javascript/new-api_events/#removeallbysuffixidentifier-string-suffix-string","title":"<code>removeAllBySuffix(identifier: string, suffix: string)</code>","text":"<p>Removes all event listeners for an <code>identifier</code> whose action ends with the value of <code>suffix</code>.</p>"},{"location":"javascript/new-api_ui/","title":"User Interface - JavaScript API","text":""},{"location":"javascript/new-api_ui/#uialignment","title":"<code>Ui/Alignment</code>","text":"<p>Calculates the alignment of one element relative to another element, with support for boundary constraints, alignment restrictions and additional pointer elements.</p>"},{"location":"javascript/new-api_ui/#setelement-element-referenceelement-element-options-object","title":"<code>set(element: Element, referenceElement: Element, options: Object)</code>","text":"<p>Calculates and sets the alignment of the element <code>element</code>.</p>"},{"location":"javascript/new-api_ui/#verticaloffset-number","title":"<code>verticalOffset: number</code>","text":"<p>Defaults to <code>0</code>.</p> <p>Creates a gap between the element and the reference element, in pixels.</p>"},{"location":"javascript/new-api_ui/#pointer-boolean","title":"<code>pointer: boolean</code>","text":"<p>Defaults to <code>false</code>.</p> <p>Sets the position of the pointer element, requires an existing child of the element with the CSS class <code>.elementPointer</code>.</p>"},{"location":"javascript/new-api_ui/#pointeroffset-number","title":"<code>pointerOffset: number</code>","text":"<p>Defaults to <code>4</code>.</p> <p>The margin from the left/right edge of the element and is used to avoid the arrow from being placed right at the edge.</p> <p>Does not apply when aligning the element to the reference elemnent's center.</p>"},{"location":"javascript/new-api_ui/#pointerclassnames-string","title":"<code>pointerClassNames: string[]</code>","text":"<p>Defaults to <code>[]</code>.</p> <p>If your element uses CSS-only pointers, such as using the <code>::before</code> or <code>::after</code> pseudo selectors, you can specifiy two separate CSS class names that control the alignment:</p> <ul> <li><code>pointerClassNames[0]</code> is applied to the element when the pointer is displayed    at the bottom.</li> <li><code>pointerClassNames[1]</code> is used to align the pointer to the right side of the   element.</li> </ul>"},{"location":"javascript/new-api_ui/#refdimensionselement-element","title":"<code>refDimensionsElement: Element</code>","text":"<p>Defaults to <code>null</code>.</p> <p>An alternative element that will be used to determine the position and dimensions of the reference element. This can be useful if you reference element is contained in a wrapper element with alternating dimensions.</p>"},{"location":"javascript/new-api_ui/#horizontal-string","title":"<code>horizontal: string</code>","text":"<p>This value is automatically flipped for RTL (right-to-left) languages, <code>left</code> is changed into <code>right</code> and vice versa.</p> <p>Defaults to <code>\"left\"</code>.</p> <p>Sets the prefered alignment, accepts either <code>left</code> or <code>right</code>. The value <code>left</code> instructs the module to align the element with the left boundary of the reference element.</p> <p>The <code>horizontal</code> alignment is used as the default and a flip only occurs, if there is not enough space in the desired direction. If the element exceeds the boundaries in both directions, the value of <code>horizontal</code> is used.</p>"},{"location":"javascript/new-api_ui/#vertical-string","title":"<code>vertical: string</code>","text":"<p>Defaults to <code>\"bottom\"</code>.</p> <p>Sets the prefered alignment, accepts either <code>bottom</code> or <code>top</code>. The value <code>bottom</code> instructs the module to align the element below the reference element.</p> <p>The <code>vertical</code> alignment is used as the default and a flip only occurs, if there is not enough space in the desired direction. If the element exceeds the boundaries in both directions, the value of <code>vertical</code> is used.</p>"},{"location":"javascript/new-api_ui/#allowflip-string","title":"<code>allowFlip: string</code>","text":"<p>The value for <code>horizontal</code> is automatically flipped for RTL (right-to-left) languages, <code>left</code> is changed into <code>right</code> and vice versa. This setting only controls the behavior when violating space constraints, therefore the aforementioned transformation is always applied.</p> <p>Defaults to <code>\"both\"</code>.</p> <p>Restricts the automatic alignment flipping if the element exceeds the window boundaries in the instructed direction.</p> <ul> <li><code>both</code> - No restrictions.</li> <li><code>horizontal</code> - Element can be aligned with the left or the right boundary of   the reference element, but the vertical position is fixed.</li> <li><code>vertical</code> - Element can be aligned below or above the reference element,   but the vertical position is fixed.</li> <li><code>none</code> - No flipping can occur, the element will be aligned regardless of   any space constraints.</li> </ul>"},{"location":"javascript/new-api_ui/#uicloseoverlay","title":"<code>Ui/CloseOverlay</code>","text":"<p>Register elements that should be closed when the user clicks anywhere else, such as drop-down menus or tooltips.</p> <pre><code>require([\"Ui/CloseOverlay\"], function(UiCloseOverlay) {\nUiCloseOverlay.add(\"App/Foo\", function() {\n// invoked, close something\n});\n});\n</code></pre>"},{"location":"javascript/new-api_ui/#addidentifier-string-callback-void","title":"<code>add(identifier: string, callback: () =&gt; void)</code>","text":"<p>Adds a callback that will be invoked when the user clicks anywhere else.</p>"},{"location":"javascript/new-api_ui/#uiconfirmation","title":"<code>Ui/Confirmation</code>","text":"<p>Prompt the user to make a decision before carrying out an action, such as a safety warning before permanently deleting content.</p> <pre><code>require([\"Ui/Confirmation\"], function(UiConfirmation) {\nUiConfirmation.show({\nconfirm: function() {\n// the user has confirmed the dialog\n},\nmessage: \"Do you really want to continue?\"\n});\n});\n</code></pre>"},{"location":"javascript/new-api_ui/#showoptions-object","title":"<code>show(options: Object)</code>","text":"<p>Displays a dialog overlay with actions buttons to confirm or reject the dialog.</p>"},{"location":"javascript/new-api_ui/#cancel-parameters-object-void","title":"<code>cancel: (parameters: Object) =&gt; void</code>","text":"<p>Defaults to <code>null</code>.</p> <p>Callback that is invoked when the dialog was rejected.</p>"},{"location":"javascript/new-api_ui/#confirm-parameters-object-void","title":"<code>confirm: (parameters: Object) =&gt; void</code>","text":"<p>Defaults to <code>null</code>.</p> <p>Callback that is invoked when the user has confirmed the dialog.</p>"},{"location":"javascript/new-api_ui/#message-string","title":"<code>message: string</code>","text":"<p>Defaults to '\"\"'.</p> <p>Text that is displayed in the content area of the dialog, optionally this can be HTML, but this requires <code>messageIsHtml</code> to be enabled.</p>"},{"location":"javascript/new-api_ui/#messageishtml","title":"<code>messageIsHtml</code>","text":"<p>Defaults to <code>false</code>.</p> <p>The <code>message</code> option is interpreted as text-only, setting this option to <code>true</code> will cause the <code>message</code> to be evaluated as HTML.</p>"},{"location":"javascript/new-api_ui/#parameters-object","title":"<code>parameters: Object</code>","text":"<p>Optional list of parameter options that will be passed to the <code>cancel()</code> and <code>confirm()</code> callbacks.</p>"},{"location":"javascript/new-api_ui/#template-string","title":"<code>template: string</code>","text":"<p>An optional HTML template that will be inserted into the dialog content area, but after the <code>message</code> section.</p>"},{"location":"javascript/new-api_ui/#uinotification","title":"<code>Ui/Notification</code>","text":"<p>Displays a simple notification at the very top of the window, such as a success message for Ajax based actions.</p> <pre><code>require([\"Ui/Notification\"], function(UiNotification) {\nUiNotification.show(\n\"Your changes have been saved.\",\nfunction() {\n// this callback will be invoked after 2 seconds\n},\n\"success\"\n);\n});\n</code></pre>"},{"location":"javascript/new-api_ui/#showmessage-string-callback-void-cssclassname-string","title":"<code>show(message: string, callback?: () =&gt; void, cssClassName?: string)</code>","text":"<p>Shows the notification and executes the callback after 2 seconds.</p>"},{"location":"javascript/new-api_writing-a-module/","title":"Writing a Module - JavaScript API","text":""},{"location":"javascript/new-api_writing-a-module/#introduction","title":"Introduction","text":"<p>The new JavaScript-API was introduced with WoltLab Suite 3.0 and was a major change in all regards. The previously used API heavily relied on larger JavaScript files that contained a lot of different components with hidden dependencies and suffered from extensive jQuery usage for historic reasons.</p> <p>Eventually a new API was designed that solves the issues with the legacy API by following a few basic principles:  1. Vanilla ES5-JavaScript.     It allows us to achieve the best performance across all platforms, there is     simply no reason to use jQuery today and the performance penalty on mobile     devices is a real issue.  2. Strict usage of modules.     Each component is placed in an own file and all dependencies are explicitly     declared and injected at the top.Eventually we settled with AMD-style modules     using require.js which offers both lazy loading and \"ahead of time\"-compilatio     with <code>r.js</code>.  3. No jQuery-based components on page init.     Nothing is more annoying than loading a page and then wait for JavaScript to     modify the page before it becomes usable, forcing the user to sit and wait.     Heavily optimized vanilla JavaScript components offered the speed we wanted.  4. Limited backwards-compatibility.     The new API should make it easy to update existing components by providing     similar interfaces, while still allowing legacy code to run side-by-side for     best compatibility and to avoid rewritting everything from the start.</p>"},{"location":"javascript/new-api_writing-a-module/#defining-a-module","title":"Defining a Module","text":"<p>The default location for modules is <code>js/</code> in the Core's app dir, but every app and plugin can register their own lookup path by providing the path using a template-listener on <code>requirePaths@headIncludeJavaScript</code>.</p> <p>For this example we'll assume the file is placed at <code>js/WoltLabSuite/Core/Ui/Foo.js</code>, the module name is therefore <code>WoltLabSuite/Core/Ui/Foo</code>, it is automatically derived from the file path and name.</p> <p>For further instructions on how to define and require modules head over to the RequireJS API.</p> <pre><code>define([\"Ajax\", \"WoltLabSuite/Core/Ui/Bar\"], function(Ajax, UiBar) {\n\"use strict\";\n\nfunction Foo() { this.init(); }\nFoo.prototype = {\ninit: function() {\nelBySel(\".myButton\").addEventListener(WCF_CLICK_EVENT, this._click.bind(this));\n},\n\n_click: function(event) {\nevent.preventDefault();\n\nif (UiBar.isSnafucated()) {\nAjax.api(this);\n}\n},\n\n_ajaxSuccess: function(data) {\nconsole.log(\"Received response\", data);\n},\n\n_ajaxSetup: function() {\nreturn {\ndata: {\nactionName: \"makeSnafucated\",\nclassName: \"wcf\\\\data\\\\foo\\\\FooAction\"\n}\n};\n}\n}\n\nreturn Foo;\n});\n</code></pre>"},{"location":"javascript/new-api_writing-a-module/#loading-a-module","title":"Loading a Module","text":"<p>Modules can then be loaded through their derived name:</p> <pre><code>&lt;script data-relocate=\"true\"&gt;\nrequire([\"WoltLabSuite/Core/Ui/Foo\"], function(UiFoo) {\nnew UiFoo();\n});\n&lt;/script&gt;\n</code></pre>"},{"location":"javascript/new-api_writing-a-module/#module-aliases","title":"Module Aliases","text":"<p>Some common modules have short-hand aliases that can be used to include them without writing out their full name. You can still use their original path, but it is strongly recommended to use the aliases for consistency.</p> Alias Full Path Ajax WoltLabSuite/Core/Ajax AjaxJsonp WoltLabSuite/Core/Ajax/Jsonp AjaxRequest WoltLabSuite/Core/Ajax/Request CallbackList WoltLabSuite/Core/CallbackList ColorUtil WoltLabSuite/Core/ColorUtil Core WoltLabSuite/Core/Core DateUtil WoltLabSuite/Core/Date/Util Devtools WoltLabSuite/Core/Devtools Dictionary WoltLabSuite/Core/Dictionary Dom/ChangeListener WoltLabSuite/Core/Dom/Change/Listener Dom/Traverse WoltLabSuite/Core/Dom/Traverse Dom/Util WoltLabSuite/Core/Dom/Util Environment WoltLabSuite/Core/Environment EventHandler WoltLabSuite/Core/Event/Handler EventKey WoltLabSuite/Core/Event/Key Language WoltLabSuite/Core/Language List WoltLabSuite/Core/List ObjectMap WoltLabSuite/Core/ObjectMap Permission WoltLabSuite/Core/Permission StringUtil WoltLabSuite/Core/StringUtil Ui/Alignment WoltLabSuite/Core/Ui/Alignment Ui/CloseOverlay WoltLabSuite/Core/Ui/CloseOverlay Ui/Confirmation WoltLabSuite/Core/Ui/Confirmation Ui/Dialog WoltLabSuite/Core/Ui/Dialog Ui/Notification WoltLabSuite/Core/Ui/Notification Ui/ReusableDropdown WoltLabSuite/Core/Ui/Dropdown/Reusable Ui/Screen WoltLabSuite/Core/Ui/Screen Ui/Scroll WoltLabSuite/Core/Ui/Scroll Ui/SimpleDropdown WoltLabSuite/Core/Ui/Dropdown/Simple Ui/TabMenu WoltLabSuite/Core/Ui/TabMenu Upload WoltLabSuite/Core/Upload User WoltLabSuite/Core/User"},{"location":"javascript/typescript/","title":"TypeScript","text":""},{"location":"javascript/typescript/#consuming-woltlab-suites-types","title":"Consuming WoltLab Suite\u2019s Types","text":"<p>To consume the types of WoltLab Suite, you will need to install the <code>@woltlab/wcf</code> npm package using a git URL that refers to the appropriate branch of WoltLab/WCF.</p> <p>A full <code>package.json</code> that includes WoltLab Suite, TypeScript, eslint and Prettier could look like the following.</p> package.json <pre><code>{\n\"devDependencies\": {\n\"@typescript-eslint/eslint-plugin\": \"^4.6.1\",\n\"@typescript-eslint/parser\": \"^4.6.1\",\n\"eslint\": \"^7.12.1\",\n\"eslint-config-prettier\": \"^6.15.0\",\n\"prettier\": \"^2.1.2\",\n\"tslib\": \"^2.0.3\",\n\"typescript\": \"^4.1.3\"\n},\n\"dependencies\": {\n\"@woltlab/wcf\": \"https://github.com/WoltLab/WCF.git#master\"\n}\n}\n</code></pre> <p>After installing the types using npm, you will also need to configure <code>tsconfig.json</code> to take the types into account. To do so, you will need to add them to the <code>compilerOptions.paths</code> option. A complete <code>tsconfig.json</code> file that matches the configuration of WoltLab Suite could look like the following.</p> tsconfig.json <pre><code>{\n\"include\": [\n\"node_modules/@woltlab/wcf/global.d.ts\",\n\"ts/**/*\"\n],\n\"compilerOptions\": {\n\"target\": \"es2017\",\n\"module\": \"amd\",\n\"rootDir\": \"ts/\",\n\"outDir\": \"files/js/\",\n\"lib\": [\n\"dom\",\n\"es2017\"\n],\n\"strictNullChecks\": true,\n\"moduleResolution\": \"node\",\n\"esModuleInterop\": true,\n\"noImplicitThis\": true,\n\"strictBindCallApply\": true,\n\"baseUrl\": \".\",\n\"paths\": {\n\"*\": [\n\"node_modules/@woltlab/wcf/ts/*\"\n]\n},\n\"importHelpers\": true\n}\n}\n</code></pre> <p>After this initial set-up, you would place your TypeScript source files into the <code>ts/</code> folder of your project. The generated JavaScript target files will be placed into <code>files/js/</code> and thus will be installed by the file PIP.</p>"},{"location":"javascript/typescript/#additional-tools","title":"Additional Tools","text":"<p>WoltLab Suite uses additional tools to ensure the high quality and a consistent code style of the TypeScript modules. The current configuration of these tools is as follows. It is recommended to re-use this configuration as is.</p> .prettierrc <pre><code>trailingComma: all\nprintWidth: 120\n</code></pre> .eslintrc.js <pre><code>module.exports = {\nroot: true,\nparser: \"@typescript-eslint/parser\",\nparserOptions: {\ntsconfigRootDir: __dirname,\nproject: [\"./tsconfig.json\"]\n},\nplugins: [\"@typescript-eslint\"],\nextends: [\n\"eslint:recommended\",\n\"plugin:@typescript-eslint/recommended\",\n\"plugin:@typescript-eslint/recommended-requiring-type-checking\",\n\"prettier\",\n\"prettier/@typescript-eslint\"\n],\nrules: {\n\"@typescript-eslint/ban-types\": [\n\"error\", {\ntypes: {\n\"object\": false\n},\nextendDefaults: true\n}\n],\n\"@typescript-eslint/no-explicit-any\": 0,\n\"@typescript-eslint/no-non-null-assertion\": 0,\n\"@typescript-eslint/no-unsafe-assignment\": 0,\n\"@typescript-eslint/no-unsafe-call\": 0,\n\"@typescript-eslint/no-unsafe-member-access\": 0,\n\"@typescript-eslint/no-unsafe-return\": 0,\n\"@typescript-eslint/no-unused-vars\": [\n\"error\", {\n\"argsIgnorePattern\": \"^_\"\n}\n]\n}\n};\n</code></pre> .eslintignore <pre><code>**/*.js\n</code></pre> <p>This <code>.gitattributes</code> configuration will automatically collapse the generated JavaScript target files in GitHub\u2019s Diff view. You will not need it if you do not use git or GitHub.</p> .gitattributes <pre><code>files/js/**/*.js linguist-generated\n</code></pre>"},{"location":"javascript/typescript/#writing-a-simple-module","title":"Writing a simple module","text":"<p>After completing this initial set-up you can start writing your first TypeScript module. The TypeScript compiler can be launched in Watch Mode by running <code>npx tsc -w</code>.</p> <p>WoltLab Suite\u2019s modules can be imported using the standard ECMAScript module import syntax by specifying the full module name. The public API of the module can also be exported using the standard ECMAScript module export syntax.</p> ts/Example.ts <pre><code>import * as Language from \"WoltLabSuite/Core/Language\";\n\nexport function run() {\nalert(Language.get(\"wcf.foo.bar\"));\n}\n</code></pre> <p>This simple example module will compile to plain JavaScript that is compatible with the AMD loader that is used by WoltLab Suite.</p> files/js/Example.js <pre><code>define([\"require\", \"exports\", \"tslib\", \"WoltLabSuite/Core/Language\"], function (require, exports, tslib_1, Language) {\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.run = void 0;\nLanguage = tslib_1.__importStar(Language);\nfunction run() {\nalert(Language.get(\"wcf.foo.bar\"));\n}\nexports.run = run;\n});\n</code></pre> <p>Within templates it can be consumed as follows.</p> <pre><code>&lt;script data-relocate=\"true\"&gt;\nrequire([\"Example\"], (Example) =&gt; {\nExample.run(); // Alerts the contents of the `wcf.foo.bar` phrase.\n});\n&lt;/script&gt;\n</code></pre>"},{"location":"migration/wcf21/css/","title":"WCF 2.1.x - CSS","text":"<p>The LESS compiler has been in use since WoltLab Community Framework 2.0, but was replaced with a SCSS compiler in WoltLab Suite 3.0. This change was motivated by SCSS becoming the de facto standard for CSS pre-processing and some really annoying shortcomings in the old LESS compiler.</p> <p>The entire CSS has been rewritten from scratch, please read the docs on CSS to learn what has changed.</p>"},{"location":"migration/wcf21/package/","title":"WCF 2.1.x - Package Components","text":""},{"location":"migration/wcf21/package/#packagexml","title":"package.xml","text":""},{"location":"migration/wcf21/package/#short-instructions","title":"Short Instructions","text":"<p>Instructions can now omit the filename, causing them to use the default filename if defined by the package installation plugin (in short: <code>PIP</code>). Unless overridden it will default to the PIP's class name with the first letter being lower-cased, e.g. <code>EventListenerPackageInstallationPlugin</code> implies the filename <code>eventListener.xml</code>. The file is always assumed to be in the archive's root, files located in subdirectories need to be explicitly stated, just as it worked before.</p> <p>Every PIP can define a custom filename if the default value cannot be properly derived. For example the <code>ACPMenu</code>-pip would default to <code>aCPMenu.xml</code>, requiring the class to explicitly override the default filename with <code>acpMenu.xml</code> for readability.</p>"},{"location":"migration/wcf21/package/#example","title":"Example","text":"<pre><code>&lt;instructions type=\"install\"&gt;\n&lt;!-- assumes `eventListener.xml` --&gt;\n&lt;instruction type=\"eventListener\" /&gt;\n&lt;!-- assumes `install.sql` --&gt;\n&lt;instruction type=\"sql\" /&gt;\n&lt;!-- assumes `language/*.xml` --&gt;\n&lt;instruction type=\"language\" /&gt;\n\n&lt;!-- exceptions --&gt;\n\n&lt;!-- assumes `files.tar` --&gt;\n&lt;instruction type=\"file\" /&gt;\n&lt;!-- no default value, requires relative path --&gt;\n&lt;instruction type=\"script\"&gt;acp/install_com.woltlab.wcf_3.0.php&lt;/instruction&gt;\n&lt;/instructions&gt;\n</code></pre>"},{"location":"migration/wcf21/package/#exceptions","title":"Exceptions","text":"<p>These exceptions represent the built-in PIPs only, 3rd party plugins and apps may define their own exceptions.</p> PIP Default Value <code>acpTemplate</code> <code>acptemplates.tar</code> <code>file</code> <code>files.tar</code> <code>language</code> <code>language/*.xml</code> <code>script</code> (No default value) <code>sql</code> <code>install.sql</code> <code>template</code> <code>templates.tar</code>"},{"location":"migration/wcf21/package/#acpmenuxml","title":"acpMenu.xml","text":""},{"location":"migration/wcf21/package/#renamed-categories","title":"Renamed Categories","text":"<p>The following categories have been renamed, menu items need to be adjusted to reflect the new names:</p> Old Value New Value <code>wcf.acp.menu.link.system</code> <code>wcf.acp.menu.link.configuration</code> <code>wcf.acp.menu.link.display</code> <code>wcf.acp.menu.link.customization</code> <code>wcf.acp.menu.link.community</code> <code>wcf.acp.menu.link.application</code>"},{"location":"migration/wcf21/package/#submenu-items","title":"Submenu Items","text":"<p>Menu items can now offer additional actions to be accessed from within the menu using an icon-based navigation. This step avoids filling the menu with dozens of <code>Add \u2026</code> links, shifting the focus on to actual items. Adding more than one action is not recommended and you should at maximum specify two actions per item.</p>"},{"location":"migration/wcf21/package/#example_1","title":"Example","text":"<pre><code>&lt;!-- category --&gt;\n&lt;acpmenuitem name=\"wcf.acp.menu.link.group\"&gt;\n&lt;parent&gt;wcf.acp.menu.link.user&lt;/parent&gt;\n&lt;showorder&gt;2&lt;/showorder&gt;\n&lt;/acpmenuitem&gt;\n\n&lt;!-- menu item --&gt;\n&lt;acpmenuitem name=\"wcf.acp.menu.link.group.list\"&gt;\n&lt;controller&gt;wcf\\acp\\page\\UserGroupListPage&lt;/controller&gt;\n&lt;parent&gt;wcf.acp.menu.link.group&lt;/parent&gt;\n&lt;permissions&gt;admin.user.canEditGroup,admin.user.canDeleteGroup&lt;/permissions&gt;\n&lt;/acpmenuitem&gt;\n&lt;!-- menu item action --&gt;\n&lt;acpmenuitem name=\"wcf.acp.menu.link.group.add\"&gt;\n&lt;controller&gt;wcf\\acp\\form\\UserGroupAddForm&lt;/controller&gt;\n&lt;!-- actions are defined by menu items of menu items --&gt;\n&lt;parent&gt;wcf.acp.menu.link.group.list&lt;/parent&gt;\n&lt;permissions&gt;admin.user.canAddGroup&lt;/permissions&gt;\n&lt;!-- required FontAwesome icon name used for display --&gt;\n&lt;icon&gt;fa-plus&lt;/icon&gt;\n&lt;/acpmenuitem&gt;\n</code></pre>"},{"location":"migration/wcf21/package/#common-icon-names","title":"Common Icon Names","text":"<p>You should use the same icon names for the (logically) same task, unifying the meaning of items and making the actions predictable.</p> Meaning Icon Name Result Add or create <code>fa-plus</code> Search <code>fa-search</code> Upload <code>fa-upload</code>"},{"location":"migration/wcf21/package/#boxxml","title":"box.xml","text":"<p>The box PIP has been added.</p>"},{"location":"migration/wcf21/package/#cronjobxml","title":"cronjob.xml","text":"<p>Legacy cronjobs are assigned a non-deterministic generic name, the only way to assign them a name is removing them and then adding them again.</p> <p>Cronjobs can now be assigned a name using the name attribute as in <code>&lt;cronjob name=\"com.woltlab.wcf.refreshPackageUpdates\"&gt;</code>, it will be used to identify cronjobs during an update or delete.</p>"},{"location":"migration/wcf21/package/#eventlistenerxml","title":"eventListener.xml","text":"<p>Legacy event listeners are assigned a non-deterministic generic name, the only way to assign them a name is removing them and then adding them again.</p> <p>Event listeners can now be assigned a name using the name attribute as in <code>&lt;eventlistener name=\"sessionPageAccessLog\"&gt;</code>, it will be used to identify event listeners during an update or delete.</p>"},{"location":"migration/wcf21/package/#menuxml","title":"menu.xml","text":"<p>The menu PIP has been added.</p>"},{"location":"migration/wcf21/package/#menuitemxml","title":"menuItem.xml","text":"<p>The menuItem PIP has been added.</p>"},{"location":"migration/wcf21/package/#objecttypexml","title":"objectType.xml","text":"<p>The definition <code>com.woltlab.wcf.user.dashboardContainer</code> has been removed, it was previously used to register pages that qualify for dashboard boxes. Since WoltLab Suite 3.0, all pages registered through the <code>page.xml</code> are valid containers and therefore there is no need for this definition anymore.</p> <p>The definitions <code>com.woltlab.wcf.page</code> and <code>com.woltlab.wcf.user.online.location</code> have been superseded by the <code>page.xml</code>, they're no longer supported.</p>"},{"location":"migration/wcf21/package/#optionxml","title":"option.xml","text":"<p>The <code>module.display</code> category has been renamed into <code>module.customization</code>.</p>"},{"location":"migration/wcf21/package/#pagexml","title":"page.xml","text":"<p>The page PIP has been added.</p>"},{"location":"migration/wcf21/package/#pagemenuxml","title":"pageMenu.xml","text":"<p>The <code>pageMenu.xml</code> has been superseded by the <code>page.xml</code> and is no longer available.</p>"},{"location":"migration/wcf21/php/","title":"WCF 2.1.x - PHP","text":""},{"location":"migration/wcf21/php/#message-processing","title":"Message Processing","text":"<p>WoltLab Suite 3.0 finally made the transition from raw bbcode to bbcode-flavored HTML, with many new features related to message processing being added. This change impacts both message validation and storing, requiring slightly different APIs to get the job done.</p>"},{"location":"migration/wcf21/php/#input-processing-for-storage","title":"Input Processing for Storage","text":"<p>The returned HTML is an intermediate representation with a maximum of meta data embedded into it, designed to be stored in the database. Some bbcodes are replaced during this process, for example <code>[b]\u2026[/b]</code> becomes <code>&lt;strong&gt;\u2026&lt;/strong&gt;</code>, while others are converted into a metacode tag for later processing.</p> <pre><code>&lt;?php\n$processor = new \\wcf\\system\\html\\input\\HtmlInputProcessor();\n$processor-&gt;process($message, $messageObjectType, $messageObjectID);\n$html = $processor-&gt;getHtml();\n</code></pre> <p>The <code>$messageObjectID</code> can be zero if the element did not exist before, but it should be non-zero when saving an edited message.</p>"},{"location":"migration/wcf21/php/#embedded-objects","title":"Embedded Objects","text":"<p>Embedded objects need to be registered after saving the message, but once again you can use the processor instance to do the job.</p> <pre><code>&lt;?php\n$processor = new \\wcf\\system\\html\\input\\HtmlInputProcessor();\n$processor-&gt;process($message, $messageObjectType, $messageObjectID);\n$html = $processor-&gt;getHtml();\n\n// at this point the message is saved to database and the created object\n// `$example` is a `DatabaseObject` with the id column `$exampleID`\n\n$processor-&gt;setObjectID($example-&gt;exampleID);\nif (\\wcf\\system\\message\\embedded\\object\\MessageEmbeddedObjectManager::getInstance()-&gt;registerObjects($processor)) {\n    // there is at least one embedded object, this is also the point at which you\n    // would set `hasEmbeddedObjects` to true (if implemented by your type)\n    (new \\wcf\\data\\example\\ExampleEditor($example))-&gt;update(['hasEmbeddedObjects' =&gt; 1]);\n}\n</code></pre>"},{"location":"migration/wcf21/php/#rendering-the-message","title":"Rendering the Message","text":"<p>The output processor will parse the intermediate HTML and finalize the output for display. This step is highly dynamic and allows for bbcode evaluation and contextual output based on the viewer's permissions.</p> <pre><code>&lt;?php\n$processor = new \\wcf\\system\\html\\output\\HtmlOutputProcessor();\n$processor-&gt;process($html, $messageObjectType, $messageObjectID);\n$renderedHtml = $processor-&gt;getHtml();\n</code></pre>"},{"location":"migration/wcf21/php/#simplified-output","title":"Simplified Output","text":"<p>At some point there can be the need of a simplified output HTML that includes only basic HTML formatting and reduces more sophisticated bbcodes into a simpler representation.</p> <pre><code>&lt;?php\n$processor = new \\wcf\\system\\html\\output\\HtmlOutputProcessor();\n$processor-&gt;setOutputType('text/simplified-html');\n$processor-&gt;process(\u2026);\n</code></pre>"},{"location":"migration/wcf21/php/#plaintext-output","title":"Plaintext Output","text":"<p>The <code>text/plain</code> output type will strip down the simplified HTML into pure text, suitable for text-only output such as the plaintext representation of an email.</p> <pre><code>&lt;?php\n$processor = new \\wcf\\system\\html\\output\\HtmlOutputProcessor();\n$processor-&gt;setOutputType('text/plain');\n$processor-&gt;process(\u2026);\n</code></pre>"},{"location":"migration/wcf21/php/#rebuilding-data","title":"Rebuilding Data","text":""},{"location":"migration/wcf21/php/#converting-from-bbcode","title":"Converting from BBCode","text":"<p>Enabling message conversion for HTML messages is undefined and yields unexpected results.</p> <p>Legacy message that still use raw bbcodes must be converted to be properly parsed by the html processors. This process is enabled by setting the fourth parameter of <code>process()</code> to <code>true</code>.</p> <pre><code>&lt;?php\n$processor = new \\wcf\\system\\html\\input\\HtmlInputProcessor();\n$processor-&gt;process($html, $messageObjectType, $messageObjectID, true);\n$renderedHtml = $processor-&gt;getHtml();\n</code></pre>"},{"location":"migration/wcf21/php/#extracting-embedded-objects","title":"Extracting Embedded Objects","text":"<p>The <code>process()</code> method of the input processor is quite expensive, as it runs through the full message validation including the invocation of HTMLPurifier. This is perfectly fine when dealing with single messages, but when you're handling messages in bulk to extract their embedded objects, you're better of with <code>processEmbeddedContent()</code>. This method deconstructs the message, but skips all validation and expects the input to be perfectly valid, that is the output of a previous run of <code>process()</code> saved to storage.</p> <pre><code>&lt;?php\n$processor = new \\wcf\\system\\html\\input\\HtmlInputProcessor();\n$processor-&gt;processEmbeddedContent($html, $messageObjectType, $messageObjectID);\n\n// invoke `MessageEmbeddedObjectManager::registerObjects` here\n</code></pre>"},{"location":"migration/wcf21/php/#breadcrumbs-page-location","title":"Breadcrumbs / Page Location","text":"<p>Breadcrumbs used to be added left to right, but parent locations are added from the bottom to the top, starting with the first ancestor and going upwards. In most cases you simply need to reverse the order.</p> <p>Breadcrumbs used to be a lose collection of arbitrary links, but are now represented by actual page objects and the control has shifted over to the <code>PageLocationManager</code>.</p> <pre><code>&lt;?php\n// before\n\\wcf\\system\\WCF::getBreadcrumbs()-&gt;add(new \\wcf\\system\\breadcrumb\\Breadcrumb('title', 'link'));\n\n// after\n\\wcf\\system\\page\\PageLocationManager::getInstance()-&gt;addParentLocation($pageIdentifier, $pageObjectID, $object);\n</code></pre>"},{"location":"migration/wcf21/php/#pages-and-forms","title":"Pages and Forms","text":"<p>The property <code>$activeMenuItem</code> has been deprecated for the front end and is no longer evaluated at runtime. Recognition of the active item is entirely based around the invoked controller class name and its definition in the page table. You need to properly register your pages for this feature to work.</p>"},{"location":"migration/wcf21/php/#search","title":"Search","text":""},{"location":"migration/wcf21/php/#isearchableobjecttype","title":"ISearchableObjectType","text":"<p>Added the <code>setLocation()</code> method that is used to set the current page location based on the search result.</p>"},{"location":"migration/wcf21/php/#searchindexmanager","title":"SearchIndexManager","text":"<p>The methods <code>SearchIndexManager::add()</code> and <code>SearchIndexManager::update()</code> have been deprecated and forward their call to the new method <code>SearchIndexManager::set()</code>.</p>"},{"location":"migration/wcf21/templates/","title":"WCF 2.1.x - Templates","text":""},{"location":"migration/wcf21/templates/#page-layout","title":"Page Layout","text":"<p>The template structure has been overhauled and it is no longer required nor recommended to include internal templates, such as <code>documentHeader</code>, <code>headInclude</code> or <code>userNotice</code>. Instead use a simple <code>{include file='header'}</code> that now takes care of of the entire application frame.</p> <ul> <li>Templates must not include a trailing <code>&lt;/body&gt;&lt;/html&gt;</code> after including the <code>footer</code> template.</li> <li>The <code>documentHeader</code>, <code>headInclude</code> and <code>userNotice</code> template should no longer be included manually, the same goes with the <code>&lt;body&gt;</code> element, please use <code>{include file='header'}</code> instead.</li> <li>The <code>sidebarOrientation</code> variable for the <code>header</code> template has been removed and no longer works.</li> <li><code>header.boxHeadline</code> has been unified and now reads <code>header.contentHeader</code></li> </ul> <p>Please see the full example at the end of this page for more information.</p>"},{"location":"migration/wcf21/templates/#sidebars","title":"Sidebars","text":"<p>Sidebars are now dynamically populated by the box system, this requires a small change to unify the markup. Additionally the usage of <code>&lt;fieldset&gt;</code> has been deprecated due to browser inconsistencies and bugs and should be replaced with <code>section.box</code>.</p> <p>Previous markup used in WoltLab Community Framework 2.1 and earlier:</p> <pre><code>&lt;fieldset&gt;\n    &lt;legend&gt;&lt;!-- Title --&gt;&lt;/legend&gt;\n\n    &lt;div&gt;\n        &lt;!-- Content --&gt;\n    &lt;/div&gt;\n&lt;/fieldset&gt;\n</code></pre> <p>The new markup since WoltLab Suite 3.0:</p> <pre><code>&lt;section class=\"box\"&gt;\n    &lt;h2 class=\"boxTitle\"&gt;&lt;!-- Title --&gt;&lt;/h2&gt;\n\n    &lt;div class=\"boxContent\"&gt;\n        &lt;!-- Content --&gt;\n    &lt;/div&gt;\n&lt;/section&gt;\n</code></pre>"},{"location":"migration/wcf21/templates/#forms","title":"Forms","text":"<p>The input tag for session ids <code>SID_INPUT_TAG</code> has been deprecated and no longer yields any content, it can be safely removed. In previous versions forms have been wrapped in <code>&lt;div class=\"container containerPadding marginTop\"&gt;\u2026&lt;/div&gt;</code> which no longer has any effect and should be removed.</p> <p>If you're using the preview feature for WYSIWYG-powered input fields, you need to alter the preview button include instruction:</p> <pre><code>{include file='messageFormPreviewButton' previewMessageObjectType='com.example.foo.bar' previewMessageObjectID=0}\n</code></pre> <p>The message object id should be non-zero when editing.</p>"},{"location":"migration/wcf21/templates/#icons","title":"Icons","text":"<p>The old <code>.icon-&lt;iconName&gt;</code> classes have been removed, you are required to use the official <code>.fa-&lt;iconName&gt;</code> class names from FontAwesome. This does not affect the generic classes <code>.icon</code> (indicates an icon) and <code>.icon&lt;size&gt;</code> (e.g. <code>.icon16</code> that sets the dimensions), these are still required and have not been deprecated.</p> <p>Before:</p> <pre><code>&lt;span class=\"icon icon16 icon-list\"&gt;\n</code></pre> <p>Now:</p> <pre><code>&lt;span class=\"icon icon16 fa-list\"&gt;\n</code></pre>"},{"location":"migration/wcf21/templates/#changed-icon-names","title":"Changed Icon Names","text":"<p>Quite a few icon names have been renamed, the official wiki lists the new icon names in FontAwesome 4.</p>"},{"location":"migration/wcf21/templates/#changed-classes","title":"Changed Classes","text":"<ul> <li><code>.dataList</code> has been replaced and should now read <code>&lt;ol class=\"inlineList commaSeparated\"&gt;</code> (same applies to <code>&lt;ul&gt;</code>)</li> <li><code>.framedIconList</code> has been changed into <code>.userAvatarList</code></li> </ul>"},{"location":"migration/wcf21/templates/#removed-elements-and-classes","title":"Removed Elements and Classes","text":"<ul> <li><code>&lt;nav class=\"jsClipboardEditor\"&gt;</code> and <code>&lt;div class=\"jsClipboardContainer\"&gt;</code> have been replaced with a floating button.</li> <li>The anchors <code>a.toTopLink</code> have been replaced with a floating button.</li> <li>Avatars should no longer receive the class <code>framed</code></li> <li>The <code>dl.condensed</code> class, as seen in the editor tab menu, is no longer required.</li> <li>Anything related to <code>sidebarCollapsed</code> has been removed as sidebars are no longer collapsible.</li> </ul>"},{"location":"migration/wcf21/templates/#simple-example","title":"Simple Example","text":"<p>The code below includes only the absolute minimum required to display a page, the content title is already included in the output.</p> <pre><code>{include file='header'}\n\n&lt;div class=\"section\"&gt;\n    Hello World!\n&lt;/div&gt;\n\n{include file='footer'}\n</code></pre>"},{"location":"migration/wcf21/templates/#full-example","title":"Full Example","text":"<pre><code>{*\n    The page title is automatically set using the page definition, avoid setting it if you can!\n    If you really need to modify the title, you can still reference the original title with:\n    {$__wcf-&gt;getActivePage()-&gt;getTitle()}\n*}\n{capture assign='pageTitle'}Custom Page Title{/capture}\n\n{*\n    NOTICE: The content header goes here, see the section after this to learn more.\n*}\n\n{* you must not use `headContent` for JavaScript *}\n{capture assign='headContent'}\n    &lt;link rel=\"alternate\" type=\"application/rss+xml\" title=\"{lang}wcf.global.button.rss{/lang}\" href=\"\u2026\"&gt;\n{/capture}\n\n{* optional, content will be added to the top of the left sidebar *}\n{capture assign='sidebarLeft'}\n    \u2026\n\n{event name='boxes'}\n{/capture}\n\n{* optional, content will be added to the top of the right sidebar *}\n{capture assign='sidebarRight'}\n    \u2026\n\n{event name='boxes'}\n{/capture}\n\n{capture assign='headerNavigation'}\n    &lt;li&gt;&lt;a href=\"#\" title=\"Custom Button\" class=\"jsTooltip\"&gt;&lt;span class=\"icon icon16 fa-check\"&gt;&lt;/span&gt; &lt;span class=\"invisible\"&gt;Custom Button&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;\n{/capture}\n\n{include file='header'}\n\n{hascontent}\n    &lt;div class=\"paginationTop\"&gt;\n{content}\n{pages \u2026}\n{/content}\n    &lt;/div&gt;\n{/hascontent}\n\n{* the actual content *}\n&lt;div class=\"section\"&gt;\n    \u2026\n&lt;/div&gt;\n\n&lt;footer class=\"contentFooter\"&gt;\n{* skip this if you're not using any pagination *}\n{hascontent}\n        &lt;div class=\"paginationBottom\"&gt;\n{content}{@$pagesLinks}{/content}\n        &lt;/div&gt;\n{/hascontent}\n\n    &lt;nav class=\"contentFooterNavigation\"&gt;\n        &lt;ul&gt;\n            &lt;li&gt;&lt;a href=\"\u2026\" class=\"button\"&gt;&lt;span class=\"icon icon16 fa-plus\"&gt;&lt;/span&gt; &lt;span&gt;Custom Button&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;\n{event name='contentFooterNavigation'}\n        &lt;/ul&gt;\n    &lt;/nav&gt;\n&lt;/footer&gt;\n\n&lt;script data-relocate=\"true\"&gt;\n    /* any JavaScript code you need */\n&lt;/script&gt;\n\n{* do not include `&lt;/body&gt;&lt;/html&gt;` here, the footer template is the last bit of code! *}\n{include file='footer'}\n</code></pre>"},{"location":"migration/wcf21/templates/#content-header","title":"Content Header","text":"<p>There are two different methods to set the content header, one sets only the actual values, but leaves the outer HTML untouched, that is generated by the <code>header</code> template. This is the recommended approach and you should avoid using the alternative method whenever possible.</p>"},{"location":"migration/wcf21/templates/#recommended-approach","title":"Recommended Approach","text":"<pre><code>{* This is automatically set using the page data and should not be set manually! *}\n{capture assign='contentTitle'}Custom Content Title{/capture}\n\n{capture assign='contentDescription'}Optional description that is displayed right after the title.{/capture}\n\n{capture assign='contentHeaderNavigation'}List of navigation buttons displayed right next to the title.{/capture}\n</code></pre>"},{"location":"migration/wcf21/templates/#alternative","title":"Alternative","text":"<pre><code>{capture assign='contentHeader'}\n    &lt;header class=\"contentHeader\"&gt;\n        &lt;div class=\"contentHeaderTitle\"&gt;\n            &lt;h1 class=\"contentTitle\"&gt;Custom Content Title&lt;/h1&gt;\n            &lt;p class=\"contentHeaderDescription\"&gt;Custom Content Description&lt;/p&gt;\n        &lt;/div&gt;\n\n        &lt;nav class=\"contentHeaderNavigation\"&gt;\n            &lt;ul&gt;\n                &lt;li&gt;&lt;a href=\"{link controller='CustomController'}{/link}\" class=\"button\"&gt;&lt;span class=\"icon icon16 fa-plus\"&gt;&lt;/span&gt; &lt;span&gt;Custom Button&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;\n{event name='contentHeaderNavigation'}\n            &lt;/ul&gt;\n        &lt;/nav&gt;\n    &lt;/header&gt;\n{/capture}\n</code></pre>"},{"location":"migration/wsc30/css/","title":"Migrating from WSC 3.0 - CSS","text":""},{"location":"migration/wsc30/css/#new-style-variables","title":"New Style Variables","text":"<p>The new style variables are only applied to styles that have the compatibility set to WSC 3.1</p>"},{"location":"migration/wsc30/css/#wcfcontentcontainer","title":"wcfContentContainer","text":"<p>The page content is encapsulated in a new container that wraps around the inner content, but excludes the sidebars, header and page navigation elements.</p> <ul> <li><code>$wcfContentContainerBackground</code> - background color</li> <li><code>$wcfContentContainerBorder</code> - border color</li> </ul>"},{"location":"migration/wsc30/css/#wcfeditorbutton","title":"wcfEditorButton","text":"<p>These variables control the appearance of the editor toolbar and its buttons.</p> <ul> <li><code>$wcfEditorButtonBackground</code> - button and toolbar background color</li> <li><code>$wcfEditorButtonBackgroundActive</code> - active button background color</li> <li><code>$wcfEditorButtonText</code> - text color for available buttons</li> <li><code>$wcfEditorButtonTextActive</code> - text color for active buttons</li> <li><code>$wcfEditorButtonTextDisabled</code> - text color for disabled buttons</li> </ul>"},{"location":"migration/wsc30/css/#color-variables-in-alertscss","title":"Color Variables in <code>alert.scss</code>","text":"<p>The color values for <code>&lt;small class=\"innerError\"&gt;</code> used to be hardcoded values, but have now been changed to use the values for error messages (<code>wcfStatusError*</code>) instead.</p>"},{"location":"migration/wsc30/javascript/","title":"Migrating from WSC 3.0 - JavaScript","text":""},{"location":"migration/wsc30/javascript/#accelerated-guest-view-tiny-builds","title":"Accelerated Guest View / Tiny Builds","text":"<p>The new tiny builds are highly optimized variants of existing JavaScript files and modules, aiming for significant performance improvements for guests and search engines alike. This is accomplished by heavily restricting page interaction to read-only actions whenever possible, which in return removes the need to provide certain JavaScript modules in general.</p> <p>For example, disallowing guests to write any formatted messages will in return remove the need to provide the WYSIWYG editor at all. But it doesn't stop there, there are a lot of other modules that provide additional features for the editor, and by excluding the editor, we can also exclude these modules too.</p> <p>Long story short, the tiny mode guarantees that certain actions will never be carried out by guests or search engines, therefore some modules are not going to be needed by them ever.</p>"},{"location":"migration/wsc30/javascript/#code-templates-for-tiny-builds","title":"Code Templates for Tiny Builds","text":"<p>The following examples assume that you use the virtual constant <code>COMPILER_TARGET_DEFAULT</code> as a switch for the optimized code path. This is also the constant used by the official build scripts for JavaScript files.</p> <p>We recommend that you provide a mock implementation for existing code to ensure 3rd party compatibility. It is enough to provide a bare object or class that exposes the original properties using the same primitive data types. This is intended to provide a soft-fail for implementations that are not aware of the tiny mode yet, but is not required for classes that did not exist until now.</p>"},{"location":"migration/wsc30/javascript/#legacy-javascript","title":"Legacy JavaScript","text":"<pre><code>if (COMPILER_TARGET_DEFAULT) {\nWCF.Example.Foo = {\nmakeSnafucated: function() {\nreturn \"Hello World\";\n}\n};\n\nWCF.Example.Bar = Class.extend({\nfoobar: \"baz\",\n\nfoo: function($bar) {\nreturn $bar + this.foobar;\n}\n});\n}\nelse {\nWCF.Example.Foo = {\nmakeSnafucated: function() {}\n};\n\nWCF.Example.Bar = Class.extend({\nfoobar: \"\",\nfoo: function() {}\n});\n}\n</code></pre>"},{"location":"migration/wsc30/javascript/#requirejs-modules","title":"require.js Modules","text":"<pre><code>define([\"some\", \"fancy\", \"dependencies\"], function(Some, Fancy, Dependencies) {\n\"use strict\";\n\nif (!COMPILER_TARGET_DEFAULT) {\nvar Fake = function() {};\nFake.prototype = {\ninit: function() {},\nmakeSnafucated: function() {}\n};\nreturn Fake;\n}\n\nfunction MyAwesomeClass(niceArgument) { this.init(niceArgument); }\nMyAwesomeClass.prototype = {\ninit: function(niceArgument) {\nif (niceArgument) {\nthis.makeSnafucated();\n}\n},\n\nmakeSnafucated: function() {\nconsole.log(\"Hello World\");\n}\n}\n\nreturn MyAwesomeClass;\n});\n</code></pre>"},{"location":"migration/wsc30/javascript/#including-tinified-builds-through-js","title":"Including tinified builds through <code>{js}</code>","text":"<p>The <code>{js}</code> template-plugin has been updated to include support for tiny builds controlled through the optional flag <code>hasTiny=true</code>:</p> <pre><code>{js application='wcf' file='WCF.Example' hasTiny=true}\n</code></pre> <p>This line generates a different output depending on the debug mode and the user login-state.</p>"},{"location":"migration/wsc30/javascript/#real-error-messages-for-ajax-responses","title":"Real Error Messages for AJAX Responses","text":"<p>The <code>errorMessage</code> property in the returned response object for failed AJAX requests contained an exception-specific but still highly generic error message. This issue has been around for quite a long time and countless of implementations are relying on this false behavior, eventually forcing us to leave the value unchanged.</p> <p>This problem is solved by adding the new property <code>realErrorMessage</code> that exposes the message exactly as it was provided and now matches the value that would be displayed to users in traditional forms.</p>"},{"location":"migration/wsc30/javascript/#example-code","title":"Example Code","text":"<pre><code>define(['Ajax'], function(Ajax) {\nreturn {\n// ...\n_ajaxFailure: function(responseData, responseText, xhr, requestData) {\nconsole.log(responseData.realErrorMessage);\n}\n// ...\n};\n});\n</code></pre>"},{"location":"migration/wsc30/javascript/#simplified-form-submit-in-dialogs","title":"Simplified Form Submit in Dialogs","text":"<p>Forms embedded in dialogs often do not contain the HTML <code>&lt;form&gt;</code>-element and instead rely on JavaScript click- and key-handlers to emulate a <code>&lt;form&gt;</code>-like submit behavior. This has spawned a great amount of nearly identical implementations that all aim to handle the form submit through the <code>Enter</code>-key, still leaving some dialogs behind.</p> <p>WoltLab Suite 3.1 offers automatic form submit that is enabled through a set of specific conditions and data attributes:</p> <ol> <li>There must be a submit button that matches the selector <code>.formSubmit &gt; input[type=\"submit\"], .formSubmit &gt; button[data-type=\"submit\"]</code>.</li> <li>The dialog object provided to <code>UiDialog.open()</code> implements the method <code>_dialogSubmit()</code>.</li> <li>Input fields require the attribute <code>data-dialog-submit-on-enter=\"true\"</code> to be set, the <code>type</code> must be one of <code>number</code>, <code>password</code>, <code>search</code>, <code>tel</code>, <code>text</code> or <code>url</code>.</li> </ol> <p>Clicking on the submit button or pressing the <code>Enter</code>-key in any watched input field will start the submit process. This is done automatically and does not require a manual interaction in your code, therefore you should not bind any click listeners on the submit button yourself.</p> <p>Any input field with the <code>required</code> attribute set will be validated to contain a non-empty string after processing the value with <code>String.prototype.trim()</code>. An empty field will abort the submit process and display a visible error message next to the offending field.</p>"},{"location":"migration/wsc30/javascript/#helper-function-for-inline-error-messages","title":"Helper Function for Inline Error Messages","text":"<p>Displaying inline error messages on-the-fly required quite a few DOM operations that were quite simple but also super repetitive and thus error-prone when incorrectly copied over. The global helper function <code>elInnerError()</code> was added to provide a simple and consistent behavior of inline error messages.</p> <p>You can display an error message by invoking <code>elInnerError(elementRef, \"Your Error Message\")</code>, it will insert a new <code>&lt;small class=\"innerError\"&gt;</code> and sets the given message. If there is already an inner error present, then the message will be replaced instead.</p> <p>Hiding messages is done by setting the 2nd parameter to <code>false</code> or an empty string:</p> <ul> <li><code>elInnerError(elementRef, false)</code></li> <li><code>elInnerError(elementRef, '')</code></li> </ul> <p>The special values <code>null</code> and <code>undefined</code> are supported too, but their usage is discouraged, because they make it harder to understand the intention by reading the code:</p> <ul> <li><code>elInnerError(elementRef, null)</code></li> <li><code>elInnerError(elementRef)</code></li> </ul>"},{"location":"migration/wsc30/javascript/#example-code_1","title":"Example Code","text":"<pre><code>require(['Language'], function(Language)) {\nvar input = elBySel('input[type=\"text\"]');\nif (input.value.trim() === '') {\n// displays a new inline error or replaces the message if there is one already\nelInnerError(input, Language.get('wcf.global.form.error.empty'));\n}\nelse {\n// removes the inline error if it exists\nelInnerError(input, false);\n}\n\n// the above condition is equivalent to this:\nelInnerError(input, (input.value.trim() === '' ? Language.get('wcf.global.form.error.empty') : false));\n}\n</code></pre>"},{"location":"migration/wsc30/package/","title":"Migrating from WSC 3.0 - Package Components","text":""},{"location":"migration/wsc30/package/#cronjob-scheduler-uses-server-timezone","title":"Cronjob Scheduler uses Server Timezone","text":"<p>The execution time of cronjobs was previously calculated based on the coordinated universal time (UTC). This was changed in WoltLab Suite 3.1 to use the server timezone or, to be precise, the default timezone set in the administration control panel.</p>"},{"location":"migration/wsc30/package/#exclude-pages-from-becoming-a-landing-page","title":"Exclude Pages from becoming a Landing Page","text":"<p>Some pages do not qualify as landing page, because they're designed around specific expectations that aren't matched in all cases. Examples include the user control panel and its sub-pages that cannot be accessed by guests and will therefore break the landing page for those. While it is somewhat to be expected from control panel pages, there are enough pages that fall under the same restrictions, but aren't easily recognized as such by an administrator.</p> <p>You can exclude these pages by adding <code>&lt;excludeFromLandingPage&gt;1&lt;/excludeFromLandingPage&gt;</code> (case-sensitive) to the relevant pages in your <code>page.xml</code>.</p>"},{"location":"migration/wsc30/package/#example-code","title":"Example Code","text":"<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;data xmlns=\"http://www.woltlab.com\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.woltlab.com http://www.woltlab.com/XSD/tornado/page.xsd\"&gt;\n&lt;import&gt;\n&lt;page identifier=\"com.example.foo.Bar\"&gt;\n&lt;!-- ... --&gt;\n&lt;excludeFromLandingPage&gt;1&lt;/excludeFromLandingPage&gt;\n&lt;!-- ... --&gt;\n&lt;/page&gt;\n&lt;/import&gt;\n&lt;/data&gt;\n</code></pre>"},{"location":"migration/wsc30/package/#new-package-installation-plugin-for-media-providers","title":"New Package Installation Plugin for Media Providers","text":"<p>Please refer to the documentation of the <code>mediaProvider.xml</code> to learn more.</p>"},{"location":"migration/wsc30/package/#limited-forward-compatibility-for-plugins","title":"Limited Forward-Compatibility for Plugins","text":"<p>Please refer to the documentation of the <code>&lt;compatibility&gt;</code> tag in the <code>package.xml</code>.</p>"},{"location":"migration/wsc30/php/","title":"Migrating from WSC 3.0 - PHP","text":""},{"location":"migration/wsc30/php/#approval-system-for-comments","title":"Approval-System for Comments","text":"<p>Comments can now be set to require approval by a moderator before being published. This feature is disabled by default if you do not provide a permission in the manager class, enabling it requires a new permission that has to be provided in a special property of your manage implementation.</p> files/lib/system/comment/manager/ExampleCommentManager.class.php<pre><code>&lt;?php\nclass ExampleCommentManager extends AbstractCommentManager {\n  protected $permissionAddWithoutModeration = 'foo.bar.example.canAddCommentWithoutModeration';\n}\n</code></pre>"},{"location":"migration/wsc30/php/#raw-html-in-user-activity-events","title":"Raw HTML in User Activity Events","text":"<p>User activity events were previously encapsulated inside <code>&lt;div class=\"htmlContent\"&gt;\u2026&lt;/div&gt;</code>, with impacts on native elements such as lists. You can now disable the class usage by defining your event as raw HTML:</p> files/lib/system/user/activity/event/ExampleUserActivityEvent.class.php<pre><code>&lt;?php\nclass ExampleUserActivityEvent {\n  // enables raw HTML for output, defaults to `false`\n  protected $isRawHtml = true;\n}\n</code></pre>"},{"location":"migration/wsc30/php/#permission-to-view-likes-of-an-object","title":"Permission to View Likes of an Object","text":"<p>Being able to view the like summary of an object was restricted to users that were able to like the object itself. This creates situations where the object type in general is likable, but the particular object cannot be liked by the current users, while also denying them to view the like summary (but it gets partly exposed through the footer note/summary!).</p> <p>Implement the interface <code>\\wcf\\data\\like\\IRestrictedLikeObjectTypeProvider</code> in your object provider to add support for this new permission check.</p> files/lib/data/example/LikeableExampleProvider.class.php<pre><code>&lt;?php\nclass LikeableExampleProvider extends ExampleProvider implements IRestrictedLikeObjectTypeProvider, IViewableLikeProvider {\n  public function canViewLikes(ILikeObject $object) {\n    // perform your permission checks here\n    return true;\n  }\n}\n</code></pre>"},{"location":"migration/wsc30/php/#developer-tools-sync-feature","title":"Developer Tools: Sync Feature","text":"<p>The synchronization feature of the newly added developer tools works by invoking a package installation plugin (PIP) outside of a regular installation, while simulating the basic environment that is already exposed by the API.</p> <p>However, not all PIPs qualify for this kind of execution, especially because it could be invoked multiple times in a row by the user. This is solved by requiring a special marking for PIPs that have no side-effects (= idempotent) when invoked any amount of times with the same arguments.</p> <p>There's another feature that allows all matching PIPs to be executed in a row using a single button click. In order to solve dependencies on other PIPs, any implementing PIP must also provide the method <code>getSyncDependencies()</code> that returns the dependent PIPs in an arbitrary order.</p> files/lib/data/package/plugin/ExamplePackageInstallationPlugin.class.php<pre><code>&lt;?php\nclass ExamplePackageInstallationPlugin extends AbstractXMLPackageInstallationPlugin implements IIdempotentPackageInstallationPlugin {\n  public static function getSyncDependencies() {\n    // provide a list of dependent PIPs in arbitrary order\n    return [];\n  }\n}\n</code></pre>"},{"location":"migration/wsc30/php/#media-providers","title":"Media Providers","text":"<p>Media providers were added through regular SQL queries in earlier versions, but this is neither convenient, nor did it offer a reliable method to update an existing provider. WoltLab Suite 3.1 adds a new <code>mediaProvider</code>-PIP that also offers a <code>className</code> parameter to off-load the result evaluation and HTML generation.</p>"},{"location":"migration/wsc30/php/#example-implementation","title":"Example Implementation","text":"mediaProvider.xml <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;data xmlns=\"http://www.woltlab.com\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.woltlab.com http://www.woltlab.com/XSD/tornado/mediaProvider.xsd\"&gt;\n&lt;import&gt;\n&lt;provider name=\"example\"&gt;\n&lt;title&gt;Example Provider&lt;/title&gt;\n&lt;regex&gt;https?://example.com/watch?v=(?P&lt;ID&gt;[a-zA-Z0-9])&lt;/regex&gt;\n&lt;className&gt;wcf\\system\\bbcode\\media\\provider\\ExampleBBCodeMediaProvider&lt;/className&gt;\n&lt;/provider&gt;\n&lt;/import&gt;\n&lt;/data&gt;\n</code></pre>"},{"location":"migration/wsc30/php/#php-callback","title":"PHP Callback","text":"<p>The full match is provided for <code>$url</code>, while any capture groups from the regular expression are assigned to <code>$matches</code>.</p> <pre><code>&lt;?php\nclass ExampleBBCodeMediaProvider implements IBBCodeMediaProvider {\n  public function parse($url, array $matches = []) {\n    return \"final HTML output\";\n  }\n}\n</code></pre>"},{"location":"migration/wsc30/php/#re-evaluate-html-messages","title":"Re-Evaluate HTML Messages","text":"<p>You need to manually set the disallowed bbcodes in order to avoid unintentional bbcode evaluation. Please see this commit for a reference implementation inside worker processes.</p> <p>The HtmlInputProcessor only supported two ways to handle an existing HTML message:</p> <ol> <li>Load the string through <code>process()</code> and run it through the validation and sanitation process, both of them are rather expensive operations and do not qualify for rebuild data workers.</li> <li>Detect embedded content using <code>processEmbeddedContent()</code> which bypasses most tasks that are carried out by <code>process()</code> which aren't required, but does not allow a modification of the message.</li> </ol> <p>The newly added method <code>reprocess($message, $objectType, $objectID)</code> solves this short-coming by offering a full bbcode and text re-evaluation while bypassing any input filters, assuming that the input HTML was already filtered previously.</p>"},{"location":"migration/wsc30/php/#example-usage","title":"Example Usage","text":"<pre><code>&lt;?php\n// rebuild data workers tend to contain code similar to this:\nforeach ($this-&gt;objectList as $message) {\n // ...\n if (!$message-&gt;enableHtml) {\n   // ...\n }\n else {\n   // OLD:\n   $this-&gt;getHtmlInputProcessor()-&gt;processEmbeddedContent($message-&gt;message, 'com.example.foo.message', $message-&gt;messageID);\n\n   // REPLACE WITH:\n   $this-&gt;getHtmlInputProcessor()-&gt;reprocess($message-&gt;message, 'com.example.foo.message', $message-&gt;messageID);\n   $data['message'] = $this-&gt;getHtmlInputProcessor()-&gt;getHtml();\n }\n // ...\n}\n</code></pre>"},{"location":"migration/wsc30/templates/","title":"Migrating from WSC 3.0 - Templates","text":""},{"location":"migration/wsc30/templates/#comment-system-overhaul","title":"Comment-System Overhaul","text":"<p>Unfortunately, there has been a breaking change related to the creation of comments. You need to apply the changes below before being able to create new comments.</p>"},{"location":"migration/wsc30/templates/#adding-comments","title":"Adding Comments","text":"<p>Existing implementations need to include a new template right before including the generic <code>commentList</code> template.</p> <pre><code>&lt;ul id=\"exampleCommentList\" class=\"commentList containerList\" data-...&gt;\n  {include file='commentListAddComment' wysiwygSelector='exampleCommentListAddComment'}\n  {include file='commentList'}\n&lt;/ul&gt;\n</code></pre>"},{"location":"migration/wsc30/templates/#redesigned-acp-user-list","title":"Redesigned ACP User List","text":"<p>Custom interaction buttons were previously added through the template event <code>rowButtons</code> and were merely a link-like element with an icon inside. This is still valid and supported for backwards-compatibility, but it is recommend to adapt to the new drop-down-style options using the new template event <code>dropdownItems</code>.</p> <pre><code>&lt;!-- button for usage with the `rowButtons` event --&gt;\n&lt;span class=\"icon icon16 fa-list jsTooltip\" title=\"Button Title\"&gt;&lt;/span&gt;\n\n&lt;!-- new drop-down item for the `dropdownItems` event --&gt;\n&lt;li&gt;&lt;a href=\"#\" class=\"jsMyButton\"&gt;Button Title&lt;/a&gt;&lt;/li&gt;\n</code></pre>"},{"location":"migration/wsc30/templates/#sidebar-toogle-buttons-on-mobile-device","title":"Sidebar Toogle-Buttons on Mobile Device","text":"<p>You cannot override the button label for sidebars containing navigation menus.</p> <p>The page sidebars are automatically collapsed and presented as one or, when both sidebar are present, two condensed buttons. They use generic sidebar-related labels when open or closed, with the exception of embedded menus which will change the button label to read \"Show/Hide Navigation\".</p> <p>You can provide a custom label before including the sidebars by assigning the new labels to a few special variables:</p> <pre><code>{assign var='__sidebarLeftShow' value='Show Left Sidebar'}\n{assign var='__sidebarLeftHide' value='Hide Left Sidebar'}\n{assign var='__sidebarRightShow' value='Show Right Sidebar'}\n{assign var='__sidebarRightHide' value='Hide Right Sidebar'}\n</code></pre>"},{"location":"migration/wsc31/form-builder/","title":"Migrating from WSC 3.1 - Form Builder","text":""},{"location":"migration/wsc31/form-builder/#example-two-text-form-fields","title":"Example: Two Text Form Fields","text":"<p>As the first example, the pre-WoltLab Suite Core 5.2 versions of the forms to add and edit persons from the first part of the tutorial series will be updated to the new form builder API. This form is the perfect first examples as it is very simple with only two text fields whose only restriction is that they have to be filled out and that their values may not be longer than 255 characters each.</p> <p>As a reminder, here are the two relevant PHP files and the relevant template file:</p> files/lib/acp/form/PersonAddForm.class.php <pre><code>&lt;?php\nnamespace wcf\\acp\\form;\nuse wcf\\data\\person\\PersonAction;\nuse wcf\\form\\AbstractForm;\nuse wcf\\system\\exception\\UserInputException;\nuse wcf\\system\\WCF;\nuse wcf\\util\\StringUtil;\n\n/**\n * Shows the form to create a new person.\n * \n * @author  Matthias Schmidt\n * @copyright   2001-2019 WoltLab GmbH\n * @license GNU Lesser General Public License &lt;http://opensource.org/licenses/lgpl-license.php&gt;\n * @package WoltLabSuite\\Core\\Acp\\Form\n */\nclass PersonAddForm extends AbstractForm {\n    /**\n     * @inheritDoc\n     */\n    public $activeMenuItem = 'wcf.acp.menu.link.person.add';\n\n    /**\n     * first name of the person\n     * @var string\n     */\n    public $firstName = '';\n\n    /**\n     * last name of the person\n     * @var string\n     */\n    public $lastName = '';\n\n    /**\n     * @inheritDoc\n     */\n    public $neededPermissions = ['admin.content.canManagePeople'];\n\n    /**\n     * @inheritDoc\n     */\n    public function assignVariables() {\n        parent::assignVariables();\n\n        WCF::getTPL()-&gt;assign([\n            'action' =&gt; 'add',\n            'firstName' =&gt; $this-&gt;firstName,\n            'lastName' =&gt; $this-&gt;lastName\n        ]);\n    }\n\n    /**\n     * @inheritDoc\n     */\n    public function readFormParameters() {\n        parent::readFormParameters();\n\n        if (isset($_POST['firstName'])) $this-&gt;firstName = StringUtil::trim($_POST['firstName']);\n        if (isset($_POST['lastName'])) $this-&gt;lastName = StringUtil::trim($_POST['lastName']);\n    }\n\n    /**\n     * @inheritDoc\n     */\n    public function save() {\n        parent::save();\n\n        $this-&gt;objectAction = new PersonAction([], 'create', [\n            'data' =&gt; array_merge($this-&gt;additionalFields, [\n                'firstName' =&gt; $this-&gt;firstName,\n                'lastName' =&gt; $this-&gt;lastName\n            ])\n        ]);\n        $this-&gt;objectAction-&gt;executeAction();\n\n        $this-&gt;saved();\n\n        // reset values\n        $this-&gt;firstName = '';\n        $this-&gt;lastName = '';\n\n        // show success message\n        WCF::getTPL()-&gt;assign('success', true);\n    }\n\n    /**\n     * @inheritDoc\n     */\n    public function validate() {\n        parent::validate();\n\n        // validate first name\n        if (empty($this-&gt;firstName)) {\n            throw new UserInputException('firstName');\n        }\n        if (mb_strlen($this-&gt;firstName) &gt; 255) {\n            throw new UserInputException('firstName', 'tooLong');\n        }\n\n        // validate last name\n        if (empty($this-&gt;lastName)) {\n            throw new UserInputException('lastName');\n        }\n        if (mb_strlen($this-&gt;lastName) &gt; 255) {\n            throw new UserInputException('lastName', 'tooLong');\n        }\n    }\n}\n</code></pre> files/lib/acp/form/PersonEditForm.class.php <pre><code>&lt;?php\nnamespace wcf\\acp\\form;\nuse wcf\\data\\person\\Person;\nuse wcf\\data\\person\\PersonAction;\nuse wcf\\form\\AbstractForm;\nuse wcf\\system\\exception\\IllegalLinkException;\nuse wcf\\system\\WCF;\n\n/**\n * Shows the form to edit an existing person.\n * \n * @author  Matthias Schmidt\n * @copyright   2001-2019 WoltLab GmbH\n * @license GNU Lesser General Public License &lt;http://opensource.org/licenses/lgpl-license.php&gt;\n * @package WoltLabSuite\\Core\\Acp\\Form\n */\nclass PersonEditForm extends PersonAddForm {\n    /**\n     * @inheritDoc\n     */\n    public $activeMenuItem = 'wcf.acp.menu.link.person';\n\n    /**\n     * edited person object\n     * @var Person\n     */\n    public $person = null;\n\n    /**\n     * id of the edited person\n     * @var integer\n     */\n    public $personID = 0;\n\n    /**\n     * @inheritDoc\n     */\n    public function assignVariables() {\n        parent::assignVariables();\n\n        WCF::getTPL()-&gt;assign([\n            'action' =&gt; 'edit',\n            'person' =&gt; $this-&gt;person\n        ]);\n    }\n\n    /**\n     * @inheritDoc\n     */\n    public function readData() {\n        parent::readData();\n\n        if (empty($_POST)) {\n            $this-&gt;firstName = $this-&gt;person-&gt;firstName;\n            $this-&gt;lastName = $this-&gt;person-&gt;lastName;\n        }\n    }\n\n    /**\n     * @inheritDoc\n     */\n    public function readParameters() {\n        parent::readParameters();\n\n        if (isset($_REQUEST['id'])) $this-&gt;personID = intval($_REQUEST['id']);\n        $this-&gt;person = new Person($this-&gt;personID);\n        if (!$this-&gt;person-&gt;personID) {\n            throw new IllegalLinkException();\n        }\n    }\n\n    /**\n     * @inheritDoc\n     */\n    public function save() {\n        AbstractForm::save();\n\n        $this-&gt;objectAction = new PersonAction([$this-&gt;person], 'update', [\n            'data' =&gt; array_merge($this-&gt;additionalFields, [\n                'firstName' =&gt; $this-&gt;firstName,\n                'lastName' =&gt; $this-&gt;lastName\n            ])\n        ]);\n        $this-&gt;objectAction-&gt;executeAction();\n\n        $this-&gt;saved();\n\n        // show success message\n        WCF::getTPL()-&gt;assign('success', true);\n    }\n}\n</code></pre> acptemplates/personAdd.tpl <pre><code>{include file='header' pageTitle='wcf.acp.person.'|concat:$action}\n\n&lt;header class=\"contentHeader\"&gt;\n    &lt;div class=\"contentHeaderTitle\"&gt;\n        &lt;h1 class=\"contentTitle\"&gt;{lang}wcf.acp.person.{$action}{/lang}&lt;/h1&gt;\n    &lt;/div&gt;\n\n    &lt;nav class=\"contentHeaderNavigation\"&gt;\n        &lt;ul&gt;\n            &lt;li&gt;&lt;a href=\"{link controller='PersonList'}{/link}\" class=\"button\"&gt;&lt;span class=\"icon icon16 fa-list\"&gt;&lt;/span&gt; &lt;span&gt;{lang}wcf.acp.menu.link.person.list{/lang}&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;\n\n{event name='contentHeaderNavigation'}\n        &lt;/ul&gt;\n    &lt;/nav&gt;\n&lt;/header&gt;\n\n{include file='formError'}\n\n{if $success|isset}\n    &lt;p class=\"success\"&gt;{lang}wcf.global.success.{$action}{/lang}&lt;/p&gt;\n{/if}\n\n&lt;form method=\"post\" action=\"{if $action == 'add'}{link controller='PersonAdd'}{/link}{else}{link controller='PersonEdit' object=$person}{/link}{/if}\"&gt;\n    &lt;div class=\"section\"&gt;\n        &lt;dl{if $errorField == 'firstName'} class=\"formError\"{/if}&gt;\n            &lt;dt&gt;&lt;label for=\"firstName\"&gt;{lang}wcf.person.firstName{/lang}&lt;/label&gt;&lt;/dt&gt;\n            &lt;dd&gt;\n                &lt;input type=\"text\" id=\"firstName\" name=\"firstName\" value=\"{$firstName}\" required autofocus maxlength=\"255\" class=\"long\"&gt;\n{if $errorField == 'firstName'}\n                    &lt;small class=\"innerError\"&gt;\n{if $errorType == 'empty'}\n{lang}wcf.global.form.error.empty{/lang}\n{else}\n{lang}wcf.acp.person.firstName.error.{$errorType}{/lang}\n{/if}\n                    &lt;/small&gt;\n{/if}\n            &lt;/dd&gt;\n        &lt;/dl&gt;\n\n        &lt;dl{if $errorField == 'lastName'} class=\"formError\"{/if}&gt;\n            &lt;dt&gt;&lt;label for=\"lastName\"&gt;{lang}wcf.person.lastName{/lang}&lt;/label&gt;&lt;/dt&gt;\n            &lt;dd&gt;\n                &lt;input type=\"text\" id=\"lastName\" name=\"lastName\" value=\"{$lastName}\" required maxlength=\"255\" class=\"long\"&gt;\n{if $errorField == 'lastName'}\n                    &lt;small class=\"innerError\"&gt;\n{if $errorType == 'empty'}\n{lang}wcf.global.form.error.empty{/lang}\n{else}\n{lang}wcf.acp.person.lastName.error.{$errorType}{/lang}\n{/if}\n                    &lt;/small&gt;\n{/if}\n            &lt;/dd&gt;\n        &lt;/dl&gt;\n\n{event name='dataFields'}\n    &lt;/div&gt;\n\n{event name='sections'}\n\n    &lt;div class=\"formSubmit\"&gt;\n        &lt;input type=\"submit\" value=\"{lang}wcf.global.button.submit{/lang}\" accesskey=\"s\"&gt;\n{@SECURITY_TOKEN_INPUT_TAG}\n    &lt;/div&gt;\n&lt;/form&gt;\n\n{include file='footer'}\n</code></pre> <p>Updating the template is easy as the complete form is replace by a single line of code:</p> acptemplates/personAdd.tpl <pre><code>{include file='header' pageTitle='wcf.acp.person.'|concat:$action}\n\n&lt;header class=\"contentHeader\"&gt;\n    &lt;div class=\"contentHeaderTitle\"&gt;\n        &lt;h1 class=\"contentTitle\"&gt;{lang}wcf.acp.person.{$action}{/lang}&lt;/h1&gt;\n    &lt;/div&gt;\n\n    &lt;nav class=\"contentHeaderNavigation\"&gt;\n        &lt;ul&gt;\n            &lt;li&gt;&lt;a href=\"{link controller='PersonList'}{/link}\" class=\"button\"&gt;&lt;span class=\"icon icon16 fa-list\"&gt;&lt;/span&gt; &lt;span&gt;{lang}wcf.acp.menu.link.person.list{/lang}&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;\n\n{event name='contentHeaderNavigation'}\n        &lt;/ul&gt;\n    &lt;/nav&gt;\n&lt;/header&gt;\n\n{@$form-&gt;getHtml()}\n\n{include file='footer'}\n</code></pre> <p><code>PersonEditForm</code> also becomes much simpler: only the edited <code>Person</code> object must be read:</p> files/lib/acp/form/PersonEditForm.class.php <pre><code>&lt;?php\nnamespace wcf\\acp\\form;\nuse wcf\\data\\person\\Person;\nuse wcf\\system\\exception\\IllegalLinkException;\n\n/**\n * Shows the form to edit an existing person.\n * \n * @author  Matthias Schmidt\n * @copyright   2001-2019 WoltLab GmbH\n * @license GNU Lesser General Public License &lt;http://opensource.org/licenses/lgpl-license.php&gt;\n * @package WoltLabSuite\\Core\\Acp\\Form\n */\nclass PersonEditForm extends PersonAddForm {\n    /**\n     * @inheritDoc\n     */\n    public $activeMenuItem = 'wcf.acp.menu.link.person';\n\n    /**\n     * @inheritDoc\n     */\n    public function readParameters() {\n        parent::readParameters();\n\n        if (isset($_REQUEST['id'])) {\n            $this-&gt;formObject = new Person(intval($_REQUEST['id']));\n            if (!$this-&gt;formObject-&gt;personID) {\n                throw new IllegalLinkException();\n            }\n        }\n    }\n}\n</code></pre> <p>Most of the work is done in <code>PersonAddForm</code>:</p> files/lib/acp/form/PersonAddForm.class.php <pre><code>&lt;?php\nnamespace wcf\\acp\\form;\nuse wcf\\data\\person\\PersonAction;\nuse wcf\\form\\AbstractFormBuilderForm;\nuse wcf\\system\\form\\builder\\container\\FormContainer;\nuse wcf\\system\\form\\builder\\field\\TextFormField;\n\n/**\n * Shows the form to create a new person.\n * \n * @author  Matthias Schmidt\n * @copyright   2001-2019 WoltLab GmbH\n * @license GNU Lesser General Public License &lt;http://opensource.org/licenses/lgpl-license.php&gt;\n * @package WoltLabSuite\\Core\\Acp\\Form\n */\nclass PersonAddForm extends AbstractFormBuilderForm {\n    /**\n     * @inheritDoc\n     */\n    public $activeMenuItem = 'wcf.acp.menu.link.person.add';\n\n    /**\n     * @inheritDoc\n     */\n    public $formAction = 'create';\n\n    /**\n     * @inheritDoc\n     */\n    public $neededPermissions = ['admin.content.canManagePeople'];\n\n    /**\n     * @inheritDoc\n     */\n    public $objectActionClass = PersonAction::class;\n\n    /**\n     * @inheritDoc\n     */\n    protected function createForm() {\n        parent::createForm();\n\n        $dataContainer = FormContainer::create('data')\n            -&gt;appendChildren([\n                TextFormField::create('firstName')\n                    -&gt;label('wcf.person.firstName')\n                    -&gt;required()\n                    -&gt;maximumLength(255),\n\n                TextFormField::create('lastName')\n                    -&gt;label('wcf.person.lastName')\n                    -&gt;required()\n                    -&gt;maximumLength(255)\n            ]);\n\n        $this-&gt;form-&gt;appendChild($dataContainer);\n    }\n}\n</code></pre> <p>But, as you can see, the number of lines almost decreased by half. All changes are due to extending <code>AbstractFormBuilderForm</code>:</p> <ul> <li><code>$formAction</code> is added and set to <code>create</code> as the form is used to create a new person.   In the edit form, <code>$formAction</code> has not to be set explicitly as it is done automatically if a <code>$formObject</code> is set.</li> <li><code>$objectActionClass</code> is set to <code>PersonAction::class</code> and is the class name of the used <code>AbstractForm::$objectAction</code> object to create and update the <code>Person</code> object.</li> <li><code>AbstractFormBuilderForm::createForm()</code> is overridden and the form contents are added:   a form container representing the <code>div.section</code> element from the old version and the two form fields with the same ids and labels as before.   The contents of the old <code>validate()</code> method is put into two method calls:   <code>required()</code> to ensure that the form is filled out and <code>maximumLength(255)</code> to ensure that the names are not longer than 255 characters.</li> </ul>"},{"location":"migration/wsc31/like/","title":"Migrating from WSC 3.1 - Like System","text":""},{"location":"migration/wsc31/like/#introduction","title":"Introduction","text":"<p>With version 5.2 of WoltLab Suite Core the like system was completely replaced by the new reactions system. This makes it necessary to make some adjustments to existing code so that your plugin integrates completely into the new system. However, we have kept these adjustments as small as possible so that it is possible to use the reaction system with slight restrictions even without adjustments. </p>"},{"location":"migration/wsc31/like/#limitations-if-no-adjustments-are-made-to-the-existing-code","title":"Limitations if no adjustments are made to the existing code","text":"<p>If no adjustments are made to the existing code, the following functions are not available:  * Notifications about reactions/likes * Recent Activity Events for reactions/likes</p>"},{"location":"migration/wsc31/like/#migration","title":"Migration","text":""},{"location":"migration/wsc31/like/#notifications","title":"Notifications","text":""},{"location":"migration/wsc31/like/#mark-notification-as-compatible","title":"Mark notification as compatible","text":"<p>Since there are no more likes with the new version, it makes no sense to send notifications about it. Instead of notifications about likes, notifications about reactions are now sent. However, this only changes the notification text and not the notification itself. To update the notification, we first add the interface <code>\\wcf\\data\\reaction\\object\\IReactionObject</code> to the <code>\\wcf\\data\\like\\object\\ILikeObject</code> object (e.g. in WoltLab Suite Forum we added the interface to the class <code>\\wbb\\data\\post\\LikeablePost</code>). After that the object is marked as \"compatible with WoltLab Suite Core 5.2\" and notifications about reactions are sent again. </p>"},{"location":"migration/wsc31/like/#language-variables","title":"Language Variables","text":"<p>Next, to display all reactions for the current notification in the notification text, we include the trait <code>\\wcf\\system\\user\\notification\\event\\TReactionUserNotificationEvent</code> in the user notification event class (typically named like <code>*LikeUserNotificationEvent</code>). These trait provides a new function that reads out and groups the reactions. The result of this function must now only be passed to the language variable. The name \"reactions\" is typically used as the variable name for the language variable. </p> <p>As a final step, we only need to change the language variables themselves. To ensure a consistent usability, the same formulations should be used as in the WoltLab Suite Core. </p>"},{"location":"migration/wsc31/like/#english","title":"English","text":"<p><code>{prefix}.like.title</code> <pre><code>Reaction to a {objectName}\n</code></pre></p> <p><code>{prefix}.like.title.stacked</code></p> <pre><code>{#$count} users reacted to your {objectName}\n</code></pre> <p><code>{prefix}.like.message</code> <pre><code>{@$author-&gt;getAnchorTag()} reacted to your {objectName} ({implode from=$reactions key=reactionID item=count}{@$__wcf-&gt;getReactionHandler()-&gt;getReactionTypeByID($reactionID)-&gt;renderIcon()}\u00d7{#$count}{/implode}).\n</code></pre></p> <p><code>{prefix}.like.message.stacked</code></p> <pre><code>{if $count &lt; 4}{@$authors[0]-&gt;getAnchorTag()}{if $count == 2} and {else}, {/if}{@$authors[1]-&gt;getAnchorTag()}{if $count == 3} and {@$authors[2]-&gt;getAnchorTag()}{/if}{else}{@$authors[0]-&gt;getAnchorTag()} and {#$others} others{/if} reacted to your {objectName} ({implode from=$reactions key=reactionID item=count}{@$__wcf-&gt;getReactionHandler()-&gt;getReactionTypeByID($reactionID)-&gt;renderIcon()}\u00d7{#$count}{/implode}).\n</code></pre> <p><code>wcf.user.notification.{objectTypeName}.like.notification.like</code> <pre><code>Notify me when someone reacted to my {objectName}\n</code></pre></p>"},{"location":"migration/wsc31/like/#german","title":"German","text":"<p><code>{prefix}.like.title</code> <pre><code>Reaktion auf einen {objectName}\n</code></pre></p> <p><code>{prefix}.like.title.stacked</code></p> <pre><code>{#$count} Benutzern haben auf {if LANGUAGE_USE_INFORMAL_VARIANT}dein(en){else}Ihr(en){/if} {objectName} reagiert\n</code></pre> <p><code>{prefix}.like.message</code> <pre><code>{@$author-&gt;getAnchorTag()} hat auf {if LANGUAGE_USE_INFORMAL_VARIANT}dein(en){else}Ihr(en){/if} {objectName} reagiert ({implode from=$reactions key=reactionID item=count}{@$__wcf-&gt;getReactionHandler()-&gt;getReactionTypeByID($reactionID)-&gt;renderIcon()}\u00d7{#$count}{/implode}).\n</code></pre></p> <p><code>{prefix}.like.message.stacked</code></p> <pre><code>{if $count &lt; 4}{@$authors[0]-&gt;getAnchorTag()}{if $count == 2} und {else}, {/if}{@$authors[1]-&gt;getAnchorTag()}{if $count == 3} und {@$authors[2]-&gt;getAnchorTag()}{/if}{else}{@$authors[0]-&gt;getAnchorTag()} und {#$others} weitere{/if} haben auf {if LANGUAGE_USE_INFORMAL_VARIANT}dein(en){else}Ihr(en){/if} {objectName} reagiert ({implode from=$reactions key=reactionID item=count}{@$__wcf-&gt;getReactionHandler()-&gt;getReactionTypeByID($reactionID)-&gt;renderIcon()}\u00d7{#$count}{/implode}).\n</code></pre> <p><code>wcf.user.notification.{object_type_name}.like.notification.like</code> <pre><code>Jemandem hat auf {if LANGUAGE_USE_INFORMAL_VARIANT}dein(en){else}Ihr(en){/if} {objectName} reagiert\n</code></pre></p>"},{"location":"migration/wsc31/like/#recent-activity","title":"Recent Activity","text":"<p>To adjust entries in the Recent Activity, only three small steps are necessary. First we pass the concrete reaction to the language variable, so that we can use the reaction object there. To do this, we add the following variable to the text of the <code>\\wcf\\system\\user\\activity\\event\\IUserActivityEvent</code> object: <code>$event-&gt;reactionType</code>. Typically we name the variable <code>reactionType</code>. In the second step, we mark the event as compatible. Therefore we set the parameter <code>supportsReactions</code> in the <code>objectType.xml</code> to <code>1</code>. So for example the entry looks like this:</p> objectType.xml<pre><code>&lt;type&gt;\n&lt;name&gt;com.woltlab.example.likeableObject.recentActivityEvent&lt;/name&gt;\n&lt;definitionname&gt;com.woltlab.wcf.user.recentActivityEvent&lt;/definitionname&gt;\n&lt;classname&gt;wcf\\system\\user\\activity\\event\\LikeableObjectUserActivityEvent&lt;/classname&gt;\n&lt;supportsReactions&gt;1&lt;/supportsReactions&gt;\n&lt;/type&gt;\n</code></pre> <p>Finally we modify our language variable. To ensure a consistent usability, the same formulations should be used as in the WoltLab Suite Core.</p>"},{"location":"migration/wsc31/like/#english_1","title":"English","text":"<p><code>wcf.user.recentActivity.{object_type_name}.recentActivityEvent</code> <pre><code>Reaction ({objectName})\n</code></pre></p> <p>Your language variable for the recent activity text <pre><code>Reacted with &lt;span title=\"{$reactionType-&gt;getTitle()}\" class=\"jsTooltip\"&gt;{@$reactionType-&gt;renderIcon()}&lt;/span&gt; to the {objectName}.\n</code></pre></p>"},{"location":"migration/wsc31/like/#german_1","title":"German","text":"<p><code>wcf.user.recentActivity.{objectTypeName}.recentActivityEvent</code> <pre><code>Reaktion ({objectName})\n</code></pre></p> <p>Your language variable for the recent activity text <pre><code>Hat mit &lt;span title=\"{$reactionType-&gt;getTitle()}\" class=\"jsTooltip\"&gt;{@$reactionType-&gt;renderIcon()}&lt;/span&gt; auf {objectName} reagiert.\n</code></pre></p>"},{"location":"migration/wsc31/like/#comments","title":"Comments","text":"<p>If comments send notifications, they must also be updated. The language variables are changed in the same way as described in the section Notifications / Language. After that comment must be marked as compatible. Therefore we set the parameter <code>supportsReactions</code> in the <code>objectType.xml</code> to <code>1</code>. So for example the entry looks like this: </p> objectType.xml<pre><code>&lt;type&gt;\n&lt;name&gt;com.woltlab.wcf.objectComment.response.like.notification&lt;/name&gt;\n&lt;definitionname&gt;com.woltlab.wcf.notification.objectType&lt;/definitionname&gt;\n&lt;classname&gt;wcf\\system\\user\\notification\\object\\type\\LikeUserNotificationObjectType&lt;/classname&gt;\n&lt;category&gt;com.woltlab.example&lt;/category&gt;\n&lt;supportsReactions&gt;1&lt;/supportsReactions&gt;\n&lt;/type&gt;\n</code></pre>"},{"location":"migration/wsc31/like/#forward-compatibility","title":"Forward Compatibility","text":"<p>So that these changes also work in older versions of WoltLab Suite Core, the used classes and traits were backported with WoltLab Suite Core 3.0.22 and WoltLab Suite Core 3.1.10.</p>"},{"location":"migration/wsc31/php/","title":"Migrating from WSC 3.1 - PHP","text":""},{"location":"migration/wsc31/php/#form-builder","title":"Form Builder","text":"<p>WoltLab Suite Core 5.2 introduces a new, simpler and quicker way of creating forms: form builder. You can find examples of how to migrate existing forms to form builder here.</p> <p>In the near future, to ensure backwards compatibility within WoltLab packages, we will only use form builder for new forms or for major rewrites of existing forms that would break backwards compatibility anyway.</p>"},{"location":"migration/wsc31/php/#like-system","title":"Like System","text":"<p>WoltLab Suite Core 5.2 replaced the like system with the reaction system. You can find the migration guide here.</p>"},{"location":"migration/wsc31/php/#user-content-providers","title":"User Content Providers","text":"<p>User content providers help the WoltLab Suite to find user generated content. They provide a class with which you can find content from a particular user and delete objects.</p>"},{"location":"migration/wsc31/php/#php-class","title":"PHP Class","text":"<p>First, we create the PHP class that provides our interface to provide the data. The class must implement interface <code>wcf\\system\\user\\content\\provider\\IUserContentProvider</code> in any case. Mostly we process data which is based on <code>wcf\\data\\DatabaseObject</code>. In this case, the WoltLab Suite provides an abstract class <code>wcf\\system\\user\\content\\provider\\AbstractDatabaseUserContentProvider</code> that can be used to automatically generates the standardized classes to generate the list and deletes objects via the DatabaseObjectAction. For example, if we would create a content provider for comments, the class would look like this: </p> files/lib/system/user/content/provider/CommentUserContentProvider.class.php<pre><code>&lt;?php\nnamespace wcf\\system\\user\\content\\provider;\nuse wcf\\data\\comment\\Comment;\n\n/**\n * User content provider for comments.\n *\n * @author  Joshua Ruesweg\n * @copyright   2001-2018 WoltLab GmbH\n * @license GNU Lesser General Public License &lt;http://opensource.org/licenses/lgpl-license.php&gt;\n * @package WoltLabSuite\\Core\\System\\User\\Content\\Provider\n * @since   5.2\n */\nclass CommentUserContentProvider extends AbstractDatabaseUserContentProvider {\n    /**\n     * @inheritdoc\n     */\n    public static function getDatabaseObjectClass() {\n        return Comment::class;\n    }\n}\n</code></pre>"},{"location":"migration/wsc31/php/#object-type","title":"Object Type","text":"<p>Now the appropriate object type must be created for the class. This object type must be from the definition <code>com.woltlab.wcf.content.userContentProvider</code> and include the previous created class as FQN in the parameter <code>classname</code>. Also the following parameters can be used in the object type: </p>"},{"location":"migration/wsc31/php/#nicevalue","title":"<code>nicevalue</code>","text":"<p>Optional</p> <p>The nice value is used to determine the order in which the remove content worker are execute the provider. Content provider with lower nice values are executed first.</p>"},{"location":"migration/wsc31/php/#hidden","title":"<code>hidden</code>","text":"<p>Optional</p> <p>Specifies whether or not this content provider can be actively selected in the Content Remove Worker. If it cannot be selected, it will not be executed automatically! </p>"},{"location":"migration/wsc31/php/#requiredobjecttype","title":"<code>requiredobjecttype</code>","text":"<p>Optional</p> <p>The specified list of comma-separated object types are automatically removed during content removal when this object type is being removed. Attention: The order of removal is undefined by default, specify a <code>nicevalue</code> if the order is important.</p>"},{"location":"migration/wsc31/php/#php-database-api","title":"PHP Database API","text":"<p>WoltLab Suite 5.2 introduces a new way to update the database scheme: database PHP API.</p>"},{"location":"migration/wsc52/libraries/","title":"Migrating from WSC 5.2 - Third Party Libraries","text":""},{"location":"migration/wsc52/libraries/#scss-compiler","title":"SCSS Compiler","text":"<p>WoltLab Suite Core 5.3 upgrades the bundled SCSS compiler from <code>leafo/scssphp</code> 0.7.x to <code>scssphp/scssphp</code> 1.1.x. With the updated composer package name the SCSS compiler also received updated namespaces. WoltLab Suite Core adds a compatibility layer that maps the old namespace to the new namespace. The classes themselves appear to be drop-in compatible. Exceptions cannot be mapped using this compatibility layer, any <code>catch</code> blocks catching a specific Exception within the <code>Leafo</code> namespace will need to be adjusted.</p> <p>More details can be found in the Pull Request WoltLab/WCF#3415.</p>"},{"location":"migration/wsc52/libraries/#guzzle","title":"Guzzle","text":"<p>WoltLab Suite Core 5.3 ships with a bundled version of Guzzle 6. Going forward using Guzzle is the recommended way to perform HTTP requests. The <code>\\wcf\\util\\HTTPRequest</code> class should no longer be used and transparently uses Guzzle under the hood.</p> <p>Use <code>\\wcf\\system\\io\\HttpFactory</code> to retrieve a correctly configured <code>GuzzleHttp\\ClientInterface</code>.</p> <p>Please note that it is recommended to explicitely specify a <code>sink</code> when making requests, due to a PHP / Guzzle bug. Have a look at the implementation in WoltLab/WCF for an example.</p>"},{"location":"migration/wsc52/php/","title":"Migrating from WSC 5.2 - PHP","text":""},{"location":"migration/wsc52/php/#comments","title":"Comments","text":"<p>The <code>ICommentManager::isContentAuthor(Comment|CommentResponse): bool</code> method was added. A default implementation that always returns <code>false</code> is available when inheriting from <code>AbstractCommentManager</code>.</p> <p>It is strongly recommended to implement <code>isContentAuthor</code> within your custom comment manager. An example implementation can be found in <code>ArticleCommentManager</code>.</p>"},{"location":"migration/wsc52/php/#event-listeners","title":"Event Listeners","text":"<p>The <code>AbstractEventListener</code> class was added. <code>AbstractEventListener</code> contains an implementation of <code>execute()</code> that will dispatch the event handling to dedicated methods based on the <code>$eventName</code> and, in case of the event object being an <code>AbstractDatabaseObjectAction</code>, the action name.</p> <p>Find the details of the dispatch behavior within the class comment of <code>AbstractEventListener</code>.</p>"},{"location":"migration/wsc52/php/#email-activation","title":"Email Activation","text":"<p>Starting with WoltLab Suite 5.3 the user activation status is independent of the email activation status. A user can be activated even though their email address has not been confirmed, preventing emails being sent to these users. Going forward the new <code>User::isEmailConfirmed()</code> method should be used to check whether sending automated emails to this user is acceptable. If you need to check the user's activation status you should use the new method <code>User::pendingActivation()</code> instead of relying on <code>activationCode</code>. To check, which type of activation is missing, you can use the new methods <code>User::requiresEmailActivation()</code> and <code>User::requiresAdminActivation()</code>.</p>"},{"location":"migration/wsc52/php/#addform","title":"<code>*AddForm</code>","text":"<p>WoltLab Suite 5.3 provides a new framework to allow the administrator to easily edit newly created objects by adding an edit link to the success message. To support this edit link two small changes are required within your <code>*AddForm</code>.</p> <ol> <li> <p>Update the template.</p> <p>Replace: <pre><code>{include file='formError'}\n\n{if $success|isset}\n    &lt;p class=\"success\"&gt;{lang}wcf.global.success.{$action}{/lang}&lt;/p&gt;\n{/if}\n</code></pre></p> <p>With: <pre><code>{include file='formNotice'}\n</code></pre></p> </li> <li> <p>Expose <code>objectEditLink</code> to the template.</p> <p>Example (<code>$object</code> being the newly created object): <pre><code>WCF::getTPL()-&gt;assign([\n    'success' =&gt; true,\n    'objectEditLink' =&gt; LinkHandler::getInstance()-&gt;getControllerLink(ObjectEditForm::class, ['id' =&gt; $object-&gt;objectID]),\n]);\n</code></pre></p> </li> </ol>"},{"location":"migration/wsc52/php/#user-generated-links","title":"User Generated Links","text":"<p>It is recommended by search engines to mark up links within user generated content using the <code>rel=\"ugc\"</code> attribute to indicate that they might be less trustworthy or spammy.</p> <p>WoltLab Suite 5.3 will automatically sets that attribute on external links during message output processing. Set the new <code>HtmlOutputProcessor::$enableUgc</code> property to <code>false</code> if the type of message is not user-generated content, but restricted to a set of trustworthy users. An example of such a type of message would be official news articles.</p> <p>If you manually generate links based off user input you need to specify the attribute yourself. The <code>$isUgc</code> attribute was added to <code>StringUtil::getAnchorTag(string, string, bool, bool): string</code>, allowing you to easily generate a correct anchor tag.</p> <p>If you need to specify additional HTML attributes for the anchor tag you can use the new <code>StringUtil::getAnchorTagAttributes(string, bool): string</code> method to generate the anchor attributes that are dependent on the target URL. Specifically the attributes returned are the <code>class=\"externalURL\"</code> attribute, the <code>rel=\"\u2026\"</code> attribute and the <code>target=\"\u2026\"</code> attribute.</p> <p>Within the template the <code>{anchorAttributes}</code> template plugin is newly available.</p>"},{"location":"migration/wsc52/php/#resource-management-when-scaling-images","title":"Resource Management When Scaling Images","text":"<p>It was discovered that the code holds references to scaled image resources for an unnecessarily long time, taking up memory. This becomes especially apparent when multiple images are scaled within a loop, reusing the same variable name for consecutive images. Unless the destination variable is explicitely cleared before processing the next image up to two images will be stored in memory concurrently. This possibly causes the request to exceed the memory limit or ImageMagick's internal resource limits, even if sufficient resources would have been available to scale the current image.</p> <p>Starting with WoltLab Suite 5.3 it is recommended to clear image handles as early as possible. The usual pattern of creating a thumbnail for an existing image would then look like this:</p> <pre><code>&lt;?php\nforeach ([ 200, 500 ] as $size) {\n    $adapter = ImageHandler::getInstance()-&gt;getAdapter();\n    $adapter-&gt;loadFile($src);\n    $thumbnail = $adapter-&gt;createThumbnail(\n        $size,\n        $size,\n        true\n    );\n    $adapter-&gt;writeImage($thumbnail, $destination);\n    // New: Clear thumbnail as soon as possible to free up the memory.\n    $thumbnail = null;\n}\n</code></pre> <p>Refer to WoltLab/WCF#3505 for additional details.</p>"},{"location":"migration/wsc52/php/#toggle-for-accelerated-mobile-pages-amp","title":"Toggle for Accelerated Mobile Pages (AMP)","text":"<p>Controllers delivering AMP versions of pages have to check for the new option <code>MODULE_AMP</code> and the templates of the non-AMP versions have to also check if the option is enabled before outputting the <code>&lt;link rel=\"amphtml\" /&gt;</code> element.</p>"},{"location":"migration/wsc52/templates/","title":"Migrating from WSC 5.2 - Templates and Languages","text":""},{"location":"migration/wsc52/templates/#jslang","title":"<code>{jslang}</code>","text":"<p>Starting with WoltLab Suite 5.3 the <code>{jslang}</code> template plugin is available. <code>{jslang}</code> works like <code>{lang}</code>, with the difference that the result is automatically encoded for use within a single quoted JavaScript string.</p> <p>Before:</p> <pre><code>&lt;script&gt;\nrequire(['Language', /* \u2026 */], function(Language, /* \u2026 */) {\n    Language.addObject({\n        'app.foo.bar': '{lang}app.foo.bar{/lang}',\n    });\n\n    // \u2026\n});\n&lt;/script&gt;\n</code></pre> <p>After:</p> <pre><code>&lt;script&gt;\nrequire(['Language', /* \u2026 */], function(Language, /* \u2026 */) {\n    Language.addObject({\n        'app.foo.bar': '{jslang}app.foo.bar{/jslang}',\n    });\n\n    // \u2026\n});\n&lt;/script&gt;\n</code></pre>"},{"location":"migration/wsc52/templates/#template-plugins","title":"Template Plugins","text":"<p>The <code>{anchor}</code>, <code>{plural}</code>, and <code>{user}</code> template plugins have been added.</p>"},{"location":"migration/wsc52/templates/#notification-language-items","title":"Notification Language Items","text":"<p>In addition to using the new template plugins mentioned above, language items for notifications have been further simplified.</p> <p>As the whole notification is clickable now, all <code>a</code> elements have been replaced with <code>strong</code> elements in notification messages.</p> <p>The template code to output reactions has been simplified by introducing helper methods:</p> <pre><code>{* old *}\n{implode from=$reactions key=reactionID item=count}{@$__wcf-&gt;getReactionHandler()-&gt;getReactionTypeByID($reactionID)-&gt;renderIcon()}\u00d7{#$count}{/implode}\n{* new *}\n{@$__wcf-&gt;getReactionHandler()-&gt;renderInlineList($reactions)}\n\n{* old *}\n&lt;span title=\"{$like-&gt;getReactionType()-&gt;getTitle()}\" class=\"jsTooltip\"&gt;{@$like-&gt;getReactionType()-&gt;renderIcon()}&lt;/span&gt;\n{* new *}\n{@$like-&gt;render()}\n</code></pre> <p>Similarly, showing labels is now also easier due to the new <code>render</code> method:</p> <pre><code>{* old *}\n&lt;span class=\"label badge{if $label-&gt;getClassNames()} {$label-&gt;getClassNames()}{/if}\"&gt;{$label-&gt;getTitle()}&lt;/span&gt;\n{* new *}\n{@$label-&gt;render()}\n</code></pre> <p>The commonly used template code</p> <pre><code>{if $count &lt; 4}{@$authors[0]-&gt;getAnchorTag()}{if $count != 1}{if $count == 2 &amp;&amp; !$guestTimesTriggered} and {else}, {/if}{@$authors[1]-&gt;getAnchorTag()}{if $count == 3}{if !$guestTimesTriggered} and {else}, {/if} {@$authors[2]-&gt;getAnchorTag()}{/if}{/if}{if $guestTimesTriggered} and {if $guestTimesTriggered == 1}a guest{else}guests{/if}{/if}{else}{@$authors[0]-&gt;getAnchorTag()}{if $guestTimesTriggered},{else} and{/if} {#$others} other users {if $guestTimesTriggered}and {if $guestTimesTriggered == 1}a guest{else}guests{/if}{/if}{/if}\n</code></pre> <p>in stacked notification messages can be replaced with a new language item:</p> <pre><code>{@'wcf.user.notification.stacked.authorList'|language}\n</code></pre>"},{"location":"migration/wsc52/templates/#popovers","title":"Popovers","text":"<p>Popovers provide additional information of the linked object when a user hovers over a link. We unified the approach for such links:</p> <ol> <li>The relevant DBO class implements <code>wcf\\data\\IPopoverObject</code>.</li> <li>The relevant DBO action class implements <code>wcf\\data\\IPopoverAction</code> and the <code>getPopover()</code> method returns an array with popover content.</li> <li>Globally available, <code>WoltLabSuite/Core/Controller/Popover</code> is initialized with the relevant data.</li> <li>Links are created with the <code>anchor</code> template plugin with an additional <code>class</code> attribute whose value is the return value of <code>IPopoverObject::getPopoverLinkClass()</code>.</li> </ol> <p>Example:</p> files/lib/data/foo/Foo.class.php<pre><code>class Foo extends DatabaseObject implements IPopoverObject {\n    public function getPopoverLinkClass() {\n        return 'fooLink';\n    }\n}\n</code></pre> files/lib/data/foo/FooAction.class.php<pre><code>class FooAction extends AbstractDatabaseObjectAction implements IPopoverAction {\n    public function validateGetPopover() {\n        // \u2026\n    }\n\n    public function getPopover() {\n        return [\n            'template' =&gt; '\u2026',\n        ];\n    }\n}\n</code></pre> <pre><code>require(['WoltLabSuite/Core/Controller/Popover'], function(ControllerPopover) {\nControllerPopover.init({\nclassName: 'fooLink',\ndboAction: 'wcf\\\\data\\\\foo\\\\FooAction',\nidentifier: 'com.woltlab.wcf.foo'\n});\n});\n</code></pre> <pre><code>{anchor object=$foo class='fooLink'}\n</code></pre>"},{"location":"migration/wsc53/javascript/","title":"Migrating from WSC 5.3 - TypeScript and JavaScript","text":""},{"location":"migration/wsc53/javascript/#typescript","title":"TypeScript","text":"<p>WoltLab Suite 5.4 introduces TypeScript support. Learn about consuming WoltLab Suite\u2019s types in the TypeScript section of the JavaScript API documentation.</p> <p>The JavaScript API documentation will be updated to properly take into account the changes that came with the new TypeScript support in the future. Existing AMD based modules have been migrated to TypeScript, but will expose the existing and known API.</p> <p>It is recommended that you migrate your custom packages to make use of TypeScript. It will make consuming newly written modules that properly leverage TypeScript\u2019s features much more pleasant and will also ease using existing modules due to proper autocompletion and type checking.</p>"},{"location":"migration/wsc53/javascript/#replacements-for-deprecated-components","title":"Replacements for Deprecated Components","text":"<p>The helper functions in <code>wcf.globalHelper.js</code> should not be used anymore but replaced by their native counterpart:</p> Function Native Replacement <code>elCreate(tag)</code> <code>document.createElement(tag)</code> <code>elRemove(el)</code> <code>el.remove()</code> <code>elShow(el)</code> <code>DomUtil.show(el)</code> <code>elHide(el)</code> <code>DomUtil.hide(el)</code> <code>elIsHidden(el)</code> <code>DomUtil.isHidden(el)</code> <code>elToggle(el)</code> <code>DomUtil.toggle(el)</code> <code>elAttr(el, \"attr\")</code> <code>el.attr</code> or <code>el.getAttribute(\"attr\")</code> <code>elData(el, \"data\")</code> <code>el.dataset.data</code> <code>elDataBool(element, \"data\")</code> <code>Core.stringToBool(el.dataset.data)</code> <code>elById(id)</code> <code>document.getElementById(id)</code> <code>elBySel(sel)</code> <code>document.querySelector(sel)</code> <code>elBySel(sel, el)</code> <code>el.querySelector(sel)</code> <code>elBySelAll(sel)</code> <code>document.querySelectorAll(sel)</code> <code>elBySelAll(sel, el)</code> <code>el.querySelectorAll(sel)</code> <code>elBySelAll(sel, el, callback)</code> <code>el.querySelectorAll(sel).forEach((el) =&gt; callback(el));</code> <code>elClosest(el, sel)</code> <code>el.closest(sel)</code> <code>elByClass(class)</code> <code>document.getElementsByClassName(class)</code> <code>elByClass(class, el)</code> <code>el.getElementsByClassName(class)</code> <code>elByTag(tag)</code> <code>document.getElementsByTagName(tag)</code> <code>elByTag(tag, el)</code> <code>el.getElementsByTagName(tag)</code> <code>elInnerError(el, message, isHtml)</code> <code>DomUtil.innerError(el, message, isHtml)</code> <p>Additionally, the following modules should also be replaced by their native counterpart:</p> Module Native Replacement <code>WoltLabSuite/Core/Dictionary</code> <code>Map</code> <code>WoltLabSuite/Core/List</code> <code>Set</code> <code>WoltLabSuite/Core/ObjectMap</code> <code>WeakMap</code> <p>For event listeners on click events, <code>WCF_CLICK_EVENT</code> is deprecated and should no longer be used. Instead, use <code>click</code> directly:</p> <pre><code>// before\nelement.addEventListener(WCF_CLICK_EVENT, this._click.bind(this));\n\n// after\nelement.addEventListener('click', (ev) =&gt; this._click(ev));\n</code></pre>"},{"location":"migration/wsc53/javascript/#wcfactiondelete-and-wcfactiontoggle","title":"<code>WCF.Action.Delete</code> and <code>WCF.Action.Toggle</code>","text":"<p><code>WCF.Action.Delete</code> and <code>WCF.Action.Toggle</code> were used for buttons to delete or enable/disable objects via JavaScript. In each template, <code>WCF.Action.Delete</code> or <code>WCF.Action.Toggle</code> instances had to be manually created for each object listing.</p> <p>With version 5.4 of WoltLab Suite, we have added a CSS selector-based global TypeScript module that only requires specific CSS classes to be added to the HTML structure for these buttons to work. Additionally, we have added a new <code>{objectAction}</code> template plugin, which generates these buttons reducing the amount of boilerplate template code.</p> <p>The required base HTML structure is as follows:</p> <ol> <li>A <code>.jsObjectActionContainer</code> element with a <code>data-object-action-class-name</code> attribute that contains the name of PHP class that executes the actions.</li> <li><code>.jsObjectActionObject</code> elements within <code>.jsObjectActionContainer</code> that represent the objects for which actions can be executed.    Each <code>.jsObjectActionObject</code> element must have a <code>data-object-id</code> attribute with the id of the object.</li> <li><code>.jsObjectAction</code> elements within <code>.jsObjectActionObject</code> for each action with a <code>data-object-action</code> attribute with the name of the action.    These elements can be generated with the <code>{objectAction}</code> template plugin for the <code>delete</code> and <code>toggle</code> action.</li> </ol> <p>Example:</p> <pre><code>&lt;table class=\"table jsObjectActionContainer\" {*\n    *}data-object-action-class-name=\"wcf\\data\\foo\\FooAction\"&gt;\n    &lt;thead&gt;\n        &lt;tr&gt;\n{* \u2026 *}\n        &lt;/tr&gt;\n    &lt;/thead&gt;\n\n    &lt;tbody&gt;\n{foreach from=$objects item=foo}\n            &lt;tr class=\"jsObjectActionObject\" data-object-id=\"{$foo-&gt;getObjectID()}\"&gt;\n                &lt;td class=\"columnIcon\"&gt;\n{objectAction action=\"toggle\" isDisabled=$foo-&gt;isDisabled}\n{objectAction action=\"delete\" objectTitle=$foo-&gt;getTitle()}\n{* \u2026 *}\n                &lt;/td&gt;\n{* \u2026 *}\n            &lt;/tr&gt;\n{/foreach}\n    &lt;/tbody&gt;\n&lt;/table&gt;\n</code></pre> <p>Please refer to the documentation in <code>ObjectActionFunctionTemplatePlugin</code> for details and examples on how to use this template plugin.</p> <p>The relevant TypeScript module registering the event listeners on the object action buttons is <code>Ui/Object/Action</code>. When an action button is clicked, an AJAX request is sent using the PHP class name and action name. After the successful execution of the action, the page is either reloaded if the action button has a <code>data-object-action-success=\"reload\"</code> attribute or an event using the <code>EventHandler</code> module is fired using <code>WoltLabSuite/Core/Ui/Object/Action</code> as the identifier and the object action name. <code>Ui/Object/Action/Delete</code> and <code>Ui/Object/Action/Toggle</code> listen to these events and update the user interface depending on the execute action by removing the object or updating the toggle button, respectively.</p> <p>Converting from <code>WCF.Action.*</code> to the new approach requires minimal changes per template, as shown in the relevant pull request #4080.</p>"},{"location":"migration/wsc53/javascript/#wcftableemptytablehandler","title":"<code>WCF.Table.EmptyTableHandler</code>","text":"<p>When all objects in a table or list are deleted via their delete button or clipboard actions, an empty table or list can remain. Previously, <code>WCF.Table.EmptyTableHandler</code> had to be explicitly used in each template for these tables and lists to reload the page. As a TypeScript-based replacement for <code>WCF.Table.EmptyTableHandler</code> that is only initialized once globally, <code>WoltLabSuite/Core/Ui/Empty</code> was added. To use this new module, you only have to add the CSS class <code>jsReloadPageWhenEmpty</code> to the relevant HTML element. Once this HTML element no longer has child elements, the page is reloaded. To also cover scenarios in which there are fixed child elements that should not be considered when determining if there are no child elements, the <code>data-reload-page-when-empty=\"ignore\"</code> can be set for these elements.</p> <p>Examples:</p> <pre><code>&lt;table class=\"table\"&gt;\n    &lt;thead&gt;\n        &lt;tr&gt;\n{* \u2026 *}\n        &lt;/tr&gt;\n    &lt;/thead&gt;\n\n    &lt;tbody class=\"jsReloadPageWhenEmpty\"&gt;\n{foreach from=$objects item=object}\n            &lt;tr&gt;\n{* \u2026 *}\n            &lt;/tr&gt;\n{/foreach}\n    &lt;/tbody&gt;\n&lt;/table&gt;\n</code></pre> <pre><code>&lt;div class=\"section tabularBox messageGroupList\"&gt;\n    &lt;ol class=\"tabularList jsReloadPageWhenEmpty\"&gt;\n        &lt;li class=\"tabularListRow tabularListRowHead\" data-reload-page-when-empty=\"ignore\"&gt;\n{* \u2026 *}\n        &lt;/li&gt;\n\n{foreach from=$objects item=object}\n            &lt;li&gt;\n{* \u2026 *}\n            &lt;/li&gt;\n{/foreach}\n    &lt;/ol&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"migration/wsc53/libraries/","title":"Migrating from WSC 5.3 - Third Party Libraries","text":""},{"location":"migration/wsc53/libraries/#guzzle","title":"Guzzle","text":"<p>The bundled Guzzle version was updated to Guzzle 7. No breaking changes are expected for simple uses. A detailed Guzzle migration guide can be found in the Guzzle documentation.</p> <p>The explicit <code>sink</code> that was recommended in the migration guide for WSC 5.2 can now be removed, as the Guzzle issue #2735 was fixed in Guzzle 7.</p>"},{"location":"migration/wsc53/libraries/#emogrifier-css-inliner","title":"Emogrifier / CSS Inliner","text":"<p>The Emogrifier library was updated from version 2.2 to 5.0. This update comes with a breaking change, as the <code>Emogrifier</code> class was removed. With the updated Emogrifier library, the <code>CssInliner</code> class must be used instead.</p> <p>No compatibility layer was added for the <code>Emogrifier</code> class, as the Emogrifier library's purpose was to be used within the email subsystem of WoltLab Suite. In case you use Emogrifier directly within your own code, you will need to adjust the usage. Refer to the Emogrifier CHANGELOG and WoltLab/WCF #3738 if you need help making the necessary adjustments.</p> <p>If you only use Emogrifier indirectly by sending HTML mail via the email subsystem then you might notice unexpected visual changes due to the improved CSS support. Double check your CSS declarations and particularly the specificity of your selectors in these cases.</p>"},{"location":"migration/wsc53/libraries/#scssphp","title":"scssphp","text":"<p>scssphp was updated from version 1.1 to 1.4.</p> <p>If you interact with scssphp only by deploying <code>.scss</code> files, then you should not experience any breaking changes, except when the improved SCSS compatibility interprets your SCSS code differently.</p> <p>If you happen to directly use scssphp in your PHP code, you should be aware that scssphp deprecated the use of output formatters in favor of a simple output style enum.</p> <p>Refer to WoltLab/WCF #3851 and the scssphp releases for details.</p>"},{"location":"migration/wsc53/libraries/#constant-time-encoder","title":"Constant Time Encoder","text":"<p>WoltLab Suite 5.4 ships the <code>paragonie/constant_time_encoding</code> library. It is recommended to use this library to perform encoding and decoding of secrets to prevent leaks via cache timing attacks. Refer to the library author\u2019s blog post for more background detail.</p> <p>For the common case of encoding the bytes taken from a CSPRNG in hexadecimal form, the required change would look like the following:</p> <p>Previously:</p> <pre><code>&lt;?php\n$encoded = hex2bin(random_bytes(16));\n</code></pre> <p>Now:</p> <pre><code>&lt;?php\nuse ParagonIE\\ConstantTime\\Hex;\n\n// For security reasons you should add the backslash\n// to ensure you refer to the `random_bytes` function\n// within the global namespace and not a function\n// defined in the current namespace.\n$encoded = Hex::encode(\\random_bytes(16));\n</code></pre> <p>Please refer to the documentation and source code of the <code>paragonie/constant_time_encoding</code> library to learn how to use the library with different encodings (e.g. base64).</p>"},{"location":"migration/wsc53/php/","title":"Migrating from WSC 5.3 - PHP","text":""},{"location":"migration/wsc53/php/#minimum-requirements","title":"Minimum requirements","text":"<p>The minimum requirements have been increased to the following:</p> <ul> <li>PHP: 7.2.24</li> <li>MySQL: 5.7.31 or 8.0.19</li> <li>MariaDB: 10.1.44</li> </ul> <p>Most notably PHP 7.2 contains usable support for scalar types by the addition of nullable types in PHP 7.1 and parameter type widening in PHP 7.2.</p> <p>It is recommended to make use of scalar types and other newly introduced features whereever possible. Please refer to the PHP documentation for details.</p>"},{"location":"migration/wsc53/php/#flood-control","title":"Flood Control","text":"<p>To prevent users from creating massive amounts of contents in short periods of time, i.e., spam, existing systems already use flood control mechanisms to limit the amount of contents created within a certain period of time. With WoltLab Suite 5.4, we have added a general API that manages such rate limiting. Leveraging this API is easily done.</p> <ol> <li>Register an object type for the definition <code>com.woltlab.wcf.floodControl</code>: <code>com.example.foo.myContent</code>.</li> <li>Whenever the active user creates content of this type, call     <pre><code>FloodControl::getInstance()-&gt;registerContent('com.example.foo.myContent');\n</code></pre>     You should only call this method if the user creates the content themselves.     If the content is automatically created by the system, for example when copying / duplicating existing content, no activity should be registered.</li> <li> <p>To check the last time when the active user created content of the relevant type, use     <pre><code>FloodControl::getInstance()-&gt;getLastTime('com.example.foo.myContent');\n</code></pre>     If you want to limit the number of content items created within a certain period of time, for example within one day, use     <pre><code>$data = FloodControl::getInstance()-&gt;countContent('com.example.foo.myContent', new \\DateInterval('P1D'));\n// number of content items created within the last day\n$count = $data['count'];\n// timestamp when the earliest content item was created within the last day\n$earliestTime = $data['earliestTime'];\n</code></pre>     The method also returns <code>earliestTime</code> so that you can tell the user in the error message when they are able again to create new content of the relevant type.</p> <p>Flood control entries are only stored for 31 days and older entries are cleaned up daily.</p> </li> </ol> <p>The previously mentioned methods of <code>FloodControl</code> use the active user and the current timestamp as reference point. <code>FloodControl</code> also provides methods to register content or check flood control for other registered users or for guests via their IP address. For further details on these methods, please refer to the documentation in the FloodControl class.</p> <p>Do not interact directly with the flood control database table but only via the <code>FloodControl</code> class!</p>"},{"location":"migration/wsc53/php/#databasepackageinstallationplugin","title":"DatabasePackageInstallationPlugin","text":"<p><code>DatabasePackageInstallationPlugin</code> is a new idempotent package installation plugin (thus it is available in the sync function in the devtools) to update the database schema using the PHP-based database API. <code>DatabasePackageInstallationPlugin</code> is similar to <code>ScriptPackageInstallationPlugin</code> by requiring a PHP script that is included during the execution of the script. The script is expected to return an array of <code>DatabaseTable</code> objects representing the schema changes so that in contrast to using <code>ScriptPackageInstallationPlugin</code>, no <code>DatabaseTableChangeProcessor</code> object has to be created. The PHP file must be located in the <code>acp/database/</code> directory for the devtools sync function to recognize the file.</p>"},{"location":"migration/wsc53/php/#php-database-api","title":"PHP Database API","text":"<p>The PHP API to add and change database tables during package installations and updates in the <code>wcf\\system\\database\\table</code> namespace now also supports renaming existing table columns with the new <code>IDatabaseTableColumn::renameTo()</code> method:</p> <pre><code>PartialDatabaseTable::create('wcf1_test')\n        -&gt;columns([\n                NotNullInt10DatabaseTableColumn::create('oldName')\n                        -&gt;renameTo('newName')\n        ]);\n</code></pre> <p>Like with every change to existing database tables, packages can only rename columns that they installed.</p>"},{"location":"migration/wsc53/php/#captcha","title":"Captcha","text":"<p>The reCAPTCHA v1 implementation was completely removed. This includes the <code>\\wcf\\system\\recaptcha\\RecaptchaHandler</code> class (not to be confused with the one in the <code>captcha</code> namespace).</p> <p>The reCAPTCHA v1 endpoints have already been turned off by Google and always return a HTTP 404. Thus the implementation was completely non-functional even before this change.</p> <p>See WoltLab/WCF#3781 for details.</p>"},{"location":"migration/wsc53/php/#search","title":"Search","text":"<p>The generic implementation in the <code>AbstractSearchEngine::parseSearchQuery()</code> method was dangerous, because it did not have knowledge about the search engine\u2019s specifics. The implementation was completely removed: <code>AbstractSearchEngine::parseSearchQuery()</code> now always throws a <code>\\BadMethodCallException</code>.</p> <p>If you implemented a custom search engine and relied on this method, you can inline the previous implementation to preserve existing behavior. You should take the time to verify the rewritten queries against the manual of the search engine to make sure it cannot generate malformed queries or security issues.</p> <p>See WoltLab/WCF#3815 for details.</p>"},{"location":"migration/wsc53/php/#styles","title":"Styles","text":"<p>The <code>StyleCompiler</code> class is marked <code>final</code> now. The internal SCSS compiler object being stored in the <code>$compiler</code> property was a design issue that leaked compiler state across multiple compiled styles, possibly causing misgenerated stylesheets. As the removal of the <code>$compiler</code> property effectively broke compatibility within the <code>StyleCompiler</code> and as the <code>StyleCompiler</code> never was meant to be extended, it was marked final.</p> <p>See WoltLab/WCF#3929 for details.</p>"},{"location":"migration/wsc53/php/#tags","title":"Tags","text":"<p>Use of the <code>wcf1_tag_to_object.languageID</code> column is deprecated. The <code>languageID</code> column is redundant, because its value can be derived from the <code>tagID</code>. With WoltLab Suite 5.4, it will no longer be part of any indices, allowing more efficient index usage in the general case.</p> <p>If you need to filter the contents of <code>wcf1_tag_to_object</code> by language, you should perform an <code>INNER JOIN wcf1_tag tag ON tag.tagID = tag_to_object.tagID</code> and filter on <code>wcf1_tag.languageID</code>.</p> <p>See WoltLab/WCF#3904 for details.</p>"},{"location":"migration/wsc53/php/#avatars","title":"Avatars","text":"<p>The <code>ISafeFormatAvatar</code> interface was added to properly support fallback image types for use in emails. If your custom <code>IUserAvatar</code> implementation supports image types without broad support (i.e. anything other than PNG, JPEG, and GIF), then you should implement the <code>ISafeFormatAvatar</code> interface to return a fallback PNG, JPEG, or GIF image.</p> <p>See WoltLab/WCF#4001 for details.</p>"},{"location":"migration/wsc53/php/#linebreakseparatedtext-option-type","title":"<code>lineBreakSeparatedText</code> Option Type","text":"<p>Currently, several of the (user group) options installed by our packages use the <code>textarea</code> option type and split its value by linebreaks to get a list of items, for example for allowed file extensions. To improve the user interface when setting up the value of such options, we have added the <code>lineBreakSeparatedText</code> option type as a drop-in replacement where the individual items are explicitly represented as distinct items in the user interface.</p>"},{"location":"migration/wsc53/php/#ignoring-of-users","title":"Ignoring of Users","text":"<p>WoltLab Suite 5.4 distinguishes between blocking direct contact only and hiding all contents when ignoring users. To allow for detecting the difference, the <code>UserProfile::getIgnoredUsers()</code> and <code>UserProfile::isIgnoredUser()</code> methods received a new <code>$type</code> parameter. Pass either <code>UserIgnore::TYPE_BLOCK_DIRECT_CONTACT</code> or <code>UserIgnore::TYPE_HIDE_MESSAGES</code> depending on whether the check refers to a non-directed usage or content.</p> <p>See WoltLab/WCF#4064 and WoltLab/WCF#3981 for details.</p>"},{"location":"migration/wsc53/php/#databaseprepare","title":"<code>Database::prepare()</code>","text":"<p><code>Database::prepare(string $statement, int $limit = 0, int $offset = 0): PreparedStatement</code> works the same way as <code>Database::prepareStatement()</code> but additionally also replaces all occurences of <code>app1_</code> with <code>app{WCF_N}_</code> for all installed apps. This new method makes it superfluous to use <code>WCF_N</code> when building queries.</p>"},{"location":"migration/wsc53/session/","title":"Migrating from WSC 5.3 - Session Handling and Authentication","text":"<p>WoltLab Suite 5.4 includes a completely refactored session handling. As long as you only interact with sessions via <code>WCF::getSession()</code>, especially when you perform read-only accesses, you should not notice any breaking changes.</p> <p>You might appreciate some of the new session methods if you process security sensitive data.</p>"},{"location":"migration/wsc53/session/#summary-and-concepts","title":"Summary and Concepts","text":"<p>Most of the changes revolve around the removal of the legacy persistent login functionality and the assumption that every user has a single session only. Both aspects are related to each other.</p>"},{"location":"migration/wsc53/session/#legacy-persistent-login","title":"Legacy Persistent Login","text":"<p>The legacy persistent login was rather an automated login. Upon bootstrapping a session, it was checked whether the user had a cookie pair storing the user\u2019s <code>userID</code> and (a single BCrypt hash of) the user\u2019s password. If such a cookie pair exists and the BCrypt hash within the cookie matches the user\u2019s password hash when hashed again, the session would immediately <code>changeUser()</code> to the respective user.</p> <p>This legacy persistent login was completely removed. Instead, any sessions that belong to an authenticated user will automatically be long-lived. These long-lived sessions expire no sooner than 14 days after the last activity, ensuring that the user continously stays logged in, provided that they visit the page at least once per fortnight.</p>"},{"location":"migration/wsc53/session/#multiple-sessions","title":"Multiple Sessions","text":"<p>To allow for a proper separation of these long-lived user sessions, WoltLab Suite now allows for multiple sessions per user. These sessions are completely unrelated to each other. Specifically, they do not share session variables and they expire independently.</p> <p>As the existing <code>wcf1_session</code> table is also used for the online lists and location tracking, it will be maintained on a best effort basis. It no longer stores any private session data.</p> <p>The actual sessions storing security sensitive information are in an unrelated location. They must only be accessed via the PHP API exposed by the <code>SessionHandler</code>.</p>"},{"location":"migration/wsc53/session/#merged-acp-and-frontend-sessions","title":"Merged ACP and Frontend Sessions","text":"<p>WoltLab Suite 5.4 shares a single session across both the frontend, as well as the ACP. When a user logs in to the frontend, they will also be logged into the ACP and vice versa.</p> <p>Actual access to the ACP is controlled via the new reauthentication mechanism.</p> <p>The session variable store is scoped: Session variables set within the frontend are not available within the ACP and vice versa.</p>"},{"location":"migration/wsc53/session/#improved-authentication-and-reauthentication","title":"Improved Authentication and Reauthentication","text":"<p>WoltLab Suite 5.4 ships with multi-factor authentication support and a generic re-authentication implementation that can be used to verify the account owner\u2019s presence.</p>"},{"location":"migration/wsc53/session/#additions-and-changes","title":"Additions and Changes","text":""},{"location":"migration/wsc53/session/#password-hashing","title":"Password Hashing","text":"<p>WoltLab Suite 5.4 includes a new object-oriented password hashing framework that is modeled after PHP\u2019s <code>password_*</code> API. Check <code>PasswordAlgorithmManager</code> and <code>IPasswordAlgorithm</code> for details.</p> <p>The new default password hash is a standard BCrypt hash. All newly generated hashes in <code>wcf1_user.password</code> will now include a type prefix, instead of just passwords imported from other systems.</p>"},{"location":"migration/wsc53/session/#session-storage","title":"Session Storage","text":"<p>The <code>wcf1_session</code> table will no longer be used for session storage. Instead, it is maintained for compatibility with existing online lists.</p> <p>The actual session storage is considered an implementation detail and you must not directly interact with the session tables. Future versions might support alternative session backends, such as Redis.</p> <p>Do not interact directly with the session database tables but only via the <code>SessionHandler</code> class!</p>"},{"location":"migration/wsc53/session/#reauthentication","title":"Reauthentication","text":"<p>For security sensitive processing, you might want to ensure that the account owner is actually present instead of a third party accessing a session that was accidentally left logged in.</p> <p>WoltLab Suite 5.4 ships with a generic reauthentication framework. To request reauthentication within your controller you need to:</p> <ol> <li>Use the <code>wcf\\system\\user\\authentication\\TReauthenticationCheck</code> trait.</li> <li>Call:    <pre><code>$this-&gt;requestReauthentication(LinkHandler::getInstance()-&gt;getControllerLink(static::class, [\n /* additional parameters */\n]));\n</code></pre></li> </ol> <p><code>requestReauthentication()</code> will check if the user has recently authenticated themselves. If they did, the request proceeds as usual. Otherwise, they will be asked to reauthenticate themselves. After the successful authentication, they will be redirected to the URL that was passed as the first parameter (the current controller within the example).</p> <p>Details can be found in WoltLab/WCF#3775.</p>"},{"location":"migration/wsc53/session/#multi-factor-authentication","title":"Multi-factor Authentication","text":"<p>To implement multi-factor authentication securely, WoltLab Suite 5.4 implements the concept of a \u201cpending user change\u201d. The user will not be logged in (i.e. <code>WCF::getUser()-&gt;userID</code> returns <code>null</code>) until they authenticate themselves with their second factor.</p> <p>Requesting multi-factor authentication is done on an opt-in basis for compatibility reasons. If you perform authentication yourself and do not trust the authentication source to perform multi-factor authentication itself, you will need to adjust your logic to request multi-factor authentication from WoltLab Suite:</p> <p>Previously:</p> <pre><code>WCF::getSession()-&gt;changeUser($targetUser);\n</code></pre> <p>Now:</p> <pre><code>$isPending = WCF::getSession()-&gt;changeUserAfterMultifactorAuthentication($targetUser);\nif ($isPending) {\n    // Redirect to the authentication form. The user will not be logged in.\n    // Note: Do not use `getControllerLink` to support both the frontend as well as the ACP.\n    HeaderUtil::redirect(LinkHandler::getInstance()-&gt;getLink('MultifactorAuthentication', [\n        'url' =&gt; /* Return To */,\n    ]));\n    exit;\n}\n// Proceed as usual. The user will be logged in.\n</code></pre>"},{"location":"migration/wsc53/session/#adding-multi-factor-methods","title":"Adding Multi-factor Methods","text":"<p>Adding your own multi-factor method requires the implementation of a single object type:</p> objectType.xml<pre><code>&lt;type&gt;\n&lt;name&gt;com.example.multifactor.foobar&lt;/name&gt;\n&lt;definitionname&gt;com.woltlab.wcf.multifactor&lt;/definitionname&gt;\n&lt;icon&gt;&lt;!-- Font Awesome 4 Icon Name goes here. --&gt;&lt;/icon&gt;\n&lt;priority&gt;&lt;!-- Determines the sort order, higher priority will be preferred for authentication. --&gt;&lt;/priority&gt;\n&lt;classname&gt;wcf\\system\\user\\multifactor\\FoobarMultifactorMethod&lt;/classname&gt;\n&lt;/type&gt;\n</code></pre> <p>The given classname must implement the <code>IMultifactorMethod</code> interface.</p> <p>As a self-contained example, you can find the initial implementation of the email multi-factor method in WoltLab/WCF#3729. Please check the version history of the PHP class to make sure you do not miss important changes that were added later.</p> <p>Multi-factor authentication is security sensitive. Make sure to carefully read the remarks in <code>IMultifactorMethod</code> for possible issues. Also make sure to carefully test your implementation against all sorts of incorrect input and consider attack vectors such as race conditions. It is strongly recommended to generously check the current state by leveraging assertions and exceptions.</p>"},{"location":"migration/wsc53/session/#enforcing-multi-factor-authentication","title":"Enforcing Multi-factor Authentication","text":"<p>To enforce Multi-factor Authentication within your controller you need to:</p> <ol> <li>Use the <code>wcf\\system\\user\\multifactor\\TMultifactorRequirementEnforcer</code> trait.</li> <li>Call: <code>$this-&gt;enforceMultifactorAuthentication();</code></li> </ol> <p><code>enforceMultifactorAuthentication()</code> will check if the user is in a group that requires multi-factor authentication, but does not yet have multi-factor authentication enabled. If they did, the request proceeds as usual. Otherwise, a <code>NamedUserException</code> is thrown.</p>"},{"location":"migration/wsc53/session/#deprecations-and-removals","title":"Deprecations and Removals","text":""},{"location":"migration/wsc53/session/#sessionhandler","title":"SessionHandler","text":"<p>Most of the changes with regard to the new session handling happened in <code>SessionHandler</code>. Most notably, <code>SessionHandler</code> now is marked <code>final</code> to ensure proper encapsulation of data.</p> <p>A number of methods in <code>SessionHandler</code> are now deprecated and result in a noop. This change mostly affects methods that have been used to bootstrap the session, such as <code>setHasValidCookie()</code>.</p> <p>Additionally, accessing the following keys on the session is deprecated. They directly map to an existing method in another class and any uses can easily be updated: - <code>ipAddress</code> - <code>userAgent</code> - <code>requestURI</code> - <code>requestMethod</code> - <code>lastActivityTime</code></p> <p>Refer to the implementation for details.</p>"},{"location":"migration/wsc53/session/#acp-sessions","title":"ACP Sessions","text":"<p>The database tables related to ACP sessions have been removed. The PHP classes have been preserved due to being used within the class hierarchy of the legacy sessions.</p>"},{"location":"migration/wsc53/session/#cookies","title":"Cookies","text":"<p>The <code>_userID</code>, <code>_password</code>, <code>_cookieHash</code> and <code>_cookieHash_acp</code> cookies will no longer be created nor consumed.</p>"},{"location":"migration/wsc53/session/#virtual-sessions","title":"Virtual Sessions","text":"<p>The virtual session logic existed to support multiple devices per single session in <code>wcf1_session</code>. Virtual sessions are no longer required with the refactored session handling.</p> <p>Anything related to virtual sessions has been completely removed as they are considered an implementation detail. This removal includes PHP classes and database tables.</p>"},{"location":"migration/wsc53/session/#security-token-constants","title":"Security Token Constants","text":"<p>The security token constants are deprecated. Instead, the methods of <code>SessionHandler</code> should be used (e.g. <code>-&gt;getSecurityToken()</code>). Within templates, you should migrate to the <code>{csrfToken}</code> tag in place of <code>{@SECURITY_TOKEN_INPUT_TAG}</code>. The <code>{csrfToken}</code> tag is a drop-in replacement and was backported to WoltLab Suite 5.2+, allowing you to maintain compatibility across a broad range of versions.</p>"},{"location":"migration/wsc53/session/#passwordutil-and-double-bcrypt-hashes","title":"PasswordUtil and Double BCrypt Hashes","text":"<p>Most of the methods in PasswordUtil are deprecated in favor of the new password hashing framework.</p>"},{"location":"migration/wsc53/templates/","title":"Migrating from WSC 5.3 - Templates and Languages","text":""},{"location":"migration/wsc53/templates/#csrftoken","title":"<code>{csrfToken}</code>","text":"<p>Going forward, any uses of the <code>SECURITY_TOKEN_*</code> constants should be avoided. To reference the CSRF token (\u201cSecurity Token\u201d) within templates, the <code>{csrfToken}</code> template plugin was added.</p> <p>Before:</p> <pre><code>{@SECURITY_TOKEN_INPUT_TAG}\n{link controller=\"Foo\"}t={@SECURITY_TOKEN}{/link}\n</code></pre> <p>After:</p> <pre><code>{csrfToken}\n{link controller=\"Foo\"}t={csrfToken type=url}{/link} {* The use of the CSRF token in URLs is discouraged.\n                                                        Modifications should happen by means of a POST request. *}\n</code></pre> <p>The <code>{csrfToken}</code> plugin was backported to WoltLab Suite 5.2 and higher, allowing compatibility with a large range of WoltLab Suite branches. See WoltLab/WCF#3612 for details.</p>"},{"location":"migration/wsc53/templates/#rss-feed-links","title":"RSS Feed Links","text":"<p>Prior to version 5.4 of WoltLab Suite, all RSS feed links contained the access token for logged-in users so that the feed shows all contents the specific user has access to. With version 5.4, links with the CSS class <code>rssFeed</code> will open a dialog when clicked that offers the feed link with the access token for personal use and an anonymous feed link that can be shared with others.</p> <pre><code>{* before *}\n&lt;li&gt;\n    &lt;a rel=\"alternate\" {*\n        *}href=\"{if $__wcf-&gt;getUser()-&gt;userID}{link controller='ArticleFeed'}at={@$__wcf-&gt;getUser()-&gt;userID}-{@$__wcf-&gt;getUser()-&gt;accessToken}{/link}{else}{link controller='ArticleFeed'}{/link}{/if}\" {*\n        *}title=\"{lang}wcf.global.button.rss{/lang}\" {*\n        *}class=\"jsTooltip\"{*\n    *}&gt;\n        &lt;span class=\"icon icon16 fa-rss\"&gt;&lt;/span&gt;\n        &lt;span class=\"invisible\"&gt;{lang}wcf.global.button.rss{/lang}&lt;/span&gt;\n    &lt;/a&gt;\n&lt;/li&gt;\n\n{* after *}\n&lt;li&gt;\n    &lt;a rel=\"alternate\" {*\n        *}href=\"{if $__wcf-&gt;getUser()-&gt;userID}{link controller='ArticleFeed'}at={@$__wcf-&gt;getUser()-&gt;userID}-{@$__wcf-&gt;getUser()-&gt;accessToken}{/link}{else}{link controller='ArticleFeed'}{/link}{/if}\" {*\n        *}title=\"{lang}wcf.global.button.rss{/lang}\" {*\n        *}class=\"rssFeed jsTooltip\"{*\n    *}&gt;\n        &lt;span class=\"icon icon16 fa-rss\"&gt;&lt;/span&gt;\n        &lt;span class=\"invisible\"&gt;{lang}wcf.global.button.rss{/lang}&lt;/span&gt;\n    &lt;/a&gt;\n&lt;/li&gt;\n</code></pre>"},{"location":"migration/wsc54/deprecations_removals/","title":"Migrating from WSC 5.4 - Deprecations and Removals","text":"<p>With version 5.5, we have deprecated certain components and removed several other components that have been deprecated for many years.</p>"},{"location":"migration/wsc54/deprecations_removals/#deprecations","title":"Deprecations","text":""},{"location":"migration/wsc54/deprecations_removals/#php","title":"PHP","text":""},{"location":"migration/wsc54/deprecations_removals/#classes","title":"Classes","text":"<ul> <li><code>filebase\\system\\file\\FileDataHandler</code> (use <code>filebase\\system\\cache\\runtime\\FileRuntimeCache</code>)</li> <li><code>wcf\\action\\AbstractAjaxAction</code> (use PSR-7 responses, WoltLab/WCF#4437)</li> <li><code>wcf\\data\\IExtendedMessageQuickReplyAction</code> (WoltLab/WCF#4575)</li> <li><code>wcf\\form\\SearchForm</code> (see WoltLab/WCF#4605)</li> <li><code>wcf\\page\\AbstractSecurePage</code> (WoltLab/WCF#4515)</li> <li><code>wcf\\page\\SearchResultPage</code> (see WoltLab/WCF#4605)</li> <li><code>wcf\\system\\database\\table\\column\\TUnsupportedDefaultValue</code> (do not implement <code>IDefaultValueDatabaseTableColumn</code>, see WoltLab/WCF#4733)</li> <li><code>wcf\\system\\exception\\ILoggingAwareException</code> (WoltLab/WCF#4547)</li> <li><code>wcf\\system\\io\\FTP</code> (directly use the FTP extension)</li> <li><code>wcf\\system\\search\\AbstractSearchableObjectType</code> (use <code>AbstractSearchProvider</code> instead, see WoltLab/WCF#4605)</li> <li><code>wcf\\system\\search\\elasticsearch\\ElasticsearchException</code></li> <li><code>wcf\\system\\search\\ISearchableObjectType</code> (use <code>ISearchProvider</code> instead, see WoltLab/WCF#4605)</li> <li><code>wcf\\util\\PasswordUtil</code></li> </ul>"},{"location":"migration/wsc54/deprecations_removals/#methods","title":"Methods","text":"<ul> <li><code>wcf\\action\\MessageQuoteAction::markForRemoval()</code> (WoltLab/WCF#4452)</li> <li><code>wcf\\data\\user\\avatar\\UserAvatarAction::fetchRemoteAvatar()</code> (WoltLab/WCF#4744)</li> <li><code>wcf\\data\\user\\notification\\UserNotificationAction::getOutstandingNotifications()</code> (WoltLab/WCF#4603)</li> <li><code>wcf\\data\\moderation\\queue\\ModerationQueueAction::getOutstandingQueues()</code> (WoltLab/WCF#4603)</li> <li><code>wcf\\system\\message\\QuickReplyManager::setTmpHash()</code> (WoltLab/WCF#4575)</li> <li><code>wcf\\system\\request\\Request::isExecuted()</code> (WoltLab/WCF#4485)</li> <li><code>wcf\\system\\search\\elasticsearch\\ElasticsearchHandler::query()</code></li> <li><code>wcf\\system\\session\\Session::getDeviceIcon()</code> (WoltLab/WCF#4525)</li> <li><code>wcf\\system\\user\\authentication\\password\\algorithm\\TPhpass::hash()</code> (WoltLab/WCF#4602)</li> <li><code>wcf\\system\\user\\authentication\\password\\algorithm\\TPhpass::needsRehash()</code> (WoltLab/WCF#4602)</li> <li><code>wcf\\system\\WCF::getAnchor()</code> (WoltLab/WCF#4580)</li> <li><code>wcf\\util\\MathUtil::getRandomValue()</code> (WoltLab/WCF#4280)</li> <li><code>wcf\\util\\StringUtil::encodeJSON()</code> (WoltLab/WCF#4645)</li> <li><code>wcf\\util\\StringUtil::endsWith()</code> (WoltLab/WCF#4509)</li> <li><code>wcf\\util\\StringUtil::getHash()</code> (WoltLab/WCF#4279)</li> <li><code>wcf\\util\\StringUtil::split()</code> (WoltLab/WCF#4513)</li> <li><code>wcf\\util\\StringUtil::startsWith()</code> (WoltLab/WCF#4509)</li> <li><code>wcf\\util\\UserUtil::isAvailableEmail()</code> (WoltLab/WCF#4602)</li> <li><code>wcf\\util\\UserUtil::isAvailableUsername()</code> (WoltLab/WCF#4602)</li> </ul>"},{"location":"migration/wsc54/deprecations_removals/#properties","title":"Properties","text":"<ul> <li><code>wcf\\acp\\page\\PackagePage::$compatibleVersions</code> (WoltLab/WCF#4371)</li> <li><code>wcf\\system\\io\\GZipFile::$gzopen64</code> (WoltLab/WCF#4381)</li> </ul>"},{"location":"migration/wsc54/deprecations_removals/#constants","title":"Constants","text":"<ul> <li><code>wcf\\system\\search\\elasticsearch\\ElasticsearchHandler::DELETE</code></li> <li><code>wcf\\system\\search\\elasticsearch\\ElasticsearchHandler::GET</code></li> <li><code>wcf\\system\\search\\elasticsearch\\ElasticsearchHandler::POST</code></li> <li><code>wcf\\system\\search\\elasticsearch\\ElasticsearchHandler::PUT</code></li> <li><code>wcf\\system\\visitTracker\\VisitTracker::DEFAULT_LIFETIME</code> (WoltLab/WCF#4757)</li> </ul>"},{"location":"migration/wsc54/deprecations_removals/#functions","title":"Functions","text":"<ul> <li>The global <code>escapeString</code> helper (WoltLab/WCF#4506)</li> </ul>"},{"location":"migration/wsc54/deprecations_removals/#options","title":"Options","text":"<ul> <li><code>HTTP_SEND_X_FRAME_OPTIONS</code> (WoltLab/WCF#4474)</li> <li><code>ELASTICSEARCH_ALLOW_LEADING_WILDCARD</code></li> <li><code>WBB_MODULE_IGNORE_BOARDS</code> (The option will be always on with WoltLab Suite Forum 5.5 and will be removed with a future version.)</li> <li><code>ENABLE_DESKTOP_NOTIFICATIONS</code> (WoltLab/WCF#4806)</li> </ul>"},{"location":"migration/wsc54/deprecations_removals/#javascript","title":"JavaScript","text":"<ul> <li><code>WCF.Message.Quote.Manager.markQuotesForRemoval()</code> (WoltLab/WCF#4452)</li> <li><code>WCF.Search.Message.KeywordList</code> (WoltLab/WCF#4402)</li> <li><code>SECURITY_TOKEN</code> (use <code>Core.getXsrfToken()</code>, WoltLab/WCF#4523)</li> <li><code>WCF.Dropdown.Interactive.Handler</code> (WoltLab/WCF#4603)</li> <li><code>WCF.Dropdown.Interactive.Instance</code> (WoltLab/WCF#4603)</li> <li><code>WCF.User.Panel.Abstract</code> (WoltLab/WCF#4603)</li> </ul>"},{"location":"migration/wsc54/deprecations_removals/#database-tables","title":"Database Tables","text":"<ul> <li><code>wcf1_package_compatibility</code> (WoltLab/WCF#4371)</li> <li><code>wcf1_package_update_compatibility</code> (WoltLab/WCF#4385)</li> <li><code>wcf1_package_update_optional</code> (WoltLab/WCF#4432)</li> </ul>"},{"location":"migration/wsc54/deprecations_removals/#templates","title":"Templates","text":""},{"location":"migration/wsc54/deprecations_removals/#template-plugins","title":"Template Plugins","text":"<ul> <li><code>|encodeJSON</code> (WoltLab/WCF#4645)</li> <li><code>{fetch}</code> (WoltLab/WCF#4891)</li> </ul>"},{"location":"migration/wsc54/deprecations_removals/#template-events","title":"Template Events","text":"<ul> <li><code>pageNavbarTop::navigationIcons</code></li> <li><code>search::queryOptions</code></li> <li><code>search::authorOptions</code></li> <li><code>search::periodOptions</code></li> <li><code>search::displayOptions</code></li> <li><code>search::generalFields</code></li> </ul>"},{"location":"migration/wsc54/deprecations_removals/#miscellaneous","title":"Miscellaneous","text":"<ul> <li>The global option to set a specific style with a request parameter (<code>$_REQUEST['styleID']</code>) is deprecated (WoltLab/WCF@0c0111e946)</li> </ul>"},{"location":"migration/wsc54/deprecations_removals/#removals","title":"Removals","text":""},{"location":"migration/wsc54/deprecations_removals/#php_1","title":"PHP","text":""},{"location":"migration/wsc54/deprecations_removals/#classes_1","title":"Classes","text":"<ul> <li><code>gallery\\util\\ExifUtil</code></li> <li><code>wbb\\action\\BoardQuickSearchAction</code></li> <li><code>wbb\\data\\thread\\NewsList</code></li> <li><code>wbb\\data\\thread\\News</code></li> <li><code>wcf\\action\\PollAction</code> (WoltLab/WCF#4662)</li> <li><code>wcf\\form\\RecaptchaForm</code> (WoltLab/WCF#4289)</li> <li><code>wcf\\system\\background\\job\\ElasticSearchIndexBackgroundJob</code></li> <li><code>wcf\\system\\cache\\builder\\TemplateListenerCacheBuilder</code> (WoltLab/WCF#4297)</li> <li><code>wcf\\system\\log\\modification\\ModificationLogHandler</code> (WoltLab/WCF#4340)</li> <li><code>wcf\\system\\recaptcha\\RecaptchaHandlerV2</code> (WoltLab/WCF#4289)</li> <li><code>wcf\\system\\search\\SearchKeywordManager</code> (WoltLab/WCF#4313)</li> <li>The SCSS compiler\u2019s <code>Leafo</code> class aliases (WoltLab/WCF#4343, Migration Guide from 5.2 to 5.3)</li> </ul>"},{"location":"migration/wsc54/deprecations_removals/#methods_1","title":"Methods","text":"<ul> <li><code>wbb\\data\\board\\BoardCache::getLabelGroups()</code></li> <li><code>wbb\\data\\post\\PostAction::jumpToExtended()</code> (this method always threw a <code>BadMethodCallException</code>)</li> <li><code>wbb\\data\\thread\\ThreadAction::countReplies()</code></li> <li><code>wbb\\data\\thread\\ThreadAction::validateCountReplies()</code></li> <li><code>wcf\\acp\\form\\UserGroupOptionForm::verifyPermissions()</code> (WoltLab/WCF#4312)</li> <li><code>wcf\\data\\conversation\\message\\ConversationMessageAction::jumpToExtended()</code> (WoltLab/com.woltlab.wcf.conversation#162)</li> <li><code>wcf\\data\\moderation\\queue\\ModerationQueueEditor::markAsDone()</code> (WoltLab/WCF#4317)</li> <li><code>wcf\\data\\tag\\TagCloudTag::getSize()</code> (WoltLab/WCF#4325)</li> <li><code>wcf\\data\\tag\\TagCloudTag::setSize()</code> (WoltLab/WCF#4325)</li> <li><code>wcf\\data\\user\\User::getSocialNetworkPrivacySettings()</code> (WoltLab/WCF#4308)</li> <li><code>wcf\\data\\user\\UserAction::getSocialNetworkPrivacySettings()</code> (WoltLab/WCF#4308)</li> <li><code>wcf\\data\\user\\UserAction::saveSocialNetworkPrivacySettings()</code> (WoltLab/WCF#4308)</li> <li><code>wcf\\data\\user\\UserAction::validateGetSocialNetworkPrivacySettings()</code> (WoltLab/WCF#4308)</li> <li><code>wcf\\data\\user\\UserAction::validateSaveSocialNetworkPrivacySettings()</code> (WoltLab/WCF#4308)</li> <li><code>wcf\\data\\user\\avatar\\DefaultAvatar::canCrop()</code> (WoltLab/WCF#4310)</li> <li><code>wcf\\data\\user\\avatar\\DefaultAvatar::getCropImageTag()</code> (WoltLab/WCF#4310)</li> <li><code>wcf\\data\\user\\avatar\\UserAvatar::canCrop()</code> (WoltLab/WCF#4310)</li> <li><code>wcf\\data\\user\\avatar\\UserAvatar::getCropImageTag()</code> (WoltLab/WCF#4310)</li> <li><code>wcf\\system\\bbcode\\BBCodeHandler::setAllowedBBCodes()</code> (WoltLab/WCF#4319)</li> <li><code>wcf\\system\\bbcode\\BBCodeParser::validateBBCodes()</code> (WoltLab/WCF#4319)</li> <li><code>wcf\\system\\breadcrumb\\Breadcrumbs::add()</code> (WoltLab/WCF#4298)</li> <li><code>wcf\\system\\breadcrumb\\Breadcrumbs::remove()</code> (WoltLab/WCF#4298)</li> <li><code>wcf\\system\\breadcrumb\\Breadcrumbs::replace()</code> (WoltLab/WCF#4298)</li> <li><code>wcf\\system\\form\\builder\\IFormNode::create()</code> (Removal from Interface, see WoltLab/WCF#4468)</li> <li><code>wcf\\system\\form\\builder\\IFormNode::validateAttribute()</code> (Removal from Interface, see WoltLab/WCF#4468)</li> <li><code>wcf\\system\\form\\builder\\IFormNode::validateClass()</code> (Removal from Interface, see WoltLab/WCF#4468)</li> <li><code>wcf\\system\\form\\builder\\IFormNode::validateId()</code> (Removal from Interface, see WoltLab/WCF#4468)</li> <li><code>wcf\\system\\form\\builder\\field\\IAttributeFormField::validateFieldAttribute()</code> (Removal from Interface, see WoltLab/WCF#4468)</li> <li><code>wcf\\system\\form\\builder\\field\\dependency\\IFormFieldDependency::create()</code> (Removal from Interface, see WoltLab/WCF#4468)</li> <li><code>wcf\\system\\form\\builder\\field\\validation\\IFormFieldValidator::validateId()</code> (Removal from Interface, see WoltLab/WCF#4468)</li> <li><code>wcf\\system\\message\\embedded\\object\\MessageEmbeddedObjectManager::parseTemporaryMessage()</code> (WoltLab/WCF#4299)</li> <li><code>wcf\\system\\package\\PackageArchive::getPhpRequirements()</code> (WoltLab/WCF#4311)</li> <li><code>wcf\\system\\search\\ISearchIndexManager::add()</code> (Removal from Interface, see WoltLab/WCF#4508)</li> <li><code>wcf\\system\\search\\ISearchIndexManager::update()</code> (Removal from Interface, see WoltLab/WCF#4508)</li> <li><code>wcf\\system\\search\\elasticsearch\\ElasticsearchHandler::_add()</code></li> <li><code>wcf\\system\\search\\elasticsearch\\ElasticsearchHandler::_delete()</code></li> <li><code>wcf\\system\\search\\elasticsearch\\ElasticsearchHandler::add()</code></li> <li><code>wcf\\system\\search\\elasticsearch\\ElasticsearchHandler::bulkAdd()</code></li> <li><code>wcf\\system\\search\\elasticsearch\\ElasticsearchHandler::bulkDelete()</code></li> <li><code>wcf\\system\\search\\elasticsearch\\ElasticsearchHandler::delete()</code></li> <li><code>wcf\\system\\search\\elasticsearch\\ElasticsearchHandler::update()</code></li> <li><code>wcf\\system\\search\\elasticsearch\\ElasticsearchSearchIndexManager::add()</code></li> <li><code>wcf\\system\\search\\elasticsearch\\ElasticsearchSearchIndexManager::update()</code></li> <li><code>wcf\\system\\search\\elasticsearch\\ElasticsearchSearchEngine::parseSearchQuery()</code></li> </ul>"},{"location":"migration/wsc54/deprecations_removals/#properties_1","title":"Properties","text":"<ul> <li><code>wcf\\data\\category\\Category::$permissions</code> (WoltLab/WCF#4303)</li> <li><code>wcf\\system\\search\\elasticsearch\\ElasticsearchSearchIndexManager::$bulkTypeName</code></li> </ul>"},{"location":"migration/wsc54/deprecations_removals/#constants_1","title":"Constants","text":"<ul> <li><code>wcf\\system\\search\\elasticsearch\\ElasticsearchHandler::HEAD</code></li> <li><code>wcf\\system\\tagging\\TagCloud::MAX_FONT_SIZE</code> (WoltLab/WCF#4325)</li> <li><code>wcf\\system\\tagging\\TagCloud::MIN_FONT_SIZE</code> (WoltLab/WCF#4325)</li> </ul>"},{"location":"migration/wsc54/deprecations_removals/#options_1","title":"Options","text":"<ul> <li><code>ENABLE_CENSORSHIP</code> (always call <code>Censorship::test()</code>, see WoltLab/WCF#4567)</li> <li><code>MODULE_SYSTEM_RECAPTCHA</code> (WoltLab/WCF#4305)</li> <li><code>PROFILE_MAIL_USE_CAPTCHA</code> (WoltLab/WCF#4399)</li> <li>The <code>may</code> value for <code>MAIL_SMTP_STARTTLS</code> (WoltLab/WCF#4398)</li> <li><code>SEARCH_USE_CAPTCHA</code> (see WoltLab/WCF#4605)</li> </ul>"},{"location":"migration/wsc54/deprecations_removals/#files","title":"Files","text":"<ul> <li><code>acp/dereferrer.php</code></li> </ul>"},{"location":"migration/wsc54/deprecations_removals/#javascript_1","title":"JavaScript","text":"<ul> <li><code>Blog.Entry.QuoteHandler</code> (use <code>WoltLabSuite/Blog/Ui/Entry/Quote</code>)</li> <li><code>Calendar.Event.QuoteHandler</code> (use <code>WoltLabSuite/Calendar/Ui/Event/Quote</code>)</li> <li><code>WBB.Board.IgnoreBoards</code> (use <code>WoltLabSuite/Forum/Ui/Board/Ignore</code>)</li> <li><code>WBB.Board.MarkAllAsRead</code> (use <code>WoltLabSuite/Forum/Ui/Board/MarkAllAsRead</code>)</li> <li><code>WBB.Board.MarkAsRead</code> (use <code>WoltLabSuite/Forum/Ui/Board/MarkAsRead</code>)</li> <li><code>WBB.Post.QuoteHandler</code> (use <code>WoltLabSuite/Forum/Ui/Post/Quote</code>)</li> <li><code>WBB.Thread.LastPageHandler</code> (use <code>WoltLabSuite/Forum/Ui/Thread/LastPageHandler</code>)</li> <li><code>WBB.Thread.MarkAsRead</code> (use <code>WoltLabSuite/Forum/Ui/Thread/MarkAsRead</code>)</li> <li><code>WBB.Thread.SimilarThreads</code> (use <code>WoltLabSuite/Forum/Ui/Thread/SimilarThreads</code>)</li> <li><code>WBB.Thread.WatchedThreadList</code> (use <code>WoltLabSuite/Forum/Controller/Thread/WatchedList</code>)</li> <li><code>WCF.ACP.Style.ImageUpload</code> (WoltLab/WCF#4323)</li> <li><code>WCF.ColorPicker</code> (see migration guide for <code>WCF.ColorPicker</code>)</li> <li><code>WCF.Conversation.Message.QuoteHandler</code> (use <code>WoltLabSuite/Core/Conversation/Ui/Message/Quote</code>, see WoltLab/com.woltlab.wcf.conversation#155)</li> <li><code>WCF.Like.js</code> (WoltLab/WCF#4300)</li> <li><code>WCF.Message.UserMention</code> (WoltLab/WCF#4324)</li> <li><code>WCF.Poll.Manager</code> (WoltLab/WCF#4662)</li> <li><code>WCF.UserPanel</code> (WoltLab/WCF#4316)</li> <li><code>WCF.User.Panel.Moderation</code> (WoltLab/WCF#4603)</li> <li><code>WCF.User.Panel.Notification</code> (WoltLab/WCF#4603)</li> <li><code>WCF.User.Panel.UserMenu</code> (WoltLab/WCF#4603)</li> </ul>"},{"location":"migration/wsc54/deprecations_removals/#phrases","title":"Phrases","text":"<ul> <li><code>wbb.search.boards.all</code></li> <li><code>wcf.global.form.error.greaterThan.javaScript</code> (WoltLab/WCF#4306)</li> <li><code>wcf.global.form.error.lessThan.javaScript</code> (WoltLab/WCF#4306)</li> <li><code>wcf.search.type.keywords</code></li> <li><code>wcf.acp.option.search_use_captcha</code></li> <li><code>wcf.search.query.description</code></li> <li><code>wcf.search.results.change</code></li> <li><code>wcf.search.results.description</code></li> <li><code>wcf.search.general</code></li> <li><code>wcf.search.query</code></li> <li><code>wcf.search.error.noMatches</code></li> <li><code>wcf.search.error.user.noMatches</code></li> </ul>"},{"location":"migration/wsc54/deprecations_removals/#templates_1","title":"Templates","text":""},{"location":"migration/wsc54/deprecations_removals/#templates_2","title":"Templates","text":"<ul> <li><code>searchResult</code></li> </ul>"},{"location":"migration/wsc54/deprecations_removals/#template-events_1","title":"Template Events","text":"<ul> <li><code>search::tabMenuTabs</code></li> <li><code>search::sections</code></li> <li><code>tagSearch::tabMenuTabs</code></li> <li><code>tagSearch::sections</code></li> </ul>"},{"location":"migration/wsc54/deprecations_removals/#miscellaneous_1","title":"Miscellaneous","text":"<ul> <li>Object specific VisitTracker lifetimes (WoltLab/WCF#4757)</li> </ul>"},{"location":"migration/wsc54/forum_subscriptions/","title":"Migrating from WSC 5.4 - WoltLab Suite Forum","text":""},{"location":"migration/wsc54/forum_subscriptions/#subscriptions","title":"Subscriptions","text":"<p>With WoltLab Suite Forum 5.5 we have introduced a new system for subscribing to threads and boards, which also offers the possibility to ignore threads and boards. You can learn more about this feature in our blog. The new system uses a separate mechanism to track the subscribed forums as well as the subscribed threads. The previously used object type <code>com.woltlab.wcf.user.objectWatch</code> is now discontinued, because the object watch system turned out to be too limited for the complex logic behind thread and forum subscriptions.</p>"},{"location":"migration/wsc54/forum_subscriptions/#subscribe-to-threads","title":"Subscribe to Threads","text":"<p>Previously:</p> <pre><code>$action = new UserObjectWatchAction([], 'subscribe', [\n    'data' =&gt; [\n        'objectID' =&gt; $threadID,\n        'objectType' =&gt; 'com.woltlab.wbb.thread',\n    ]\n]);\n$action-&gt;executeAction();\n</code></pre> <p>Now:</p> <pre><code>ThreadStatusHandler::saveSubscriptionStatus(\n    $threadID,\n    ThreadStatusHandler::SUBSCRIPTION_MODE_WATCHING\n);\n</code></pre>"},{"location":"migration/wsc54/forum_subscriptions/#filter-ignored-threads","title":"Filter Ignored Threads","text":"<p>To filter ignored threads from a given <code>ThreadList</code>, you can use the method <code>ThreadStatusHandler::addFilterForIgnoredThreads()</code> to append the filter for ignored threads. The <code>ViewableThreadList</code> filters out ignored threads by default.</p> <p>Example:</p> <pre><code>$user = new User(123);\n$threadList = new ThreadList();\nThreadStatusHandler::addFilterForIgnoredThreads(\n    $threadList,\n    // This parameter specifies the target user. Defaults to the current user if the parameter\n    // is omitted or `null`.\n    $user\n);\n$threadList-&gt;readObjects();\n</code></pre>"},{"location":"migration/wsc54/forum_subscriptions/#filter-ignored-users","title":"Filter Ignored Users","text":"<p>Avoid issuing notifications to users that have ignored the target thread by filtering those out.</p> <pre><code>$userIDs = [1, 2, 3];\n$users = ThreadStatusHandler::filterIgnoredUserIDs(\n    $userIDs,\n    $thread-&gt;threadID\n);\n</code></pre>"},{"location":"migration/wsc54/forum_subscriptions/#subscribe-to-boards","title":"Subscribe to Boards","text":"<p>Previously:</p> <pre><code>$action = new UserObjectWatchAction([], 'subscribe', [\n    'data' =&gt; [\n        'objectID' =&gt; $boardID,\n        'objectType' =&gt; 'com.woltlab.wbb.board',\n    ]\n]);\n$action-&gt;executeAction();\n</code></pre> <p>Now:</p> <pre><code>BoardStatusHandler::saveSubscriptionStatus(\n    $boardID,\n    ThreadStatusHandler::SUBSCRIPTION_MODE_WATCHING\n);\n</code></pre>"},{"location":"migration/wsc54/forum_subscriptions/#filter-ignored-boards","title":"Filter Ignored Boards","text":"<p>Similar to ignored threads you will also have to avoid issuing notifications for boards that a user has ignored.</p> <pre><code>$userIDs = [1, 2, 3];\n$users = BoardStatusHandler::filterIgnoredUserIDs(\n    $userIDs,\n    $board-&gt;boardID\n);\n</code></pre>"},{"location":"migration/wsc54/javascript/","title":"Migrating from WSC 5.4 - TypeScript and JavaScript","text":""},{"location":"migration/wsc54/javascript/#ajaxdboaction","title":"<code>Ajax.dboAction()</code>","text":"<p>We have introduced a new <code>Promise</code> based API for the interaction with <code>wcf\\data\\DatabaseObjectAction</code>. It provides full IDE autocompletion support and transparent error handling, but is designed to be used with <code>DatabaseObjectAction</code> only.</p> <p>See the documentation for the new API and WoltLab/WCF#4585 for details.</p>"},{"location":"migration/wsc54/javascript/#wcfcolorpicker","title":"<code>WCF.ColorPicker</code>","text":"<p>We have replaced the old jQuery-based color picker <code>WCF.ColorPicker</code> with a more lightweight replacement <code>WoltLabSuite/Core/Ui/Color/Picker</code>, which uses the build-in <code>input[type=color]</code> field. To support transparency, which <code>input[type=color]</code> does not, we also added a slider to set the alpha value. <code>WCF.ColorPicker</code> has been adjusted to internally use <code>WoltLabSuite/Core/Ui/Color/Picker</code> and it has been deprecated.</p> <p>Be aware that the new color picker requires the following new phrases to be available in the TypeScript/JavaScript code:</p> <ul> <li><code>wcf.style.colorPicker.alpha</code>,</li> <li><code>wcf.style.colorPicker.color</code>,</li> <li><code>wcf.style.colorPicker.error.invalidColor</code>,</li> <li><code>wcf.style.colorPicker.hexAlpha</code>,</li> <li><code>wcf.style.colorPicker.new</code>.</li> </ul> <p>See WoltLab/WCF#4353 for details.</p>"},{"location":"migration/wsc54/javascript/#codemirror","title":"CodeMirror","text":"<p>The bundled version of CodeMirror was updated and should be loaded using the AMD loader going forward.</p> <p>See the third party libraries migration guide for details.</p>"},{"location":"migration/wsc54/javascript/#new-user-menu","title":"New User Menu","text":"<p>The legacy implementation <code>WCF.User.Panel.Abstract</code> was based on jQuery and has now been retired in favor of a new lightweight implementation that provides a clean interface and improved accessibility. You are strongly encouraged to migrate your existing implementation to integrate with existing menus.</p> <p>Please use <code>WoltLabSuite/Core/Ui/User/Menu/Data/ModerationQueue.ts</code> as a template for your own implementation, it contains only strictly the code you will need. It makes use of the new <code>Ajax.dboAction()</code> (see above) for improved readability and flexibility.</p> <p>You must update your trigger button to include the <code>role</code>, <code>tabindex</code> and ARIA attributes! Please take a look at the links in <code>pageHeaderUser.tpl</code> to see these four attributes in action.</p> <p>See WoltLab/WCF#4603 for details.</p>"},{"location":"migration/wsc54/libraries/","title":"Migrating from WSC 5.4 - Third Party Libraries","text":""},{"location":"migration/wsc54/libraries/#symfony-php-polyfills","title":"Symfony PHP Polyfills","text":"<p>WoltLab Suite 5.5 ships with Symfony's PHP 7.3, 7.4, and 8.0 polyfills. These polyfills allow you to reliably use some of the PHP functions only available in PHP versions that are newer than the current minimum of PHP 7.2. Notable mentions are <code>str_starts_with</code>, <code>str_ends_with</code>, <code>array_key_first</code>, and <code>array_key_last</code>.</p> <p>Refer to the documentation within the symfony/polyfill repository for details.</p>"},{"location":"migration/wsc54/libraries/#scssphp","title":"scssphp","text":"<p>scssphp was updated from version 1.4 to 1.10.</p> <p>If you interact with scssphp only by deploying <code>.scss</code> files, then you should not experience any breaking changes, except when the improved SCSS compatibility interprets your SCSS code differently.</p> <p>If you happen to directly use scssphp in your PHP code, you should be aware that scssphp deprecated the use of the <code>compile()</code> method, non-UTF-8 processing and also adjusted the handling of pure PHP values for variable handling.</p> <p>Refer to WoltLab/WCF#4345 and the scssphp releases for details.</p>"},{"location":"migration/wsc54/libraries/#emogrifier-css-inliner","title":"Emogrifier / CSS Inliner","text":"<p>The Emogrifier library was updated from version 5.0 to 6.0.</p>"},{"location":"migration/wsc54/libraries/#codemirror","title":"CodeMirror","text":"<p>CodeMirror, the code editor we use for editing templates and SCSS, for example, has been updated to version 5.61.1 and we now also deliver all supported languages/modes. To properly support all languages/modes, CodeMirror is now loaded via the AMD module loader, which requires the original structure of the CodeMirror package, i.e. <code>codemirror.js</code> being in a <code>lib</code> folder. To preserve backward-compatibility, we also keep copies of <code>codemirror.js</code> and <code>codemirror.css</code> in version 5.61.1 directly in <code>js/3rdParty/codemirror</code>. These files are, however, considered deprecated and you should migrate to using <code>require()</code> (see <code>codemirror</code> ACP template).</p> <p>See WoltLab/WCF#4277 for details.</p>"},{"location":"migration/wsc54/libraries/#zendprogressbar","title":"Zend/ProgressBar","text":"<p>The old bundled version of Zend/ProgressBar was replaced by a current version of laminas-progressbar.</p> <p>Due to laminas-zendframework-bridge this update is a drop-in replacement. Existing code should continue to work as-is.</p> <p>It is recommended to cleanly migrate to laminas-progressbar to allow for a future removal of the bridge. Updating the <code>use</code> imports should be sufficient to switch to the laminas-progressbar.</p> <p>See WoltLab/WCF#4460 for details.</p>"},{"location":"migration/wsc54/php/","title":"Migrating from WSC 5.4 - PHP","text":""},{"location":"migration/wsc54/php/#initial-psr-7-support","title":"Initial PSR-7 support","text":"<p>WoltLab Suite will incrementally add support for object oriented request/response handling based off the PSR-7 and PSR-15 standards in the upcoming versions.</p> <p>WoltLab Suite 5.5 adds initial support by allowing to define the response using objects implementing the PSR-7 <code>ResponseInterface</code>. If a controller returns such a response object from its <code>__run()</code> method, this response will automatically emitted to the client.</p> <p>Any PSR-7 implementation is supported, but WoltLab Suite 5.5 ships with laminas-diactoros as the recommended \u201cbatteries included\u201d implementation of PSR-7.</p> <p>Support for PSR-7 requests and PSR-15 middlewares is expected to follow in future versions.</p> <p>See WoltLab/WCF#4437 for details.</p>"},{"location":"migration/wsc54/php/#recommended-changes-for-woltlab-suite-55","title":"Recommended changes for WoltLab Suite 5.5","text":"<p>With the current support in WoltLab Suite 5.5 it is recommended to migrate the <code>*Action</code> classes to make use of PSR-7 responses. Control and data flow is typically fairly simple in <code>*Action</code> classes with most requests ending up in either a redirect or a JSON response, commonly followed by a call to <code>exit;</code>.</p> <p>Experimental support for <code>*Page</code> and <code>*Form</code> is available. It is recommended to wait for a future version before migrating these types of controllers.</p>"},{"location":"migration/wsc54/php/#migrating-redirects","title":"Migrating Redirects","text":"<p>Previously:</p> lib/action/ExampleRedirectAction.class.php<pre><code>&lt;?php\n\nnamespace wcf\\action;\n\nuse wcf\\system\\request\\LinkHandler;\nuse wcf\\util\\HeaderUtil;\n\nfinal class ExampleRedirectAction extends AbstractAction\n{\n    public function execute()\n    {\n        parent::execute();\n\n        // Redirect to the landing page.\n        HeaderUtil::redirect(\n            LinkHandler::getInstance()-&gt;getLink()\n        );\n\n        exit;\n    }\n}\n</code></pre> <p>Now:</p> lib/action/ExampleRedirectAction.class.php<pre><code>&lt;?php\n\nnamespace wcf\\action;\n\nuse Laminas\\Diactoros\\Response\\RedirectResponse;\nuse wcf\\system\\request\\LinkHandler;\n\nfinal class ExampleRedirectAction extends AbstractAction\n{\n    public function execute()\n    {\n        parent::execute();\n\n        // Redirect to the landing page.\n        return new RedirectResponse(\n            LinkHandler::getInstance()-&gt;getLink()\n        );\n    }\n}\n</code></pre>"},{"location":"migration/wsc54/php/#migrating-json-responses","title":"Migrating JSON responses","text":"<p>Previously:</p> lib/action/ExampleJsonAction.class.php<pre><code>&lt;?php\n\nnamespace wcf\\action;\n\nuse wcf\\util\\JSON;\n\nfinal class ExampleJsonAction extends AbstractAction\n{\n    public function execute()\n    {\n        parent::execute();\n\n        \\header('Content-type: application/json; charset=UTF-8');\n\n        echo JSON::encode([\n            'foo' =&gt; 'bar',\n        ]);\n\n        exit;\n    }\n}\n</code></pre> <p>Now:</p> lib/action/ExampleJsonAction.class.php<pre><code>&lt;?php\n\nnamespace wcf\\action;\n\nuse Laminas\\Diactoros\\Response\\JsonResponse;\n\nfinal class ExampleJsonAction extends AbstractAction\n{\n    public function execute()\n    {\n        parent::execute();\n\n        return new JsonResponse([\n            'foo' =&gt; 'bar',\n        ]);\n    }\n}\n</code></pre>"},{"location":"migration/wsc54/php/#events","title":"Events","text":"<p>Historically, events were tightly coupled with a single class, with the event object being an object of this class, expecting the event listener to consume public properties and method of the event object. The <code>$parameters</code> array was introduced due to limitations of this pattern, avoiding moving all the values that might be of interest to the event listener into the state of the object. Events were still tightly coupled with the class that fired the event and using the opaque parameters array prevented IDEs from assisting with autocompletion and typing.</p> <p>WoltLab Suite 5.5 introduces the concept of dedicated, reusable event classes. Any newly introduced event will receive a dedicated class, implementing the <code>wcf\\system\\event\\IEvent</code> interface. These event classes may be fired from multiple locations, making them reusable to convey that a conceptual action happened, instead of a specific class doing something. An example for using the new event system could be a user logging in: Instead of listening on a the login form being submitted and the Facebook login action successfully running, an event <code>UserLoggedIn</code> might be fired whenever a user logs in, no matter how the login is performed.</p> <p>Additionally, these dedicated event classes will benefit from full IDE support. All the relevant values may be stored as real properties on the event object.</p> <p>Event classes should not have an <code>Event</code> suffix and should be stored in an <code>event</code> namespace in a matching location. Thus, the <code>UserLoggedIn</code> example might have a FQCN of <code>\\wcf\\system\\user\\authentication\\event\\UserLoggedIn</code>.</p> <p>Event listeners for events implementing <code>IEvent</code> need to follow PSR-14, i.e. they need to be callable. In practice, this means that the event listener class needs to implement <code>__invoke()</code>. No interface has to be implemented in this case.</p> <p>Previously:</p> <pre><code>$parameters = [\n    'value' =&gt; \\random_int(1, 1024),\n];\n\nEventHandler::getInstance()-&gt;fireAction($this, 'valueAvailable', $parameters);\n</code></pre> lib/system/event/listener/ValueDumpListener.class.php<pre><code>&lt;?php\n\nnamespace wcf\\system\\event\\listener;\n\nuse wcf\\form\\ValueForm;\n\nfinal class ValueDumpListener implements IParameterizedEventListener\n{\n    /**\n     * @inheritDoc\n     * @param ValueForm $eventObj\n     */\n    public function execute($eventObj, $className, $eventName, array &amp;$parameters)\n    {\n        var_dump($parameters['value']);\n    }\n}\n</code></pre> <p>Now:</p> <pre><code>EventHandler::getInstance()-&gt;fire(new ValueAvailable(\\random_int(1, 1024)));\n</code></pre> lib/system/foo/event/ValueAvailable.class.php<pre><code>&lt;?php\n\nnamespace wcf\\system\\foo\\event;\n\nuse wcf\\system\\event\\IEvent;\n\nfinal class ValueAvailable implements IEvent\n{\n    /**\n     * @var int\n     */\n    private $value;\n\n    public function __construct(int $value)\n    {\n        $this-&gt;value = $value;\n    }\n\n    public function getValue(): int\n    {\n        return $this-&gt;value;\n    }\n}\n</code></pre> lib/system/event/listener/ValueDumpListener.class.php<pre><code>&lt;?php\n\nnamespace wcf\\system\\event\\listener;\n\nuse wcf\\system\\foo\\event\\ValueAvailable;\n\nfinal class ValueDumpListener\n{\n    public function __invoke(ValueAvailable $event): void\n    {\n        \\var_dump($event-&gt;getValue());\n    }\n}\n</code></pre> <p>See WoltLab/WCF#4000 and WoltLab/WCF#4265 for details.</p>"},{"location":"migration/wsc54/php/#authentication","title":"Authentication","text":"<p>The <code>UserLoggedIn</code> event was added. You should fire this event if you implement a custom login process (e.g. when adding additional external authentication providers).</p> <p>Example:</p> <pre><code>EventHandler::getInstance()-&gt;fire(\n    new UserLoggedIn($user)\n);\n</code></pre> <p>See WoltLab/WCF#4356 for details.</p>"},{"location":"migration/wsc54/php/#embedded-objects-in-comments","title":"Embedded Objects in Comments","text":"<p>WoltLab/WCF#4275 added support for embedded objects like mentions for comments and comment responses. To properly render embedded objects whenever you are using comments in your packages, you have to use <code>ViewableCommentList</code>/<code>ViewableCommentResponseList</code> in these places or <code>ViewableCommentRuntimeCache</code>/<code>ViewableCommentResponseRuntimeCache</code>. While these runtime caches are only available since version 5.5, the viewable list classes have always been available so that changing <code>CommentList</code> to <code>ViewableCommentList</code>, for example, is a backwards-compatible change.</p>"},{"location":"migration/wsc54/php/#emails","title":"Emails","text":""},{"location":"migration/wsc54/php/#mailbox","title":"Mailbox","text":"<p>The <code>Mailbox</code> and <code>UserMailbox</code> classes no longer store the passed <code>Language</code> and <code>User</code> objects, but the respective ID instead. This change reduces the size of the serialized email when stored in the background queue.</p> <p>If you inherit from the <code>Mailbox</code> or <code>UserMailbox</code> classes, you might experience issues if you directly access the <code>$this-&gt;language</code> or <code>$this-&gt;user</code> properties. Adjust your class to use composition instead of inheritance if possible. Use the <code>getLanguage()</code> or <code>getUser()</code> getters if using composition is not possible.</p> <p>See WoltLab/WCF#4389 for details.</p>"},{"location":"migration/wsc54/php/#smtp","title":"SMTP","text":"<p>The <code>SmtpEmailTransport</code> no longer supports a value of <code>may</code> for the <code>$starttls</code> property.</p> <p>Using the <code>may</code> value is unsafe as it allows for undetected MITM attacks. The use of <code>encrypt</code> is recommended, unless it is certain that the SMTP server does not support TLS.</p> <p>See WoltLab/WCF#4398 for details.</p>"},{"location":"migration/wsc54/php/#search","title":"Search","text":""},{"location":"migration/wsc54/php/#search-form","title":"Search Form","text":"<p>After the overhaul of the search form, search providers are no longer bound to <code>SearchForm</code> and <code>SearchResultPage</code>. The interface <code>ISearchObjectType</code> and the abstract implementation <code>AbstractSearchableObjectType</code> have been replaced by <code>ISearchProvider</code> and <code>AbstractSearchProvider</code>.</p> <p>Please use <code>ArticleSearch</code> as a template for your own implementation</p> <p>See WoltLab/WCF#4605 for details.</p>"},{"location":"migration/wsc54/php/#exceptions","title":"Exceptions","text":"<p>A new <code>wcf\\system\\search\\exception\\SearchFailed</code> exception was added. This exception should be thrown when executing the search query fails for (mostly) temporary reasons, such as a network partition to a remote service. It is not meant as a blanket exception to wrap everything. For example it must not be returned obvious programming errors, such as an access to an undefined variable (<code>ErrorException</code>).</p> <p>Catching the <code>SearchFailed</code> exception allows consuming code to gracefully handle search requests that are not essential for proceeding, without silencing other types of error.</p> <p>See WoltLab/WCF#4476 and WoltLab/WCF#4483 for details.</p>"},{"location":"migration/wsc54/php/#package-installation-plugins","title":"Package Installation Plugins","text":""},{"location":"migration/wsc54/php/#database","title":"Database","text":"<p>WoltLab Suite 5.5 changes the factory classes for common configurations of database columns within the PHP-based DDL API to contain a private constructor, preventing object creation.</p> <p>This change affects the following classes:</p> <ul> <li><code>DefaultFalseBooleanDatabaseTableColumn</code></li> <li><code>DefaultTrueBooleanDatabaseTableColumn</code></li> <li><code>NotNullInt10DatabaseTableColumn</code></li> <li><code>NotNullVarchar191DatabaseTableColumn</code></li> <li><code>NotNullVarchar255DatabaseTableColumn</code></li> <li> <p><code>ObjectIdDatabaseTableColumn</code></p> </li> <li> <p><code>DatabaseTablePrimaryIndex</code></p> </li> </ul> <p>The static <code>create()</code> method never returned an object of the factory class, but instead in object of the base type (e.g. <code>IntDatabaseTableColumn</code> for <code>NotNullInt10DatabaseTableColumn</code>). Constructing an object of these factory classes is considered a bug, as the class name implies a specific column configuration, that might or might not hold if the object is modified afterwards.</p> <p>See WoltLab/WCF#4564 for details.</p> <p>WoltLab Suite 5.5 adds the <code>IDefaultValueDatabaseTableColumn</code> interface which is used to check whether specifying a default value is legal. For backwards compatibility this interface is implemented by <code>AbstractDatabaseTableColumn</code>. You should explicitly add this interface to custom table column type classes to avoid breakage if the interface is removed from <code>AbstractDatabaseTableColumn</code> in a future version. Likewise you should explicitly check for the interface before attempting to access the methods related to the default value of a column.</p> <p>See WoltLab/WCF#4733 for details.</p>"},{"location":"migration/wsc54/php/#file-deletion","title":"File Deletion","text":"<p>Three new package installation plugins have been added to delete ACP templates with acpTemplateDelete, files with fileDelete, and templates with templateDelete.</p>"},{"location":"migration/wsc54/php/#language","title":"Language","text":"<p>WoltLab/WCF#4261 has added support for deleting existing phrases with the <code>language</code> package installation plugin.</p> <p>The current structure of the language XML files</p> language/en.xml <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;language xmlns=\"http://www.woltlab.com\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.woltlab.com http://www.woltlab.com/XSD/5.4/language.xsd\" languagecode=\"en\" languagename=\"English\" countrycode=\"gb\"&gt;\n&lt;category name=\"wcf.foo\"&gt;\n&lt;item name=\"wcf.foo.bar\"&gt;&lt;![CDATA[Bar]]&gt;&lt;/item&gt;\n&lt;/category&gt;\n&lt;/language&gt;\n</code></pre> <p>is deprecated and should be replaced with the new structure with an explicit <code>&lt;import&gt;</code> element like in the other package installation plugins:</p> language/en.xml <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;language xmlns=\"http://www.woltlab.com\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.woltlab.com http://www.woltlab.com/XSD/5.4/language.xsd\" languagecode=\"en\" languagename=\"English\" countrycode=\"gb\"&gt;\n&lt;import&gt;\n&lt;category name=\"wcf.foo\"&gt;\n&lt;item name=\"wcf.foo.bar\"&gt;&lt;![CDATA[Bar]]&gt;&lt;/item&gt;\n&lt;/category&gt;\n&lt;/import&gt;\n&lt;/language&gt;\n</code></pre> <p>Additionally, to now also support deleting phrases with this package installation plugin, support for a <code>&lt;delete&gt;</code> element has been added:</p> language/en.xml <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;language xmlns=\"http://www.woltlab.com\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.woltlab.com http://www.woltlab.com/XSD/5.4/language.xsd\" languagecode=\"en\" languagename=\"English\" countrycode=\"gb\"&gt;\n&lt;import&gt;\n&lt;category name=\"wcf.foo\"&gt;\n&lt;item name=\"wcf.foo.bar\"&gt;&lt;![CDATA[Bar]]&gt;&lt;/item&gt;\n&lt;/category&gt;\n&lt;/import&gt;\n&lt;delete&gt;\n&lt;item name=\"wcf.foo.barrr\"/&gt;\n&lt;/delete&gt;\n&lt;/language&gt;\n</code></pre> <p>Note that when deleting phrases, the category does not have to be specified because phrase identifiers are unique globally.</p> <p>Mixing the old structure and the new structure is not supported and will result in an error message during the import!</p>"},{"location":"migration/wsc54/php/#board-and-thread-subscriptions","title":"Board and Thread Subscriptions","text":"<p>WoltLab Suite Forum 5.5 updates the subscription logic for boards and threads to properly support the ignoring of threads. See the dedicated migration guide for details.</p>"},{"location":"migration/wsc54/php/#miscellaneous-changes","title":"Miscellaneous Changes","text":""},{"location":"migration/wsc54/php/#view-counters","title":"View Counters","text":"<p>With WoltLab Suite 5.5 it is expected that view/download counters do not increase for disabled content.</p> <p>See WoltLab/WCF#4374 for details.</p>"},{"location":"migration/wsc54/php/#form-builder","title":"Form Builder","text":"<ul> <li><code>ValueIntervalFormFieldDependency</code></li> <li><code>ColorFormField</code></li> <li><code>MultipleBoardSelectionFormField</code></li> </ul>"},{"location":"migration/wsc54/templates/","title":"Migrating from WSC 5.4 - Templates","text":""},{"location":"migration/wsc54/templates/#content-interaction-buttons","title":"Content Interaction Buttons","text":"<p>Content interactions buttons are a new way to display action buttons at the top of the page. They are intended to replace the icons in <code>pageNavigationIcons</code> for better accessibility while reducing the amount of buttons in <code>contentHeaderNavigation</code>.</p> <p>As a rule of thumb, there should be at most only one button in <code>contentHeaderNavigation</code> (primary action on this page) and three buttons in <code>contentInteractionButtons</code> (important actions on this page). Use <code>contentInteractionDropdownItems</code> for all other buttons.</p> <p>The template <code>contentInteraction</code> is included in the header and the corresponding placeholders are thus available on every page.</p> <p>See WoltLab/WCF#4315 for details.</p>"},{"location":"migration/wsc54/templates/#phrase-modifier","title":"Phrase Modifier","text":"<p>The <code>|language</code> modifier was added to allow the piping of the phrase through other functions. This has some unwanted side effects when used with plain strings that should not support variable interpolation. Another difference to <code>{lang}</code> is the evaluation on runtime rather than at compile time, allowing the phrase to be taken from a variable instead.</p> <p>We introduces the new modifier <code>|phrase</code> as a thin wrapper around <code>\\wcf\\system::WCF::getLanguage()-&gt;get()</code>. Use <code>|phrase</code> instead of <code>|language</code> unless you want to explicitly allow template scripting on a variable's output.</p> <p>See WoltLab/WCF#4657 for details.</p>"},{"location":"package/database-php-api/","title":"Database PHP API","text":"<p>While the sql package installation plugin supports adding and removing tables, columns, and indices, it is not able to handle cases where the added table, column, or index already exist. We have added a new PHP-based API to manipulate the database scheme which can be used in combination with the database package installation plugin that skips parts that already exist:</p> <pre><code>return [\n    // list of `DatabaseTable` objects\n];\n</code></pre> <p>All of the relevant components can be found in the <code>wcf\\system\\database\\table</code> namespace.</p>"},{"location":"package/database-php-api/#database-tables","title":"Database Tables","text":"<p>There are two classes representing database tables: <code>DatabaseTable</code> and <code>PartialDatabaseTable</code>. If a new table should be created, use <code>DatabaseTable</code>. In all other cases, <code>PartialDatabaseTable</code> should be used as it provides an additional save-guard against accidentally creating a new table by having a typo in the table name: If the tables does not already exist, a table represented by <code>PartialDatabaseTable</code> will cause an exception (while a <code>DatabaseTable</code> table will simply be created).</p> <p>To create a table, a <code>DatabaseTable</code> object with the table's name as to be created and table's columns, foreign keys and indices have to be specified:</p> <pre><code>DatabaseTable::create('foo1_bar')\n    -&gt;columns([\n        // columns\n    ])\n    -&gt;foreignKeys([\n        // foreign keys\n    ])\n    -&gt;indices([\n        // indices\n    ])\n</code></pre> <p>To update a table, the same code as above can be used, except for <code>PartialDatabaseTable</code> being used instead of <code>DatabaseTable</code>.</p> <p>To drop a table, only the <code>drop()</code> method has to be called:</p> <pre><code>PartialDatabaseTable::create('foo1_bar')\n    -&gt;drop()\n</code></pre>"},{"location":"package/database-php-api/#columns","title":"Columns","text":"<p>To represent a column of a database table, you have to create an instance of the relevant column class found in the <code>wcf\\system\\database\\table\\column</code> namespace. Such instances are created similarly to database table objects using the <code>create()</code> factory method and passing the column name as the parameter.</p> <p>Every column type supports the following methods:</p> <ul> <li><code>defaultValue($defaultValue)</code> sets the default value of the column (default: none).</li> <li><code>drop()</code> to drop the column.</li> <li><code>notNull($notNull = true)</code> sets if the value of the column can be <code>NULL</code> (default: <code>false</code>).</li> </ul> <p>Depending on the specific column class implementing additional interfaces, the following methods are also available:</p> <ul> <li><code>IAutoIncrementDatabaseTableColumn::autoIncrement($autoIncrement = true)</code> sets if the value of the colum is auto-incremented.</li> <li><code>IDecimalsDatabaseTableColumn::decimals($decimals)</code> sets the number of decimals the column supports.</li> <li><code>IEnumDatabaseTableColumn::enumValues(array $values)</code> sets the predetermined set of valid values of the column.</li> <li><code>ILengthDatabaseTableColumn::length($length)</code> sets the (maximum) length of the column.</li> </ul> <p>Additionally, there are some additionally classes of commonly used columns with specific properties:</p> <ul> <li><code>DefaultFalseBooleanDatabaseTableColumn</code> (a <code>tinyint</code> column with length <code>1</code>, default value <code>0</code> and whose values cannot be <code>null</code>)</li> <li><code>DefaultTrueBooleanDatabaseTableColumn</code> (a <code>tinyint</code> column with length <code>1</code>, default value <code>1</code> and whose values cannot be <code>null</code>)</li> <li><code>NotNullInt10DatabaseTableColumn</code> (a <code>int</code> column with length <code>10</code> and whose values cannot be <code>null</code>)</li> <li><code>NotNullVarchar191DatabaseTableColumn</code> (a <code>varchar</code> column with length <code>191</code> and whose values cannot be <code>null</code>)</li> <li><code>NotNullVarchar255DatabaseTableColumn</code> (a <code>varchar</code> column with length <code>255</code> and whose values cannot be <code>null</code>)</li> <li><code>ObjectIdDatabaseTableColumn</code> (a <code>int</code> column with length <code>10</code>, whose values cannot be <code>null</code>, and whose values are auto-incremented)</li> </ul> <p>Examples:</p> <pre><code>DefaultFalseBooleanDatabaseTableColumn::create('isDisabled')\n\nNotNullInt10DatabaseTableColumn::create('fooTypeID')\n\nSmallintDatabaseTableColumn::create('bar')\n    -&gt;length(5)\n    -&gt;notNull()\n</code></pre>"},{"location":"package/database-php-api/#foreign-keys","title":"Foreign Keys","text":"<p>Foreign keys are represented by <code>DatabaseTableForeignKey</code> objects: </p> <pre><code>DatabaseTableForeignKey::create()\n    -&gt;columns(['fooID'])\n    -&gt;referencedTable('wcf1_foo')\n    -&gt;referencedColumns(['fooID'])\n    -&gt;onDelete('CASCADE')\n</code></pre> <p>The supported actions for <code>onDelete()</code> and <code>onUpdate()</code> are <code>CASCADE</code>, <code>NO ACTION</code>, and <code>SET NULL</code>. To drop a foreign key, all of the relevant data to create the foreign key has to be present and the <code>drop()</code> method has to be called.</p> <p><code>DatabaseTableForeignKey::create()</code> also supports the foreign key name as a parameter. If it is not present, <code>DatabaseTable::foreignKeys()</code> will automatically set one based on the foreign key's data.</p>"},{"location":"package/database-php-api/#indices","title":"Indices","text":"<p>Indices are represented by <code>DatabaseTableIndex</code> objects: </p> <pre><code>DatabaseTableIndex::create('fooID')\n    -&gt;type(DatabaseTableIndex::UNIQUE_TYPE)\n    -&gt;columns(['fooID'])\n</code></pre> <p>There are four different types: <code>DatabaseTableIndex::DEFAULT_TYPE</code> (default), <code>DatabaseTableIndex::PRIMARY_TYPE</code>, <code>DatabaseTableIndex::UNIQUE_TYPE</code>, and <code>DatabaseTableIndex::FULLTEXT_TYPE</code>. For primary keys, there is also the <code>DatabaseTablePrimaryIndex</code> class which automatically sets the type to <code>DatabaseTableIndex::PRIMARY_TYPE</code>. To drop a index, all of the relevant data to create the index has to be present and the <code>drop()</code> method has to be called.</p> <p>The index name is specified as the parameter to <code>DatabaseTableIndex::create()</code>. It is strongly recommended to specify an explicit name (WoltLab/WCF#4505). If no name is given, <code>DatabaseTable::indices()</code> will automatically set one based on the index data.</p>"},{"location":"package/package-xml/","title":"package.xml","text":"<p>The <code>package.xml</code> is the core component of every package. It provides the meta data (e.g. package name, description, author) and the instruction set for a new installation and/or updating from a previous version.</p>"},{"location":"package/package-xml/#example","title":"Example","text":"package.xml <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;package name=\"com.example.package\" xmlns=\"http://www.woltlab.com\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.woltlab.com http://www.woltlab.com/XSD/2019/package.xsd\"&gt;\n&lt;packageinformation&gt;\n&lt;packagename&gt;Simple Package&lt;/packagename&gt;\n&lt;packagedescription&gt;A simple package to demonstrate the package system of WoltLab Suite Core&lt;/packagedescription&gt;\n&lt;version&gt;1.0.0&lt;/version&gt;\n&lt;date&gt;2022-01-17&lt;/date&gt;\n&lt;/packageinformation&gt;\n\n&lt;authorinformation&gt;\n&lt;author&gt;YOUR NAME&lt;/author&gt;\n&lt;authorurl&gt;http://www.example.com&lt;/authorurl&gt;\n&lt;/authorinformation&gt;\n\n&lt;requiredpackages&gt;\n&lt;requiredpackage minversion=\"5.4.10\"&gt;com.woltlab.wcf&lt;/requiredpackage&gt;\n&lt;/requiredpackages&gt;\n\n&lt;excludedpackages&gt;\n&lt;excludedpackage version=\"6.0.0 Alpha 1\"&gt;com.woltlab.wcf&lt;/excludedpackage&gt;\n&lt;/excludedpackages&gt;\n\n&lt;instructions type=\"install\"&gt;\n&lt;instruction type=\"file\" /&gt;\n&lt;instruction type=\"template\"&gt;templates.tar&lt;/instruction&gt;\n&lt;/instructions&gt;\n&lt;/package&gt;\n</code></pre>"},{"location":"package/package-xml/#elements","title":"Elements","text":""},{"location":"package/package-xml/#package","title":"<code>&lt;package&gt;</code>","text":"<p>The root node of every <code>package.xml</code> it contains the reference to the namespace and the location of the XML Schema Definition (XSD).</p> <p>The attribute <code>name</code> is the most important part, it holds the unique package identifier and is mandatory. It is based upon your domain name and the package name of your choice.</p> <p>For example WoltLab Suite Forum (formerly know an WoltLab Burning Board and usually abbreviated as <code>wbb</code>) is created by WoltLab which owns the domain <code>woltlab.com</code>. The resulting package identifier is <code>com.woltlab.wbb</code> (<code>&lt;tld&gt;.&lt;domain&gt;.&lt;packageName&gt;</code>).</p>"},{"location":"package/package-xml/#packageinformation","title":"<code>&lt;packageinformation&gt;</code>","text":"<p>Holds the entire meta data of the package.</p>"},{"location":"package/package-xml/#packagename","title":"<code>&lt;packagename&gt;</code>","text":"<p>This is the actual package name displayed to the end user, this can be anything you want, try to keep it short. It supports the attribute <code>language</code> which allows you to provide the package name in different languages, please be aware that if it is not present, <code>en</code> (English) is assumed:</p> <pre><code>&lt;packageinformation&gt;\n&lt;packagename&gt;Simple Package&lt;/packagename&gt;\n&lt;packagename language=\"de\"&gt;Einfaches Paket&lt;/packagename&gt;\n&lt;/packageinformation&gt;\n</code></pre>"},{"location":"package/package-xml/#packagedescription","title":"<code>&lt;packagedescription&gt;</code>","text":"<p>Brief summary of the package, use it to explain what it does since the package name might not always be clear enough. The attribute <code>language</code> can also be used here, please reference to <code>&lt;packagename&gt;</code> for details.</p>"},{"location":"package/package-xml/#version","title":"<code>&lt;version&gt;</code>","text":"<p>The package's version number, this is a string consisting of three numbers separated with a dot and optionally followed by a keyword (must be followed with another number).</p> <p>The possible keywords are:</p> <ul> <li>Alpha/dev (both is regarded to be the same)</li> <li>Beta</li> <li>RC (release candidate)</li> <li>pl (patch level)</li> </ul> <p>Valid examples:</p> <ul> <li>1.0.0</li> <li>1.12.13 Alpha 19</li> <li>7.0.0 pl 3</li> </ul> <p>Invalid examples:</p> <ul> <li>1.0.0 Beta (keyword Beta must be followed by a number)</li> <li>2.0 RC 3 (version number must consists of 3 blocks of numbers)</li> <li>1.2.3 dev 4.5 (4.5 is not an integer, 4 or 5 would be valid but not the fraction)</li> </ul>"},{"location":"package/package-xml/#date","title":"<code>&lt;date&gt;</code>","text":"<p>Must be a valid ISO 8601 date, e.g. <code>2013-12-27</code>.</p>"},{"location":"package/package-xml/#packageurl","title":"<code>&lt;packageurl&gt;</code>","text":"<p>(optional)</p> <p>URL to the package website that provides detailed information about the package.</p>"},{"location":"package/package-xml/#license","title":"<code>&lt;license&gt;</code>","text":"<p>(optional)</p> <p>Name of a generic license type or URL to a custom license. The attribute <code>language</code> can also be used here, please reference to <code>&lt;packagename&gt;</code> for details.</p>"},{"location":"package/package-xml/#authorinformation","title":"<code>&lt;authorinformation&gt;</code>","text":"<p>Holds meta data regarding the package's author.</p>"},{"location":"package/package-xml/#author","title":"<code>&lt;author&gt;</code>","text":"<p>Can be anything you want.</p>"},{"location":"package/package-xml/#authorurl","title":"<code>&lt;authorurl&gt;</code>","text":"<p>(optional)</p> <p>URL to the author's website.</p>"},{"location":"package/package-xml/#requiredpackages","title":"<code>&lt;requiredpackages&gt;</code>","text":"<p>A list of packages including their version required for this package to work.</p>"},{"location":"package/package-xml/#requiredpackage","title":"<code>&lt;requiredpackage&gt;</code>","text":"<p>Example:</p> <pre><code>&lt;requiredpackage minversion=\"2.7.5\" file=\"requirements/com.example.foo.tar\"&gt;com.example.foo&lt;/requiredpackage&gt;\n</code></pre> <p>The attribute <code>minversion</code> must be a valid version number as described in <code>&lt;version&gt;</code>. The <code>file</code> attribute is optional and specifies the location of the required package's archive relative to the <code>package.xml</code>.</p>"},{"location":"package/package-xml/#optionalpackage","title":"<code>&lt;optionalpackage&gt;</code>","text":"<p>A list of optional packages which can be selected by the user at the very end of the installation process.</p>"},{"location":"package/package-xml/#optionalpackage_1","title":"<code>&lt;optionalpackage&gt;</code>","text":"<p>Example:</p> <pre><code>&lt;optionalpackage file=\"optionals/com.example.bar.tar\"&gt;com.example.bar&lt;/optionalpackage&gt;\n</code></pre> <p>The <code>file</code> attribute specifies the location of the optional package's archive relative to the <code>package.xml</code>.</p>"},{"location":"package/package-xml/#excludedpackages","title":"<code>&lt;excludedpackages&gt;</code>","text":"<p>List of packages which conflict with this package. It is not possible to install it if any of the specified packages is installed. In return you cannot install an excluded package if this package is installed.</p>"},{"location":"package/package-xml/#excludedpackage","title":"<code>&lt;excludedpackage&gt;</code>","text":"<p>Example:</p> <pre><code>&lt;excludedpackage version=\"6.0.0 Alpha 1\"&gt;com.woltlab.wcf&lt;/excludedpackage&gt;\n</code></pre> <p>The attribute <code>version</code> must be a valid version number as described in the \\&lt;version&gt; section. In the example above it will be impossible to install this package in WoltLab Suite Core 6.0.0 Alpha 1 or higher.</p>"},{"location":"package/package-xml/#compatibility","title":"<code>&lt;compatibility&gt;</code>","text":"<p>Available since WoltLab Suite 3.1</p> <p>With the release of WoltLab Suite 5.2 the API versions were abolished. Instead of using API versions packages should exclude version <code>6.0.0 Alpha 1</code> of <code>com.woltlab.wcf</code> going forward.</p> <p>WoltLab Suite 3.1 introduced a new versioning system that focused around the API compatibility and is intended to replace the <code>&lt;excludedpackage&gt;</code> instruction for the Core for most plugins.</p> <p>The <code>&lt;compatibility&gt;</code>-tag holds a list of compatible API versions, and while only a single version is available at the time of writing, future versions will add more versions with backwards-compatibility in mind.</p> <p>Example:</p> <pre><code>&lt;compatibility&gt;\n&lt;api version=\"2018\" /&gt;\n&lt;/compatibility&gt;\n</code></pre>"},{"location":"package/package-xml/#existing-api-versions","title":"Existing API versions","text":"WoltLab Suite Core API-Version Backwards-Compatible to API-Version 3.1 2018 n/a"},{"location":"package/package-xml/#instructions","title":"<code>&lt;instructions&gt;</code>","text":"<p>List of instructions to be executed upon install or update. The order is important, the topmost <code>&lt;instruction&gt;</code> will be executed first.</p>"},{"location":"package/package-xml/#instructions-typeinstall","title":"<code>&lt;instructions type=\"install\"&gt;</code>","text":"<p>List of instructions for a new installation of this package.</p>"},{"location":"package/package-xml/#instructions-typeupdate-fromversion","title":"<code>&lt;instructions type=\"update\" fromversion=\"\u2026\"&gt;</code>","text":"<p>The attribute <code>fromversion</code> must be a valid version number as described in the \\&lt;version&gt; section and specifies a possible update from that very version to the package's version.</p> <p>The installation process will pick exactly one update instruction, ignoring everything else. Please read the explanation below!</p> <p>Example:</p> <ul> <li>Installed version: <code>1.0.0</code></li> <li>Package version: <code>1.0.2</code></li> </ul> <pre><code>&lt;instructions type=\"update\" fromversion=\"1.0.0\"&gt;\n&lt;!-- \u2026 --&gt;\n&lt;/instructions&gt;\n&lt;instructions type=\"update\" fromversion=\"1.0.1\"&gt;\n&lt;!-- \u2026 --&gt;\n&lt;/instructions&gt;\n</code></pre> <p>In this example WoltLab Suite Core will pick the first update block since it allows an update from <code>1.0.0 -&gt; 1.0.2</code>. The other block is not considered, since the currently installed version is <code>1.0.0</code>. After applying the update block (<code>fromversion=\"1.0.0\"</code>), the version now reads <code>1.0.2</code>.</p>"},{"location":"package/package-xml/#instruction","title":"<code>&lt;instruction&gt;</code>","text":"<p>Example:</p> <pre><code>&lt;instruction type=\"objectTypeDefinition\"&gt;objectTypeDefinition.xml&lt;/instruction&gt;\n</code></pre> <p>The attribute <code>type</code> specifies the instruction type which is used to determine the package installation plugin (PIP) invoked to handle its value. The value must be a valid file relative to the location of <code>package.xml</code>. Many PIPs provide default file names which are used if no value is given:</p> <pre><code>&lt;instruction type=\"objectTypeDefinition\" /&gt;\n</code></pre> <p>There is a list of all default PIPs available.</p> <p>Both the <code>type</code>-attribute and the element value are case-sensitive. Windows does not care if the file is called <code>objecttypedefinition.xml</code> but was referenced as <code>objectTypeDefinition.xml</code>, but both Linux and Mac systems will be unable to find the file.</p> <p>In addition to the <code>type</code> attribute, an optional <code>run</code> attribute (with <code>standalone</code> as the only valid value) is supported which forces the installation to execute this PIP in an isolated request, allowing a single, resource-heavy PIP to execute without encountering restrictions such as PHP\u2019s <code>memory_limit</code> or <code>max_execution_time</code>:</p> <pre><code>&lt;instruction type=\"file\" run=\"standalone\" /&gt;\n</code></pre>"},{"location":"package/package-xml/#void","title":"<code>&lt;void/&gt;</code>","text":"<p>Sometimes a package update should only adjust the metadata of the package, for example, an optional package was added. However, WoltLab Suite Core requires that the list of <code>&lt;instructions&gt;</code> is non-empty. Instead of using a dummy <code>&lt;instruction&gt;</code> that idempotently updates some PIP, the <code>&lt;void/&gt;</code> tag can be used for this use-case.</p> <p>Using the <code>&lt;void/&gt;</code> tag is only valid for <code>&lt;instructions type=\"update\"&gt;</code> and must not be accompanied by other <code>&lt;instruction&gt;</code> tags.</p> <p>Example:</p> <pre><code>&lt;instructions type=\"update\" fromversion=\"1.0.0\"&gt;\n&lt;void/&gt;\n&lt;/instructions&gt;\n</code></pre>"},{"location":"package/pip/","title":"Package Installation Plugins","text":"<p>Package Installation Plugins (PIPs) are interfaces to deploy and edit content as well as components.</p> <p>For XML-based PIPs: <code>&lt;![CDATA[]]&gt;</code> must be used for language items and page contents. In all other cases it may only be used when necessary.</p>"},{"location":"package/pip/#built-in-pips","title":"Built-In PIPs","text":"Name Description aclOption Customizable permissions for individual objects acpMenu Admin panel menu categories and items acpSearchProvider Data provider for the admin panel search acpTemplate Admin panel templates acpTemplateDelete Deletes admin panel templates installed with acpTemplate bbcode BBCodes for rich message formatting box Boxes that can be placed anywhere on a page clipboardAction Perform bulk operations on marked objects coreObject Access Singletons from within the template cronjob Periodically execute code with customizable intervals database Updates the database layout using the PHP API eventListener Register listeners for the event system file Deploy any type of files with the exception of templates fileDelete Deletes files installed with file language Language items mediaProvider Detect and convert links to media providers menu Side-wide and custom per-page menus menuItem Menu items for menus created through the menu PIP objectType Flexible type registry based on definitions objectTypeDefinition Groups objects and classes by functionality option Side-wide configuration options page Register page controllers and text-based pages pip Package Installation Plugins script Execute arbitrary PHP code during installation, update and uninstallation smiley Smileys sql Execute SQL instructions using a MySQL-flavored syntax (also see database PHP API) style Style template Frontend templates templateDelete Deletes frontend templates installed with template templateListener Embed template code into templates without altering the original userGroupOption Permissions for user groups userMenu User menu categories and items userNotificationEvent Events of the user notification system userOption User settings userProfileMenu User profile tabs"},{"location":"package/pip/acl-option/","title":"ACL Option Package Installation Plugin","text":"<p>Add customizable permissions for individual objects.</p>"},{"location":"package/pip/acl-option/#option-components","title":"Option Components","text":"<p>Each acl option is described as an <code>&lt;option&gt;</code> element with the mandatory attribute <code>name</code>.</p>"},{"location":"package/pip/acl-option/#categoryname","title":"<code>&lt;categoryname&gt;</code>","text":"<p>Optional</p> <p>The name of the acl option category to which the option belongs.</p>"},{"location":"package/pip/acl-option/#objecttype","title":"<code>&lt;objecttype&gt;</code>","text":"<p>The name of the acl object type (of the object type definition <code>com.woltlab.wcf.acl</code>).</p>"},{"location":"package/pip/acl-option/#category-components","title":"Category Components","text":"<p>Each acl option category is described as an <code>&lt;category&gt;</code> element with the mandatory attribute <code>name</code>  that should follow the naming pattern <code>&lt;permissionName&gt;</code> or <code>&lt;permissionType&gt;.&lt;permissionName&gt;</code>, with <code>&lt;permissionType&gt;</code> generally having <code>user</code> or <code>mod</code> as value.</p>"},{"location":"package/pip/acl-option/#objecttype_1","title":"<code>&lt;objecttype&gt;</code>","text":"<p>The name of the acl object type (of the object type definition <code>com.woltlab.wcf.acl</code>).</p>"},{"location":"package/pip/acl-option/#example","title":"Example","text":"aclOption.xml <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;data xmlns=\"http://www.woltlab.com\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.woltlab.com http://www.woltlab.com/XSD/2019/aclOption.xsd\"&gt;\n&lt;import&gt;\n&lt;categories&gt;\n&lt;category name=\"user.example\"&gt;\n&lt;objecttype&gt;com.example.wcf.example&lt;/objecttype&gt;\n&lt;/category&gt;\n&lt;category name=\"mod.example\"&gt;\n&lt;objecttype&gt;com.example.wcf.example&lt;/objecttype&gt;\n&lt;/category&gt;\n&lt;/categories&gt;\n\n&lt;options&gt;\n&lt;option name=\"canAddExample\"&gt;\n&lt;categoryname&gt;user.example&lt;/categoryname&gt;\n&lt;objecttype&gt;com.example.wcf.example&lt;/objecttype&gt;\n&lt;/option&gt;\n&lt;option name=\"canDeleteExample\"&gt;\n&lt;categoryname&gt;mod.example&lt;/categoryname&gt;\n&lt;objecttype&gt;com.example.wcf.example&lt;/objecttype&gt;\n&lt;/option&gt;\n&lt;/options&gt;\n&lt;/import&gt;\n\n&lt;delete&gt;\n&lt;optioncategory name=\"old.example\"&gt;\n&lt;objecttype&gt;com.example.wcf.example&lt;/objecttype&gt;\n&lt;/optioncategory&gt;\n&lt;option name=\"canDoSomethingWithExample\"&gt;\n&lt;objecttype&gt;com.example.wcf.example&lt;/objecttype&gt;\n&lt;/option&gt;\n&lt;/delete&gt;\n&lt;/data&gt;\n</code></pre>"},{"location":"package/pip/acp-menu/","title":"ACP Menu Package Installation Plugin","text":"<p>Registers new ACP menu items.</p>"},{"location":"package/pip/acp-menu/#components","title":"Components","text":"<p>Each item is described as an <code>&lt;acpmenuitem&gt;</code> element with the mandatory attribute <code>name</code>.</p>"},{"location":"package/pip/acp-menu/#parent","title":"<code>&lt;parent&gt;</code>","text":"<p>Optional</p> <p>The item\u2019s parent item.</p>"},{"location":"package/pip/acp-menu/#showorder","title":"<code>&lt;showorder&gt;</code>","text":"<p>Optional</p> <p>Specifies the order of this item within the parent item.</p>"},{"location":"package/pip/acp-menu/#controller","title":"<code>&lt;controller&gt;</code>","text":"<p>The fully qualified class name of the target controller. If not specified this item serves as a category.</p>"},{"location":"package/pip/acp-menu/#link","title":"<code>&lt;link&gt;</code>","text":"<p>Additional components if <code>&lt;controller&gt;</code> is set, the full external link otherwise.</p>"},{"location":"package/pip/acp-menu/#icon","title":"<code>&lt;icon&gt;</code>","text":"<p>Use an icon only for top-level and 4th-level items.</p> <p>Name of the Font Awesome icon class.</p>"},{"location":"package/pip/acp-menu/#options","title":"<code>&lt;options&gt;</code>","text":"<p>Optional</p> <p>The options element can contain a comma-separated list of options of which at least one needs to be enabled for the tab to be shown.</p>"},{"location":"package/pip/acp-menu/#permissions","title":"<code>&lt;permissions&gt;</code>","text":"<p>Optional</p> <p>The permissions element can contain a comma-separated list of permissions of which the active user needs to have at least one for the tab to be shown.</p>"},{"location":"package/pip/acp-menu/#example","title":"Example","text":"acpMenu.xml <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;data xmlns=\"http://www.woltlab.com\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.woltlab.com http://www.woltlab.com/XSD/2019/acpMenu.xsd\"&gt;\n&lt;import&gt;\n&lt;acpmenuitem name=\"foo.acp.menu.link.example\"&gt;\n&lt;parent&gt;wcf.acp.menu.link.application&lt;/parent&gt;\n&lt;/acpmenuitem&gt;\n\n&lt;acpmenuitem name=\"foo.acp.menu.link.example.list\"&gt;\n&lt;controller&gt;foo\\acp\\page\\ExampleListPage&lt;/controller&gt;\n&lt;parent&gt;foo.acp.menu.link.example&lt;/parent&gt;\n&lt;permissions&gt;admin.foo.canManageExample&lt;/permissions&gt;\n&lt;showorder&gt;1&lt;/showorder&gt;\n&lt;/acpmenuitem&gt;\n\n&lt;acpmenuitem name=\"foo.acp.menu.link.example.add\"&gt;\n&lt;controller&gt;foo\\acp\\form\\ExampleAddForm&lt;/controller&gt;\n&lt;parent&gt;foo.acp.menu.link.example.list&lt;/parent&gt;\n&lt;permissions&gt;admin.foo.canManageExample&lt;/permissions&gt;\n&lt;icon&gt;fa-plus&lt;/icon&gt;\n&lt;/acpmenuitem&gt;\n&lt;/import&gt;\n&lt;/data&gt;\n</code></pre>"},{"location":"package/pip/acp-search-provider/","title":"ACP Search Provider Package Installation Plugin","text":"<p>Registers data provider for the admin panel search.</p>"},{"location":"package/pip/acp-search-provider/#components","title":"Components","text":"<p>Each acp search result provider is described as an <code>&lt;acpsearchprovider&gt;</code> element with the mandatory attribute <code>name</code>.</p>"},{"location":"package/pip/acp-search-provider/#classname","title":"<code>&lt;classname&gt;</code>","text":"<p>The name of the class providing the search results, the class has to implement the <code>wcf\\system\\search\\acp\\IACPSearchResultProvider</code> interface.</p>"},{"location":"package/pip/acp-search-provider/#showorder","title":"<code>&lt;showorder&gt;</code>","text":"<p>Optional</p> <p>Determines at which position of the search result list the provided results are shown.</p>"},{"location":"package/pip/acp-search-provider/#example","title":"Example","text":"acpSearchProvider.xml <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;data xmlns=\"http://www.woltlab.com\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.woltlab.com http://www.woltlab.com/XSD/2019/acpSearchProvider.xsd\"&gt;\n&lt;import&gt;\n&lt;acpsearchprovider name=\"com.woltlab.wcf.example\"&gt;\n&lt;classname&gt;wcf\\system\\search\\acp\\ExampleACPSearchResultProvider&lt;/classname&gt;\n&lt;showorder&gt;1&lt;/showorder&gt;\n&lt;/acpsearchprovider&gt;\n&lt;/import&gt;\n&lt;/data&gt;\n</code></pre>"},{"location":"package/pip/acp-template-delete/","title":"ACP Template Delete Package Installation Plugin","text":"<p>Available since WoltLab Suite 5.5.</p> <p>Deletes admin panel templates installed with the acpTemplate package installation plugin.</p> <p>You cannot delete acp templates provided by other packages.</p>"},{"location":"package/pip/acp-template-delete/#components","title":"Components","text":"<p>Each item is described as a <code>&lt;template&gt;</code> element with an optional <code>application</code>, which behaves like it does for acp templates. The templates are identified by their name like when adding template listeners, i.e. by the file name without the <code>.tpl</code> file extension.</p>"},{"location":"package/pip/acp-template-delete/#example","title":"Example","text":"acpTemplateDelete.xml <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;data xmlns=\"http://www.woltlab.com\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.woltlab.com http://www.woltlab.com/XSD/2019/acpTemplateDelete.xsd\"&gt;\n&lt;delete&gt;\n&lt;template&gt;fouAdd&lt;/template&gt;\n&lt;template application=\"app\"&gt;__appAdd&lt;/template&gt;\n&lt;/delete&gt;\n&lt;/data&gt;\n</code></pre>"},{"location":"package/pip/acp-template/","title":"ACP Template Installation Plugin","text":"<p>Add templates for acp pages and forms by providing an archive containing the template files.</p> <p>You cannot overwrite acp templates provided by other packages.</p>"},{"location":"package/pip/acp-template/#archive","title":"Archive","text":"<p>The <code>acpTemplate</code> package installation plugins expects a <code>.tar</code> (recommended) or <code>.tar.gz</code> archive. The templates must all be in the root of the archive. Do not include any directories in the archive. The file path given in the <code>instruction</code> element as its value must be relative to the <code>package.xml</code> file.</p>"},{"location":"package/pip/acp-template/#attributes","title":"Attributes","text":""},{"location":"package/pip/acp-template/#application","title":"<code>application</code>","text":"<p>The <code>application</code> attribute determines to which application the installed acp templates belong and thus in which directory the templates are installed. The value of the <code>application</code> attribute has to be the abbreviation of an installed application. If no <code>application</code> attribute is given, the following rules are applied:</p> <ul> <li>If the package installing the acp templates is an application, then the templates will be installed in this application's directory.</li> <li>If the package installing the acp templates is no application, then the templates will be installed in WoltLab Suite Core's directory.</li> </ul>"},{"location":"package/pip/acp-template/#example-in-packagexml","title":"Example in <code>package.xml</code>","text":"<pre><code>&lt;instruction type=\"acpTemplate\" /&gt;\n&lt;!-- is the same as --&gt;\n&lt;instruction type=\"acpTemplate\"&gt;acptemplates.tar&lt;/instruction&gt;\n\n&lt;!-- if an application \"com.woltlab.example\" is being installed, the following lines are equivalent --&gt;\n&lt;instruction type=\"acpTemplate\" /&gt;\n&lt;instruction type=\"acpTemplate\" application=\"example\" /&gt;\n</code></pre>"},{"location":"package/pip/bbcode/","title":"BBCode Package Installation Plugin","text":"<p>Registers new BBCodes.</p>"},{"location":"package/pip/bbcode/#components","title":"Components","text":"<p>Each bbcode is described as an <code>&lt;bbcode&gt;</code> element with the mandatory attribute <code>name</code>. The <code>name</code> attribute must contain alphanumeric characters only and is exposed to the user.</p>"},{"location":"package/pip/bbcode/#htmlopen","title":"<code>&lt;htmlopen&gt;</code>","text":"<p>Optional: Must not be provided if the BBCode is being processed a PHP class (<code>&lt;classname&gt;</code>).</p> <p>The contents of this tag are literally copied into the opening tag of the bbcode.</p>"},{"location":"package/pip/bbcode/#htmlclose","title":"<code>&lt;htmlclose&gt;</code>","text":"<p>Optional: Must not be provided if <code>&lt;htmlopen&gt;</code> is not given.</p> <p>Must match the <code>&lt;htmlopen&gt;</code> tag. Do not provide for self-closing tags.</p>"},{"location":"package/pip/bbcode/#classname","title":"<code>&lt;classname&gt;</code>","text":"<p>The name of the class providing the bbcode output, the class has to implement the <code>wcf\\system\\bbcode\\IBBCode</code> interface.</p> <p>BBCodes can be statically converted to HTML during input processing using a <code>wcf\\system\\html\\metacode\\converter\\*MetaConverter</code> class. This class does not need to be registered.</p>"},{"location":"package/pip/bbcode/#wysiwygicon","title":"<code>&lt;wysiwygicon&gt;</code>","text":"<p>Optional</p> <p>Name of the Font Awesome icon class or path to a <code>gif</code>, <code>jpg</code>, <code>jpeg</code>, <code>png</code>, or <code>svg</code> image (placed inside the <code>icon/</code> directory) to show in the editor toolbar.</p>"},{"location":"package/pip/bbcode/#buttonlabel","title":"<code>&lt;buttonlabel&gt;</code>","text":"<p>Optional: Must be provided if an icon is given.</p> <p>Explanatory text to show when hovering the icon.</p>"},{"location":"package/pip/bbcode/#sourcecode","title":"<code>&lt;sourcecode&gt;</code>","text":"<p>Do not set this to <code>1</code> if you don't specify a PHP class for processing. You must perform XSS sanitizing yourself!</p> <p>If set to <code>1</code> contents of this BBCode will not be interpreted, but literally passed through instead.</p>"},{"location":"package/pip/bbcode/#isblockelement","title":"<code>&lt;isBlockElement&gt;</code>","text":"<p>Set to <code>1</code> if the output of this BBCode is a HTML block element (according to the HTML specification).</p>"},{"location":"package/pip/bbcode/#attributes","title":"<code>&lt;attributes&gt;</code>","text":"<p>Each bbcode is described as an <code>&lt;attribute&gt;</code> element with the mandatory attribute <code>name</code>. The <code>name</code> attribute is a 0-indexed integer.</p>"},{"location":"package/pip/bbcode/#html","title":"<code>&lt;html&gt;</code>","text":"<p>Optional: Must not be provided if the BBCode is being processed a PHP class (<code>&lt;classname&gt;</code>).</p> <p>The contents of this tag are copied into the opening tag of the bbcode. <code>%s</code> is replaced by the attribute value.</p>"},{"location":"package/pip/bbcode/#validationpattern","title":"<code>&lt;validationpattern&gt;</code>","text":"<p>Optional</p> <p>Defines a regular expression that is used to validate the value of the attribute.</p>"},{"location":"package/pip/bbcode/#required","title":"<code>&lt;required&gt;</code>","text":"<p>Optional</p> <p>Specifies whether this attribute must be provided.</p>"},{"location":"package/pip/bbcode/#usetext","title":"<code>&lt;usetext&gt;</code>","text":"<p>Optional</p> <p>Should only be set to <code>1</code> for the attribute with name <code>0</code>.</p> <p>Specifies whether the text content of the BBCode should become this attribute's value.</p>"},{"location":"package/pip/bbcode/#example","title":"Example","text":"bbcode.xml <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;data xmlns=\"http://www.woltlab.com\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.woltlab.com http://www.woltlab.com/XSD/2019/bbcode.xsd\"&gt;\n&lt;import&gt;\n&lt;bbcode name=\"foo\"&gt;\n&lt;classname&gt;wcf\\system\\bbcode\\FooBBCode&lt;/classname&gt;\n&lt;attributes&gt;\n&lt;attribute name=\"0\"&gt;\n&lt;validationpattern&gt;^\\d+$&lt;/validationpattern&gt;\n&lt;required&gt;1&lt;/required&gt;\n&lt;/attribute&gt;\n&lt;/attributes&gt;\n&lt;/bbcode&gt;\n\n&lt;bbcode name=\"example\"&gt;\n&lt;htmlopen&gt;div&lt;/htmlopen&gt;\n&lt;htmlclose&gt;div&lt;/htmlclose&gt;\n&lt;isBlockElement&gt;1&lt;/isBlockElement&gt;\n&lt;wysiwygicon&gt;fa-bath&lt;/wysiwygicon&gt;\n&lt;buttonlabel&gt;wcf.editor.button.example&lt;/buttonlabel&gt;\n&lt;/bbcode&gt;\n&lt;/import&gt;\n&lt;/data&gt;\n</code></pre>"},{"location":"package/pip/box/","title":"Box Package Installation Plugin","text":"<p>Deploy and manage boxes that can be placed anywhere on the site, they come in two flavors: system and content-based.</p>"},{"location":"package/pip/box/#components","title":"Components","text":"<p>Each item is described as a <code>&lt;box&gt;</code> element with the mandatory attribute <code>name</code> that should follow the naming pattern <code>&lt;packageIdentifier&gt;.&lt;BoxName&gt;</code>, e.g. <code>com.woltlab.wcf.RecentActivity</code>.</p>"},{"location":"package/pip/box/#name","title":"<code>&lt;name&gt;</code>","text":"<p>The <code>language</code> attribute is required and should specify the ISO-639-1 language code.</p> <p>The internal name displayed in the admin panel only, can be fully customized by the administrator and is immutable. Only one value is accepted and will be picked based on the site's default language, but you can provide localized values by including multiple <code>&lt;name&gt;</code> elements.</p>"},{"location":"package/pip/box/#boxtype","title":"<code>&lt;boxType&gt;</code>","text":""},{"location":"package/pip/box/#system","title":"<code>system</code>","text":"<p>The special <code>system</code> type is reserved for boxes that pull their properties and content from a registered PHP class. Requires the <code>&lt;objectType&gt;</code> element.</p>"},{"location":"package/pip/box/#html-text-or-tpl","title":"<code>html</code>, <code>text</code> or <code>tpl</code>","text":"<p>Provide arbitrary content, requires the <code>&lt;content&gt;</code> element.</p>"},{"location":"package/pip/box/#objecttype","title":"<code>&lt;objectType&gt;</code>","text":"<p>Required for boxes with <code>boxType = system</code>, must be registered through the objectType PIP for the definition <code>com.woltlab.wcf.boxController</code>.</p>"},{"location":"package/pip/box/#position","title":"<code>&lt;position&gt;</code>","text":"<p>The default display position of this box, can be any of the following:</p> <ul> <li>bottom</li> <li>contentBottom</li> <li>contentTop</li> <li>footer</li> <li>footerBoxes</li> <li>headerBoxes</li> <li>hero</li> <li>sidebarLeft</li> <li>sidebarRight</li> <li>top</li> </ul>"},{"location":"package/pip/box/#placeholder-positions","title":"Placeholder Positions","text":""},{"location":"package/pip/box/#showheader","title":"<code>&lt;showHeader&gt;</code>","text":"<p>Setting this to <code>0</code> will suppress display of the box title, useful for boxes containing advertisements or similar. Defaults to <code>1</code>.</p>"},{"location":"package/pip/box/#visibleeverywhere","title":"<code>&lt;visibleEverywhere&gt;</code>","text":"<p>Controls the display on all pages (<code>1</code>) or none (<code>0</code>), can be used in conjunction with <code>&lt;visibilityExceptions&gt;</code>.</p>"},{"location":"package/pip/box/#visibilityexceptions","title":"<code>&lt;visibilityExceptions&gt;</code>","text":"<p>Inverts the <code>&lt;visibleEverywhere&gt;</code> setting for the listed pages only.</p>"},{"location":"package/pip/box/#cssclassname","title":"<code>&lt;cssClassName&gt;</code>","text":"<p>Provide a custom CSS class name that is added to the menu container, allowing further customization of the menu's appearance.</p>"},{"location":"package/pip/box/#content","title":"<code>&lt;content&gt;</code>","text":"<p>The <code>language</code> attribute is required and should specify the ISO-639-1 language code.</p>"},{"location":"package/pip/box/#title","title":"<code>&lt;title&gt;</code>","text":"<p>The title element is required and controls the box title shown to the end users.</p>"},{"location":"package/pip/box/#content_1","title":"<code>&lt;content&gt;</code>","text":"<p>The content that should be used to populate the box, only used and required if the <code>boxType</code> equals <code>text</code>, <code>html</code> and <code>tpl</code>.</p>"},{"location":"package/pip/box/#example","title":"Example","text":"box.xml <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;data xmlns=\"http://www.woltlab.com\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.woltlab.com http://www.woltlab.com/XSD/2019/box.xsd\"&gt;\n&lt;import&gt;\n&lt;box identifier=\"com.woltlab.wcf.RecentActivity\"&gt;\n&lt;name language=\"de\"&gt;Letzte Aktivit\u00e4ten&lt;/name&gt;\n&lt;name language=\"en\"&gt;Recent Activities&lt;/name&gt;\n&lt;boxType&gt;system&lt;/boxType&gt;\n&lt;objectType&gt;com.woltlab.wcf.recentActivityList&lt;/objectType&gt;\n&lt;position&gt;contentBottom&lt;/position&gt;\n&lt;showHeader&gt;0&lt;/showHeader&gt;\n&lt;visibleEverywhere&gt;0&lt;/visibleEverywhere&gt;\n&lt;visibilityExceptions&gt;\n&lt;page&gt;com.woltlab.wcf.Dashboard&lt;/page&gt;\n&lt;/visibilityExceptions&gt;\n&lt;limit&gt;10&lt;/limit&gt;\n\n&lt;content language=\"de\"&gt;\n&lt;title&gt;Letzte Aktivit\u00e4ten&lt;/title&gt;\n&lt;/content&gt;\n&lt;content language=\"en\"&gt;\n&lt;title&gt;Recent Activities&lt;/title&gt;\n&lt;/content&gt;\n&lt;/box&gt;\n&lt;/import&gt;\n\n&lt;delete&gt;\n&lt;box identifier=\"com.woltlab.wcf.RecentActivity\" /&gt;\n&lt;/delete&gt;\n&lt;/data&gt;\n</code></pre>"},{"location":"package/pip/clipboard-action/","title":"Clipboard Action Package Installation Plugin","text":"<p>Registers clipboard actions.</p>"},{"location":"package/pip/clipboard-action/#components","title":"Components","text":"<p>Each clipboard action is described as an <code>&lt;action&gt;</code> element with the mandatory attribute <code>name</code>.</p>"},{"location":"package/pip/clipboard-action/#actionclassname","title":"<code>&lt;actionclassname&gt;</code>","text":"<p>The name of the class used by the clipboard API to process the concrete action. The class has to implement the <code>wcf\\system\\clipboard\\action\\IClipboardAction</code> interface, best by extending <code>wcf\\system\\clipboard\\action\\AbstractClipboardAction</code>.</p>"},{"location":"package/pip/clipboard-action/#pages","title":"<code>&lt;pages&gt;</code>","text":"<p>Element with <code>&lt;page&gt;</code> children whose value contains the class name of the controller of the page on which the clipboard action is available.</p>"},{"location":"package/pip/clipboard-action/#showorder","title":"<code>&lt;showorder&gt;</code>","text":"<p>Optional</p> <p>Determines at which position of the clipboard action list the action is shown.</p>"},{"location":"package/pip/clipboard-action/#example","title":"Example","text":"clipboardAction.xml <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;data xmlns=\"http://www.woltlab.com\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.woltlab.com http://www.woltlab.com/XSD/2019/clipboardAction.xsd\"&gt;\n&lt;import&gt;\n&lt;action name=\"delete\"&gt;\n&lt;actionclassname&gt;wcf\\system\\clipboard\\action\\ExampleClipboardAction&lt;/actionclassname&gt;\n&lt;showorder&gt;1&lt;/showorder&gt;\n&lt;pages&gt;\n&lt;page&gt;wcf\\acp\\page\\ExampleListPage&lt;/page&gt;\n&lt;/pages&gt;\n&lt;/action&gt;\n&lt;action name=\"foo\"&gt;\n&lt;actionclassname&gt;wcf\\system\\clipboard\\action\\ExampleClipboardAction&lt;/actionclassname&gt;\n&lt;showorder&gt;2&lt;/showorder&gt;\n&lt;pages&gt;\n&lt;page&gt;wcf\\acp\\page\\ExampleListPage&lt;/page&gt;\n&lt;/pages&gt;\n&lt;/action&gt;\n&lt;action name=\"bar\"&gt;\n&lt;actionclassname&gt;wcf\\system\\clipboard\\action\\ExampleClipboardAction&lt;/actionclassname&gt;\n&lt;showorder&gt;3&lt;/showorder&gt;\n&lt;pages&gt;\n&lt;page&gt;wcf\\acp\\page\\ExampleListPage&lt;/page&gt;\n&lt;/pages&gt;\n&lt;/action&gt;\n&lt;/import&gt;\n&lt;/data&gt;\n</code></pre>"},{"location":"package/pip/core-object/","title":"Core Object Package Installation Plugin","text":"<p>Registers <code>wcf\\system\\SingletonFactory</code> objects to be accessible in templates.</p>"},{"location":"package/pip/core-object/#components","title":"Components","text":"<p>Each item is described as a <code>&lt;coreobject&gt;</code> element with the mandatory element <code>objectname</code>.</p>"},{"location":"package/pip/core-object/#objectname","title":"<code>&lt;objectname&gt;</code>","text":"<p>The fully qualified class name of the class.</p>"},{"location":"package/pip/core-object/#example","title":"Example","text":"coreObject.xml <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;data xmlns=\"http://www.woltlab.com\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.woltlab.com http://www.woltlab.com/XSD/2019/coreObject.xsd\"&gt;\n&lt;import&gt;\n&lt;coreobject&gt;\n&lt;objectname&gt;wcf\\system\\example\\ExampleHandler&lt;/objectname&gt;\n&lt;/coreobject&gt;\n&lt;/import&gt;\n&lt;/data&gt;\n</code></pre> <p>This object can be accessed in templates via <code>$__wcf-&gt;getExampleHandler()</code> (in general: the method name begins with <code>get</code> and ends with the unqualified class name).</p>"},{"location":"package/pip/cronjob/","title":"Cronjob Package Installation Plugin","text":"<p>Registers new cronjobs. The cronjob schedular works similar to the <code>cron(8)</code> daemon, which might not available to web applications on regular webspaces. The main difference is that WoltLab Suite\u2019s cronjobs do not guarantee execution at the specified points in time: WoltLab Suite\u2019s cronjobs are triggered by regular visitors in an AJAX request, once the next execution point lies in the past.</p>"},{"location":"package/pip/cronjob/#components","title":"Components","text":"<p>Each cronjob is described as an <code>&lt;cronjob&gt;</code> element with the mandatory attribute <code>name</code>.</p>"},{"location":"package/pip/cronjob/#classname","title":"<code>&lt;classname&gt;</code>","text":"<p>The name of the class providing the cronjob's behaviour, the class has to implement the <code>wcf\\system\\cronjob\\ICronjob</code> interface.</p>"},{"location":"package/pip/cronjob/#description","title":"<code>&lt;description&gt;</code>","text":"<p>The <code>language</code> attribute is optional and should specify the ISO-639-1 language code.</p> <p>Provides a human readable description for the administrator.</p>"},{"location":"package/pip/cronjob/#start","title":"<code>&lt;start*&gt;</code>","text":"<p>All of the five <code>startMinute</code>, <code>startHour</code>, <code>startDom</code> (Day Of Month), <code>startMonth</code>, <code>startDow</code> (Day Of Week) are required. They correspond to the fields in <code>crontab(5)</code> of a cron daemon and accept the same syntax.</p>"},{"location":"package/pip/cronjob/#canbeedited","title":"<code>&lt;canbeedited&gt;</code>","text":"<p>Controls whether the administrator may edit the fields of the cronjob. Defaults to <code>1</code>.</p>"},{"location":"package/pip/cronjob/#canbedisabled","title":"<code>&lt;canbedisabled&gt;</code>","text":"<p>Controls whether the administrator may disable the cronjob. Defaults to <code>1</code>.</p>"},{"location":"package/pip/cronjob/#isdisabled","title":"<code>&lt;isdisabled&gt;</code>","text":"<p>Controls whether the cronjob is disabled by default. Defaults to <code>0</code>.</p>"},{"location":"package/pip/cronjob/#options","title":"<code>&lt;options&gt;</code>","text":"<p>The options element can contain a comma-separated list of options of which at least one needs to be enabled for the template listener to be executed.</p>"},{"location":"package/pip/cronjob/#example","title":"Example","text":"cronjob.xml <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;data xmlns=\"http://www.woltlab.com\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.woltlab.com http://www.woltlab.com/XSD/2019/cronjob.xsd\"&gt;\n&lt;import&gt;\n&lt;cronjob name=\"com.example.package.example\"&gt;\n&lt;classname&gt;wcf\\system\\cronjob\\ExampleCronjob&lt;/classname&gt;\n&lt;description&gt;Serves as an example&lt;/description&gt;\n&lt;description language=\"de\"&gt;Stellt ein Beispiel dar&lt;/description&gt;\n&lt;startminute&gt;0&lt;/startminute&gt;\n&lt;starthour&gt;2&lt;/starthour&gt;\n&lt;startdom&gt;*/2&lt;/startdom&gt;\n&lt;startmonth&gt;*&lt;/startmonth&gt;\n&lt;startdow&gt;*&lt;/startdow&gt;\n&lt;canbeedited&gt;1&lt;/canbeedited&gt;\n&lt;canbedisabled&gt;1&lt;/canbedisabled&gt;\n&lt;/cronjob&gt;\n&lt;/import&gt;\n&lt;/data&gt;\n</code></pre>"},{"location":"package/pip/database/","title":"Database Package Installation Plugin","text":"<p>Available since WoltLab Suite 5.4.</p> <p>Update the database layout using the PHP API.</p> <p>You must install the PHP script through the file package installation plugin.</p> <p>The installation will attempt to delete the script after successful execution.</p>"},{"location":"package/pip/database/#attributes","title":"Attributes","text":""},{"location":"package/pip/database/#application","title":"<code>application</code>","text":"<p>The <code>application</code> attribute must have the same value as the <code>application</code> attribute of the <code>file</code> package installation plugin instruction so that the correct file in the intended application directory is executed. For further information about the <code>application</code> attribute, refer to its documentation on the acpTemplate package installation plugin page.</p>"},{"location":"package/pip/database/#expected-value","title":"Expected value","text":"<p>The <code>database</code>-PIP expects a relative path to a <code>.php</code> file that returns an array of <code>DatabaseTable</code> objects.</p>"},{"location":"package/pip/database/#naming-convention","title":"Naming convention","text":"<p>The PHP script is deployed by using the file package installation plugin. To prevent it from colliding with other install script (remember: You cannot overwrite files created by another plugin), we highly recommend to make use of these naming conventions:</p> <ul> <li>Installation: <code>acp/database/install_&lt;package&gt;.php</code> (example: <code>acp/database/install_com.woltlab.wbb.php</code>)</li> <li>Update: <code>acp/database/update_&lt;package&gt;_&lt;targetVersion&gt;.php</code> (example: <code>acp/database/update_com.woltlab.wbb_5.4.1.php</code>)</li> </ul> <p><code>&lt;targetVersion&gt;</code> equals the version number of the current package being installed. If you're updating from <code>1.0.0</code> to <code>1.0.1</code>, <code>&lt;targetVersion&gt;</code> should read <code>1.0.1</code>.</p> <p>If you run multiple update scripts, you can append additional information in the filename.</p>"},{"location":"package/pip/database/#execution-environment","title":"Execution environment","text":"<p>The script is included using <code>include()</code> within DatabasePackageInstallationPlugin::updateDatabase().</p>"},{"location":"package/pip/event-listener/","title":"Event Listener Package Installation Plugin","text":"<p>Registers event listeners. An explanation of events and event listeners can be found here.</p>"},{"location":"package/pip/event-listener/#components","title":"Components","text":"<p>Each event listener is described as an <code>&lt;eventlistener&gt;</code> element with a <code>name</code> attribute. As the <code>name</code> attribute has only be introduced with WSC 3.0, it is not yet mandatory to allow backwards compatibility. If <code>name</code> is not given, the system automatically sets the name based on the id of the event listener in the database.</p>"},{"location":"package/pip/event-listener/#eventclassname","title":"<code>&lt;eventclassname&gt;</code>","text":"<p>The event class name is the name of the class in which the event is fired.</p>"},{"location":"package/pip/event-listener/#eventname","title":"<code>&lt;eventname&gt;</code>","text":"<p>The event name is the name given when the event is fired to identify different events within the same class. You can either give a single event name or a comma-separated list of event names in which case the event listener listens to all of the listed events.</p> <p>Since the introduction of the new event system with version 5.5, the event name is optional and defaults to <code>:default</code>.</p>"},{"location":"package/pip/event-listener/#listenerclassname","title":"<code>&lt;listenerclassname&gt;</code>","text":"<p>The listener class name is the name of the class which is triggered if the relevant event is fired. The PHP class has to implement the <code>wcf\\system\\event\\listener\\IParameterizedEventListener</code> interface.</p> <p>Legacy event listeners are only required to implement the deprecated <code>wcf\\system\\event\\IEventListener</code> interface. When writing new code or update existing code, you should always implement the <code>wcf\\system\\event\\listener\\IParameterizedEventListener</code> interface!</p>"},{"location":"package/pip/event-listener/#inherit","title":"<code>&lt;inherit&gt;</code>","text":"<p>The inherit value can either be <code>0</code> (default value if the element is omitted) or <code>1</code> and determines if the event listener is also triggered for child classes of the given event class name. This is the case if <code>1</code> is used as the value.</p>"},{"location":"package/pip/event-listener/#environment","title":"<code>&lt;environment&gt;</code>","text":"<p>The value of the environment element must be one of <code>user</code>, <code>admin</code> or <code>all</code> and defaults to <code>user</code> if no value is given. The value determines if the event listener will be executed in the frontend (<code>user</code>), the backend (<code>admin</code>) or both (<code>all</code>).</p>"},{"location":"package/pip/event-listener/#nice","title":"<code>&lt;nice&gt;</code>","text":"<p>The nice value element can contain an integer value out of the interval <code>[-128,127]</code> with <code>0</code> being the default value if the element is omitted. The nice value determines the execution order of event listeners. Event listeners with smaller nice values are executed first. If the nice value of two event listeners is equal, they are sorted by the listener class name.</p> <p>If you pass a value out of the mentioned interval, the value will be adjusted to the closest value in the interval.</p>"},{"location":"package/pip/event-listener/#options","title":"<code>&lt;options&gt;</code>","text":"<p>The options element can contain a comma-separated list of options of which at least one needs to be enabled for the event listener to be executed.</p>"},{"location":"package/pip/event-listener/#permissions","title":"<code>&lt;permissions&gt;</code>","text":"<p>The permissions element can contain a comma-separated list of permissions of which the active user needs to have at least one for the event listener to be executed.</p>"},{"location":"package/pip/event-listener/#example","title":"Example","text":"eventListener.xml <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;data xmlns=\"http://www.woltlab.com\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.woltlab.com http://www.woltlab.com/XSD/2019/eventListener.xsd\"&gt;\n&lt;import&gt;\n&lt;eventlistener name=\"inheritedAdminExample\"&gt;\n&lt;eventclassname&gt;wcf\\acp\\form\\UserAddForm&lt;/eventclassname&gt;\n&lt;eventname&gt;assignVariables,readFormParameters,save,validate&lt;/eventname&gt;\n&lt;listenerclassname&gt;wcf\\system\\event\\listener\\InheritedAdminExampleListener&lt;/listenerclassname&gt;\n&lt;inherit&gt;1&lt;/inherit&gt;\n&lt;environment&gt;admin&lt;/environment&gt;\n&lt;/eventlistener&gt;\n\n&lt;eventlistener name=\"nonInheritedUserExample\"&gt;\n&lt;eventclassname&gt;wcf\\form\\SettingsForm&lt;/eventclassname&gt;\n&lt;eventname&gt;assignVariables&lt;/eventname&gt;\n&lt;listenerclassname&gt;wcf\\system\\event\\listener\\NonInheritedUserExampleListener&lt;/listenerclassname&gt;\n&lt;/eventlistener&gt;\n&lt;/import&gt;\n\n&lt;delete&gt;\n&lt;eventlistener name=\"oldEventListenerName\" /&gt;\n&lt;/delete&gt;\n&lt;/data&gt;\n</code></pre>"},{"location":"package/pip/file-delete/","title":"File Delete Package Installation Plugin","text":"<p>Available since WoltLab Suite 5.5.</p> <p>Deletes files installed with the file package installation plugin.</p> <p>You cannot delete files provided by other packages.</p>"},{"location":"package/pip/file-delete/#components","title":"Components","text":"<p>Each item is described as a <code>&lt;file&gt;</code> element with an optional <code>application</code>, which behaves like it does for acp templates. The file path is relative to the installation of the app to which the file belongs.</p>"},{"location":"package/pip/file-delete/#example","title":"Example","text":"fileDelete.xml <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;data xmlns=\"http://www.woltlab.com\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.woltlab.com http://www.woltlab.com/XSD/2019/fileDelete.xsd\"&gt;\n&lt;delete&gt;\n&lt;file&gt;path/file.ext&lt;/file&gt;\n&lt;file application=\"app\"&gt;lib/data/foo/Fou.class.php&lt;/file&gt;\n&lt;/delete&gt;\n&lt;/data&gt;\n</code></pre>"},{"location":"package/pip/file/","title":"File Package Installation Plugin","text":"<p>Adds any type of files with the exception of templates.</p> <p>You cannot overwrite files provided by other packages.</p> <p>The <code>application</code> attribute behaves like it does for acp templates.</p>"},{"location":"package/pip/file/#archive","title":"Archive","text":"<p>The <code>acpTemplate</code> package installation plugins expects a <code>.tar</code> (recommended) or <code>.tar.gz</code> archive. The file path given in the <code>instruction</code> element as its value must be relative to the <code>package.xml</code> file.</p>"},{"location":"package/pip/file/#example-in-packagexml","title":"Example in <code>package.xml</code>","text":"<pre><code>&lt;instruction type=\"file\" /&gt;\n&lt;!-- is the same as --&gt;\n&lt;instruction type=\"file\"&gt;files.tar&lt;/instruction&gt;\n\n&lt;!-- if an application \"com.woltlab.example\" is being installed, the following lines are equivalent --&gt;\n&lt;instruction type=\"file\" /&gt;\n&lt;instruction type=\"file\" application=\"example\" /&gt;\n\n&lt;!-- if the same application wants to install additional files, in WoltLab Suite Core's directory: --&gt;\n&lt;instruction type=\"file\" application=\"wcf\"&gt;files_wcf.tar&lt;/instruction&gt;\n</code></pre>"},{"location":"package/pip/language/","title":"Language Package Installation Plugin","text":"<p>Registers new language items.</p>"},{"location":"package/pip/language/#components","title":"Components","text":"<p>The <code>languagecode</code> attribute is required and should specify the ISO-639-1 language code.</p> <p>The top level <code>&lt;language&gt;</code> node must contain a <code>languagecode</code> attribute.</p>"},{"location":"package/pip/language/#category","title":"<code>&lt;category&gt;</code>","text":"<p>Each category must contain a <code>name</code> attribute containing two or three components consisting of alphanumeric character only, separated by a single full stop (<code>.</code>, U+002E).</p>"},{"location":"package/pip/language/#item","title":"<code>&lt;item&gt;</code>","text":"<p>Each language item must contain a <code>name</code> attribute containing at least three components consisting of alphanumeric character only, separated by a single full stop (<code>.</code>, U+002E). The <code>name</code> of the parent <code>&lt;category&gt;</code> node followed by a full stop must be a prefix of the <code>&lt;item&gt;</code>\u2019s <code>name</code>.</p> <p>Wrap the text content inside a CDATA to avoid escaping of special characters.</p> <p>Do not use the <code>{lang}</code> tag inside a language item.</p> <p>The text content of the <code>&lt;item&gt;</code> node is the value of the language item. Language items that are not in the <code>wcf.global</code> category support template scripting.</p>"},{"location":"package/pip/language/#example","title":"Example","text":"<p>Prior to version 5.5, there was no support for deleting language items and the <code>category</code> elements had to be placed directly as children of the <code>language</code> element, see the migration guide to version 5.5.</p> language/en.xml <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;language xmlns=\"http://www.woltlab.com\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.woltlab.com http://www.woltlab.com/XSD/2019/language.xsd\" languagecode=\"en\"&gt;\n&lt;import&gt;\n&lt;category name=\"wcf.example\"&gt;\n&lt;item name=\"wcf.example.foo\"&gt;&lt;![CDATA[&lt;strong&gt;Look!&lt;/strong&gt;]]&gt;&lt;/item&gt;\n&lt;/category&gt;\n&lt;/import&gt;\n&lt;delete&gt;\n&lt;item name=\"wcf.example.obsolete\"/&gt;\n&lt;/delete&gt;\n&lt;/language&gt;\n</code></pre>"},{"location":"package/pip/media-provider/","title":"Media Provider Package Installation Plugin","text":"<p>Media providers are responsible to detect and convert links to a 3rd party service inside messages.</p>"},{"location":"package/pip/media-provider/#components","title":"Components","text":"<p>Each item is described as a <code>&lt;provider&gt;</code> element with the mandatory attribute <code>name</code> that should equal the lower-cased provider name. If a provider provides multiple components that are (largely) unrelated to each other, it is recommended to use a dash to separate the name and the component, e. g. <code>youtube-playlist</code>.</p>"},{"location":"package/pip/media-provider/#title","title":"<code>&lt;title&gt;</code>","text":"<p>The title is displayed in the administration control panel and is only used there, the value is neither localizable nor is it ever exposed to regular users.</p>"},{"location":"package/pip/media-provider/#regex","title":"<code>&lt;regex&gt;</code>","text":"<p>The regular expression used to identify links to this provider, it must not contain anchors or delimiters. It is strongly recommended to capture the primary object id using the <code>(?P&lt;ID&gt;...)</code> group.</p>"},{"location":"package/pip/media-provider/#classname","title":"<code>&lt;className&gt;</code>","text":"<p><code>&lt;className&gt;</code> and <code>&lt;html&gt;</code> are mutually exclusive.</p> <p>PHP-Callback-Class that is invoked to process the matched link in case that additional logic must be applied that cannot be handled through a simple replacement as defined by the <code>&lt;html&gt;</code> element.</p> <p>The callback-class must implement the interface <code>\\wcf\\system\\bbcode\\media\\provider\\IBBCodeMediaProvider</code>.</p>"},{"location":"package/pip/media-provider/#html","title":"<code>&lt;html&gt;</code>","text":"<p><code>&lt;className&gt;</code> and <code>&lt;html&gt;</code> are mutually exclusive.</p> <p>Replacement HTML that gets populated using the captured matches in <code>&lt;regex&gt;</code>, variables are accessed as <code>{$VariableName}</code>. For example, the capture group <code>(?P&lt;ID&gt;...)</code> is accessed using <code>{$ID}</code>.</p>"},{"location":"package/pip/media-provider/#example","title":"Example","text":"mediaProvider.xml <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;data xmlns=\"http://www.woltlab.com\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.woltlab.com http://www.woltlab.com/XSD/2019/mediaProvider.xsd\"&gt;\n&lt;import&gt;\n&lt;provider name=\"youtube\"&gt;\n&lt;title&gt;YouTube&lt;/title&gt;\n&lt;regex&gt;&lt;![CDATA[https?://(?:.+?\\.)?youtu(?:\\.be/|be\\.com/(?:#/)?watch\\?(?:.*?&amp;)?v=)(?P&lt;ID&gt;[a-zA-Z0-9_-]+)(?:(?:\\?|&amp;)t=(?P&lt;start&gt;[0-9hms]+)$)?]]&gt;&lt;/regex&gt;\n&lt;!-- advanced PHP callback --&gt;\n&lt;className&gt;&lt;![CDATA[wcf\\system\\bbcode\\media\\provider\\YouTubeBBCodeMediaProvider]]&gt;&lt;/className&gt;\n&lt;/provider&gt;\n\n&lt;provider name=\"youtube-playlist\"&gt;\n&lt;title&gt;YouTube Playlist&lt;/title&gt;\n&lt;regex&gt;&lt;![CDATA[https?://(?:.+?\\.)?youtu(?:\\.be/|be\\.com/)playlist\\?(?:.*?&amp;)?list=(?P&lt;ID&gt;[a-zA-Z0-9_-]+)]]&gt;&lt;/regex&gt;\n&lt;!-- uses a simple HTML replacement --&gt;\n&lt;html&gt;&lt;![CDATA[&lt;div class=\"videoContainer\"&gt;&lt;iframe src=\"https://www.youtube.com/embed/videoseries?list={$ID}\" allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;]]&gt;&lt;/html&gt;\n&lt;/provider&gt;\n&lt;/import&gt;\n\n&lt;delete&gt;\n&lt;provider name=\"example\" /&gt;\n&lt;/delete&gt;\n&lt;/data&gt;\n</code></pre>"},{"location":"package/pip/menu-item/","title":"Menu Item Package Installation Plugin","text":"<p>Adds menu items to existing menus.</p>"},{"location":"package/pip/menu-item/#components","title":"Components","text":"<p>Each item is described as an <code>&lt;item&gt;</code> element with the mandatory attribute <code>identifier</code> that should follow the naming pattern <code>&lt;packageIdentifier&gt;.&lt;PageName&gt;</code>, e.g. <code>com.woltlab.wcf.Dashboard</code>.</p>"},{"location":"package/pip/menu-item/#menu","title":"<code>&lt;menu&gt;</code>","text":"<p>The target menu that the item should be added to, requires the internal identifier set by creating a menu through the menu.xml.</p>"},{"location":"package/pip/menu-item/#title","title":"<code>&lt;title&gt;</code>","text":"<p>The <code>language</code> attribute is required and should specify the ISO-639-1 language code.</p> <p>The title is displayed as the link title of the menu item and can be fully customized by the administrator, thus is immutable after deployment. Supports multiple <code>&lt;title&gt;</code> elements to provide localized values.</p>"},{"location":"package/pip/menu-item/#page","title":"<code>&lt;page&gt;</code>","text":"<p>The page that the link should point to, requires the internal identifier set by creating a page through the page.xml.</p>"},{"location":"package/pip/menu-item/#example","title":"Example","text":"menuItem.xml <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;data xmlns=\"http://www.woltlab.com\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.woltlab.com http://www.woltlab.com/XSD/2019/menuItem.xsd\"&gt;\n&lt;import&gt;\n&lt;item identifier=\"com.woltlab.wcf.Dashboard\"&gt;\n&lt;menu&gt;com.woltlab.wcf.MainMenu&lt;/menu&gt;\n&lt;title language=\"de\"&gt;Dashboard&lt;/title&gt;\n&lt;title language=\"en\"&gt;Dashboard&lt;/title&gt;\n&lt;page&gt;com.woltlab.wcf.Dashboard&lt;/page&gt;\n&lt;/item&gt;\n&lt;/import&gt;\n\n&lt;delete&gt;\n&lt;item identifier=\"com.woltlab.wcf.FooterLinks\" /&gt;\n&lt;/delete&gt;\n&lt;/data&gt;\n</code></pre>"},{"location":"package/pip/menu/","title":"Menu Package Installation Plugin","text":"<p>Deploy and manage menus that can be placed anywhere on the site.</p>"},{"location":"package/pip/menu/#components","title":"Components","text":"<p>Each item is described as a <code>&lt;menu&gt;</code> element with the mandatory attribute <code>identifier</code> that should follow the naming pattern <code>&lt;packageIdentifier&gt;.&lt;MenuName&gt;</code>, e.g. <code>com.woltlab.wcf.MainMenu</code>.</p>"},{"location":"package/pip/menu/#title","title":"<code>&lt;title&gt;</code>","text":"<p>The <code>language</code> attribute is required and should specify the ISO-639-1 language code.</p> <p>The internal name displayed in the admin panel only, can be fully customized by the administrator and is immutable. Only one value is accepted and will be picked based on the site's default language, but you can provide localized values by including multiple <code>&lt;title&gt;</code> elements.</p>"},{"location":"package/pip/menu/#box","title":"<code>&lt;box&gt;</code>","text":"<p>The following elements of the box PIP are supported, please refer to the documentation to learn more about them:</p> <ul> <li><code>&lt;position&gt;</code></li> <li><code>&lt;showHeader&gt;</code></li> <li><code>&lt;visibleEverywhere&gt;</code></li> <li><code>&lt;visibilityExceptions&gt;</code></li> <li><code>cssClassName</code></li> </ul>"},{"location":"package/pip/menu/#example","title":"Example","text":"menu.xml <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;data xmlns=\"http://www.woltlab.com\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.woltlab.com http://www.woltlab.com/XSD/2019/menu.xsd\"&gt;\n&lt;import&gt;\n&lt;menu identifier=\"com.woltlab.wcf.FooterLinks\"&gt;\n&lt;title language=\"de\"&gt;Footer-Links&lt;/title&gt;\n&lt;title language=\"en\"&gt;Footer Links&lt;/title&gt;\n\n&lt;box&gt;\n&lt;position&gt;footer&lt;/position&gt;\n&lt;cssClassName&gt;boxMenuLinkGroup&lt;/cssClassName&gt;\n&lt;showHeader&gt;0&lt;/showHeader&gt;\n&lt;visibleEverywhere&gt;1&lt;/visibleEverywhere&gt;\n&lt;/box&gt;\n&lt;/menu&gt;\n&lt;/import&gt;\n\n&lt;delete&gt;\n&lt;menu identifier=\"com.woltlab.wcf.FooterLinks\" /&gt;\n&lt;/delete&gt;\n&lt;/data&gt;\n</code></pre>"},{"location":"package/pip/object-type-definition/","title":"Object Type Definition Package Installation Plugin","text":"<p>Registers an object type definition. An object type definition is a blueprint for a certain behaviour that is particularized by objectTypes. As an example: Tags can be attached to different types of content (such as forum posts or gallery images). The bulk of the work is implemented in a generalized fashion, with all the tags stored in a single database table. Certain things, such as permission checking, need to be particularized for the specific type of content, though. Thus tags (or rather \u201ctaggable content\u201d) are registered as an object type definition. Posts are then registered as an object type, implementing the \u201ctaggable content\u201d behaviour.</p> <p>Other types of object type definitions include attachments, likes, polls, subscriptions, or even the category system.</p>"},{"location":"package/pip/object-type-definition/#components","title":"Components","text":"<p>Each item is described as a <code>&lt;definition&gt;</code> element with the mandatory child <code>&lt;name&gt;</code> that should follow the naming pattern <code>&lt;packageIdentifier&gt;.&lt;definition&gt;</code>, e.g. <code>com.woltlab.wcf.example</code>.</p>"},{"location":"package/pip/object-type-definition/#interfacename","title":"<code>&lt;interfacename&gt;</code>","text":"<p>Optional</p> <p>The name of the PHP interface objectTypes have to implement.</p>"},{"location":"package/pip/object-type-definition/#example","title":"Example","text":"objectTypeDefinition.xml <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;data xmlns=\"http://www.woltlab.com\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.woltlab.com http://www.woltlab.com/XSD/2019/objectTypeDefinition.xsd\"&gt;\n&lt;import&gt;\n&lt;definition&gt;\n&lt;name&gt;com.woltlab.wcf.example&lt;/name&gt;\n&lt;interfacename&gt;wcf\\system\\example\\IExampleObjectType&lt;/interfacename&gt;\n&lt;/definition&gt;\n&lt;/import&gt;\n&lt;/data&gt;\n</code></pre>"},{"location":"package/pip/object-type/","title":"Object Type Package Installation Plugin","text":"<p>Registers an object type. Read about object types in the objectTypeDefinition PIP.</p>"},{"location":"package/pip/object-type/#components","title":"Components","text":"<p>Each item is described as a <code>&lt;type&gt;</code> element with the mandatory child <code>&lt;name&gt;</code> that should follow the naming pattern <code>&lt;packageIdentifier&gt;.&lt;definition&gt;</code>, e.g. <code>com.woltlab.wcf.example</code>.</p>"},{"location":"package/pip/object-type/#definitionname","title":"<code>&lt;definitionname&gt;</code>","text":"<p>The <code>&lt;name&gt;</code> of the objectTypeDefinition.</p>"},{"location":"package/pip/object-type/#classname","title":"<code>&lt;classname&gt;</code>","text":"<p>The name of the class providing the object types's behaviour, the class has to implement the <code>&lt;interfacename&gt;</code> interface of the object type definition.</p>"},{"location":"package/pip/object-type/#_1","title":"<code>&lt;*&gt;</code>","text":"<p>Optional</p> <p>Additional fields may be defined for specific definitions of object types. Refer to the documentation of these for further explanation.</p>"},{"location":"package/pip/object-type/#example","title":"Example","text":"objectType.xml <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;data xmlns=\"http://www.woltlab.com\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.woltlab.com http://www.woltlab.com/XSD/2019/objectType.xsd\"&gt;\n&lt;import&gt;\n&lt;type&gt;\n&lt;name&gt;com.woltlab.wcf.example&lt;/name&gt;\n&lt;definitionname&gt;com.woltlab.wcf.rebuildData&lt;/definitionname&gt;\n&lt;classname&gt;wcf\\system\\worker\\ExampleRebuildWorker&lt;/classname&gt;\n&lt;nicevalue&gt;130&lt;/nicevalue&gt;\n&lt;/type&gt;\n&lt;/import&gt;\n&lt;/data&gt;\n</code></pre>"},{"location":"package/pip/option/","title":"Option Package Installation Plugin","text":"<p>Registers new options. Options allow the administrator to configure the behaviour of installed packages. The specified values are exposed as PHP constants.</p>"},{"location":"package/pip/option/#category-components","title":"Category Components","text":"<p>Each category is described as an <code>&lt;category&gt;</code> element with the mandatory attribute <code>name</code>.</p>"},{"location":"package/pip/option/#parent","title":"<code>&lt;parent&gt;</code>","text":"<p>Optional</p> <p>The category\u2019s parent category.</p>"},{"location":"package/pip/option/#showorder","title":"<code>&lt;showorder&gt;</code>","text":"<p>Optional</p> <p>Specifies the order of this option within the parent category.</p>"},{"location":"package/pip/option/#options","title":"<code>&lt;options&gt;</code>","text":"<p>Optional</p> <p>The options element can contain a comma-separated list of options of which at least one needs to be enabled for the category to be shown to the administrator.</p>"},{"location":"package/pip/option/#option-components","title":"Option Components","text":"<p>Each option is described as an <code>&lt;option&gt;</code> element with the mandatory attribute <code>name</code>. The <code>name</code> is transformed into a PHP constant name by uppercasing it.</p>"},{"location":"package/pip/option/#categoryname","title":"<code>&lt;categoryname&gt;</code>","text":"<p>The option\u2019s category.</p>"},{"location":"package/pip/option/#optiontype","title":"<code>&lt;optiontype&gt;</code>","text":"<p>The type of input to be used for this option. Valid types are defined by the <code>wcf\\system\\option\\*OptionType</code> classes.</p>"},{"location":"package/pip/option/#defaultvalue","title":"<code>&lt;defaultvalue&gt;</code>","text":"<p>The value that is set after installation of a package. Valid values are defined by the <code>optiontype</code>.</p>"},{"location":"package/pip/option/#validationpattern","title":"<code>&lt;validationpattern&gt;</code>","text":"<p>Optional</p> <p>Defines a regular expression that is used to validate the value of a free form option (such as <code>text</code>).</p>"},{"location":"package/pip/option/#showorder_1","title":"<code>&lt;showorder&gt;</code>","text":"<p>Optional</p> <p>Specifies the order of this option within the category.</p>"},{"location":"package/pip/option/#selectoptions","title":"<code>&lt;selectoptions&gt;</code>","text":"<p>Optional</p> <p>Defined only for <code>select</code>, <code>multiSelect</code> and <code>radioButton</code> types.</p> <p>Specifies a newline-separated list of selectable values. Each line consists of an internal handle, followed by a colon (<code>:</code>, U+003A), followed by a language item. The language item is shown to the administrator, the internal handle is what is saved and exposed to the code.</p>"},{"location":"package/pip/option/#enableoptions","title":"<code>&lt;enableoptions&gt;</code>","text":"<p>Optional</p> <p>Defined only for <code>boolean</code>, <code>select</code> and <code>radioButton</code> types.</p> <p>Specifies a comma-separated list of options which should be visually enabled when this option is enabled. A leading exclamation mark (<code>!</code>, U+0021) will disable the specified option when this option is enabled. For <code>select</code> and <code>radioButton</code> types the list should be prefixed by the internal <code>selectoptions</code> handle followed by a colon (<code>:</code>, U+003A).</p> <p>This setting is a visual helper for the administrator only. It does not have an effect on the server side processing of the option.</p>"},{"location":"package/pip/option/#hidden","title":"<code>&lt;hidden&gt;</code>","text":"<p>Optional</p> <p>If <code>hidden</code> is set to <code>1</code> the option will not be shown to the administrator. It still can be modified programmatically.</p>"},{"location":"package/pip/option/#options_1","title":"<code>&lt;options&gt;</code>","text":"<p>Optional</p> <p>The options element can contain a comma-separated list of options of which at least one needs to be enabled for the option to be shown to the administrator.</p>"},{"location":"package/pip/option/#supporti18n","title":"<code>&lt;supporti18n&gt;</code>","text":"<p>Optional</p> <p>Specifies whether this option supports localized input.</p>"},{"location":"package/pip/option/#requirei18n","title":"<code>&lt;requirei18n&gt;</code>","text":"<p>Optional</p> <p>Specifies whether this option requires localized input (i.e. the administrator must specify a value for every installed language).</p>"},{"location":"package/pip/option/#_1","title":"<code>&lt;*&gt;</code>","text":"<p>Optional</p> <p>Additional fields may be defined by specific types of options. Refer to the documentation of these for further explanation.</p>"},{"location":"package/pip/option/#language-items","title":"Language Items","text":"<p>All relevant language items have to be put into the <code>wcf.acp.option</code> language item category.</p>"},{"location":"package/pip/option/#categories","title":"Categories","text":"<p>If you install a category named <code>example.sub</code>, you have to provide the language item <code>wcf.acp.option.category.example.sub</code>, which is used when displaying the options. If you want to provide an optional description of the category, you have to provide the language item <code>wcf.acp.option.category.example.sub.description</code>. Descriptions are only relevant for categories whose parent has a parent itself, i.e. categories on the third level.</p>"},{"location":"package/pip/option/#options_2","title":"Options","text":"<p>If you install an option named <code>module_example</code>, you have to provide the language item <code>wcf.acp.option.module_example</code>, which is used as a label for setting the option value. If you want to provide an optional description of the option, you have to provide the language item <code>wcf.acp.option.module_example.description</code>.</p>"},{"location":"package/pip/option/#example","title":"Example","text":"option.xml <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;data xmlns=\"http://www.woltlab.com\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.woltlab.com http://www.woltlab.com/XSD/2019/option.xsd\"&gt;\n&lt;import&gt;\n&lt;categories&gt;\n&lt;category name=\"example\" /&gt;\n&lt;category name=\"example.sub\"&gt;\n&lt;parent&gt;example&lt;/parent&gt;\n&lt;options&gt;module_example&lt;/options&gt;\n&lt;/category&gt;\n&lt;/categories&gt;\n\n&lt;options&gt;\n&lt;option name=\"module_example\"&gt;\n&lt;categoryname&gt;module.community&lt;/categoryname&gt;\n&lt;optiontype&gt;boolean&lt;/optiontype&gt;\n&lt;defaultvalue&gt;1&lt;/defaultvalue&gt;\n&lt;/option&gt;\n\n&lt;option name=\"example_integer\"&gt;\n&lt;categoryname&gt;example.sub&lt;/categoryname&gt;\n&lt;optiontype&gt;integer&lt;/optiontype&gt;\n&lt;defaultvalue&gt;10&lt;/defaultvalue&gt;\n&lt;minvalue&gt;5&lt;/minvalue&gt;\n&lt;maxvalue&gt;40&lt;/maxvalue&gt;\n&lt;/option&gt;\n\n&lt;option name=\"example_select\"&gt;\n&lt;categoryname&gt;example.sub&lt;/categoryname&gt;\n&lt;optiontype&gt;select&lt;/optiontype&gt;\n&lt;defaultvalue&gt;DESC&lt;/defaultvalue&gt;\n&lt;selectoptions&gt;ASC:wcf.global.sortOrder.ascending\n                    DESC:wcf.global.sortOrder.descending&lt;/selectoptions&gt;\n&lt;/option&gt;\n&lt;/options&gt;\n&lt;/import&gt;\n\n&lt;delete&gt;\n&lt;option name=\"outdated_example\" /&gt;\n&lt;/delete&gt;\n&lt;/data&gt;\n</code></pre>"},{"location":"package/pip/page/","title":"Page Package Installation Plugin","text":"<p>Registers page controllers, making them available for selection and configuration, including but not limited to boxes and menus.</p>"},{"location":"package/pip/page/#components","title":"Components","text":"<p>Each item is described as a <code>&lt;page&gt;</code> element with the mandatory attribute <code>identifier</code> that should follow the naming pattern <code>&lt;packageIdentifier&gt;.&lt;PageName&gt;</code>, e.g. <code>com.woltlab.wcf.MembersList</code>.</p>"},{"location":"package/pip/page/#pagetype","title":"<code>&lt;pageType&gt;</code>","text":""},{"location":"package/pip/page/#system","title":"<code>system</code>","text":"<p>The special <code>system</code> type is reserved for pages that pull their properties and content from a registered PHP class. Requires the <code>&lt;controller&gt;</code> element.</p>"},{"location":"package/pip/page/#html-text-or-tpl","title":"<code>html</code>, <code>text</code> or <code>tpl</code>","text":"<p>Provide arbitrary content, requires the <code>&lt;content&gt;</code> element.</p>"},{"location":"package/pip/page/#controller","title":"<code>&lt;controller&gt;</code>","text":"<p>Fully qualified class name for the controller, must implement <code>wcf\\page\\IPage</code> or <code>wcf\\form\\IForm</code>.</p>"},{"location":"package/pip/page/#handler","title":"<code>&lt;handler&gt;</code>","text":"<p>Fully qualified class name that can be optionally set to provide additional methods, such as displaying a badge for unread content and verifying permissions per page object id.</p>"},{"location":"package/pip/page/#name","title":"<code>&lt;name&gt;</code>","text":"<p>The <code>language</code> attribute is required and should specify the ISO-639-1 language code.</p> <p>The internal name displayed in the admin panel only, can be fully customized by the administrator and is immutable. Only one value is accepted and will be picked based on the site's default language, but you can provide localized values by including multiple <code>&lt;name&gt;</code> elements.</p>"},{"location":"package/pip/page/#parent","title":"<code>&lt;parent&gt;</code>","text":"<p>Sets the default parent page using its internal identifier, this setting controls the breadcrumbs and active menu item hierarchy.</p>"},{"location":"package/pip/page/#hasfixedparent","title":"<code>&lt;hasFixedParent&gt;</code>","text":"<p>Pages can be assigned any other page as parent page by default, set to <code>1</code> to make the parent setting immutable.</p>"},{"location":"package/pip/page/#permissions","title":"<code>&lt;permissions&gt;</code>","text":"<p>The comma represents a logical <code>or</code>, the check is successful if at least one permission is set.</p> <p>Comma separated list of permission names that will be checked one after another until at least one permission is set.</p>"},{"location":"package/pip/page/#options","title":"<code>&lt;options&gt;</code>","text":"<p>The comma represents a logical <code>or</code>, the check is successful if at least one option is enabled.</p> <p>Comma separated list of options that will be checked one after another until at least one option is set.</p>"},{"location":"package/pip/page/#excludefromlandingpage","title":"<code>&lt;excludeFromLandingPage&gt;</code>","text":"<p>Some pages should not be used as landing page, because they may not always be available and/or accessible to the user. For example, the account management page is available to logged-in users only and any guest attempting to visit that page would be presented with a permission denied message.</p> <p>Set this to <code>1</code> to prevent this page from becoming a landing page ever.</p>"},{"location":"package/pip/page/#requireobjectid","title":"<code>&lt;requireObjectID&gt;</code>","text":"<p>If the page requires an id of a specific object, like the user profile page requires the id of the user whose profile page is requested, <code>&lt;requireObjectID&gt;1&lt;/requireObjectID&gt;</code> has to be added. If this item is not present, <code>requireObjectID</code> defaults to <code>0</code>.</p>"},{"location":"package/pip/page/#availableduringofflinemode","title":"<code>&lt;availableDuringOfflineMode&gt;</code>","text":"<p>During offline mode, most pages should generally not be available. Certain pages, however, might still have to be accessible due to, for example, legal reasons. To make a page available during offline mode, <code>&lt;availableDuringOfflineMode&gt;1&lt;/availableDuringOfflineMode&gt;</code> has to be added. If this item is not present, <code>availableDuringOfflineMode</code> defaults to <code>0</code>.</p>"},{"location":"package/pip/page/#allowspiderstoindex","title":"<code>&lt;allowSpidersToIndex&gt;</code>","text":"<p>Administrators are able to set in the admin panel for each page, whether or not spiders are allowed to index it. The default value for this option can be set with the <code>allowSpidersToIndex</code> item whose value defaults to <code>0</code>.</p>"},{"location":"package/pip/page/#cssclassname","title":"<code>&lt;cssClassName&gt;</code>","text":"<p>To add custom CSS classes to a page\u2019s <code>&lt;body&gt;</code> HTML element, you can specify them via the <code>cssClassName</code> item.</p> <p>If you want to add multiple CSS classes, separate them with spaces!</p>"},{"location":"package/pip/page/#content","title":"<code>&lt;content&gt;</code>","text":"<p>The <code>language</code> attribute is required and should specify the ISO-639-1 language code.</p>"},{"location":"package/pip/page/#title","title":"<code>&lt;title&gt;</code>","text":"<p>The title element is required and controls the page title shown to the end users.</p>"},{"location":"package/pip/page/#content_1","title":"<code>&lt;content&gt;</code>","text":"<p>The content that should be used to populate the page, only used and required if the <code>pageType</code> equals <code>text</code>, <code>html</code> and <code>tpl</code>.</p>"},{"location":"package/pip/page/#example","title":"Example","text":"page.xml <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;data xmlns=\"http://www.woltlab.com\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.woltlab.com http://www.woltlab.com/XSD/2019/page.xsd\"&gt;\n&lt;import&gt;\n&lt;page identifier=\"com.woltlab.wcf.MembersList\"&gt;\n&lt;pageType&gt;system&lt;/pageType&gt;\n&lt;controller&gt;wcf\\page\\MembersListPage&lt;/controller&gt;\n&lt;name language=\"de\"&gt;Mitglieder&lt;/name&gt;\n&lt;name language=\"en\"&gt;Members&lt;/name&gt;\n&lt;options&gt;module_members_list&lt;/options&gt;\n&lt;permissions&gt;user.profile.canViewMembersList&lt;/permissions&gt;\n&lt;allowSpidersToIndex&gt;1&lt;/allowSpidersToIndex&gt;\n&lt;content language=\"en\"&gt;\n&lt;title&gt;Members&lt;/title&gt;\n&lt;/content&gt;\n&lt;content language=\"de\"&gt;\n&lt;title&gt;Mitglieder&lt;/title&gt;\n&lt;/content&gt;\n&lt;/page&gt;\n&lt;/import&gt;\n\n&lt;delete&gt;\n&lt;page identifier=\"com.woltlab.wcf.MembersList\" /&gt;\n&lt;/delete&gt;\n&lt;/data&gt;\n</code></pre>"},{"location":"package/pip/pip/","title":"Package Installation Plugin Package Installation Plugin","text":"<p>Registers new package installation plugins.</p>"},{"location":"package/pip/pip/#components","title":"Components","text":"<p>Each package installation plugin is described as an <code>&lt;pip&gt;</code> element with a <code>name</code> attribute and a PHP classname as the text content.</p> <p>The package installation plugin\u2019s class file must be installed into the <code>wcf</code> application and must not include classes outside the <code>\\wcf\\*</code> hierarchy to allow for proper uninstallation!</p>"},{"location":"package/pip/pip/#example","title":"Example","text":"packageInstallationPlugin.xml <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;data xmlns=\"http://www.woltlab.com\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.woltlab.com http://www.woltlab.com/XSD/2019/packageInstallationPlugin.xsd\"&gt;\n&lt;import&gt;\n&lt;pip name=\"custom\"&gt;wcf\\system\\package\\plugin\\CustomPackageInstallationPlugin&lt;/pip&gt;\n&lt;/import&gt;\n&lt;delete&gt;\n&lt;pip name=\"outdated\" /&gt;\n&lt;/delete&gt;\n&lt;/data&gt;\n</code></pre>"},{"location":"package/pip/script/","title":"Script Package Installation Plugin","text":"<p>Execute arbitrary PHP code during installation, update and uninstallation of the package.</p> <p>You must install the PHP script through the file package installation plugin.</p> <p>The installation will attempt to delete the script after successful execution.</p>"},{"location":"package/pip/script/#attributes","title":"Attributes","text":""},{"location":"package/pip/script/#application","title":"<code>application</code>","text":"<p>The <code>application</code> attribute must have the same value as the <code>application</code> attribute of the <code>file</code> package installation plugin instruction so that the correct file in the intended application directory is executed. For further information about the <code>application</code> attribute, refer to its documentation on the acpTemplate package installation plugin page.</p>"},{"location":"package/pip/script/#expected-value","title":"Expected value","text":"<p>The <code>script</code>-PIP expects a relative path to a <code>.php</code> file.</p>"},{"location":"package/pip/script/#naming-convention","title":"Naming convention","text":"<p>The PHP script is deployed by using the file package installation plugin. To prevent it from colliding with other install script (remember: You cannot overwrite files created by another plugin), we highly recommend to make use of these naming conventions:</p> <ul> <li>Installation: <code>install_&lt;package&gt;.php</code> (example: <code>install_com.woltlab.wbb.php</code>)</li> <li>Update: <code>update_&lt;package&gt;_&lt;targetVersion&gt;.php</code> (example: <code>update_com.woltlab.wbb_5.0.0_pl_1.php</code>)</li> </ul> <p><code>&lt;targetVersion&gt;</code> equals the version number of the current package being installed. If you're updating from <code>1.0.0</code> to <code>1.0.1</code>, <code>&lt;targetVersion&gt;</code> should read <code>1.0.1</code>.</p>"},{"location":"package/pip/script/#execution-environment","title":"Execution environment","text":"<p>The script is included using <code>include()</code> within ScriptPackageInstallationPlugin::run(). This grants you access to the class members, including <code>$this-&gt;installation</code>.</p> <p>You can retrieve the package id of the current package through <code>$this-&gt;installation-&gt;getPackageID()</code>.</p>"},{"location":"package/pip/smiley/","title":"Smiley Package Installation Plugin","text":"<p>Installs new smileys.</p>"},{"location":"package/pip/smiley/#components","title":"Components","text":"<p>Each smiley is described as an <code>&lt;smiley&gt;</code> element with the mandatory attribute <code>name</code>.</p>"},{"location":"package/pip/smiley/#title","title":"<code>&lt;title&gt;</code>","text":"<p>Short human readable description of the smiley.</p>"},{"location":"package/pip/smiley/#path2x","title":"<code>&lt;path(2x)?&gt;</code>","text":"<p>The files must be installed using the file PIP.</p> <p>File path relative to the root of WoltLab Suite Core. <code>path2x</code> is optional and being used for High-DPI screens.</p>"},{"location":"package/pip/smiley/#aliases","title":"<code>&lt;aliases&gt;</code>","text":"<p>Optional</p> <p>List of smiley aliases. Aliases must be separated by a line feed character (<code>\\n</code>, U+000A).</p>"},{"location":"package/pip/smiley/#showorder","title":"<code>&lt;showorder&gt;</code>","text":"<p>Optional</p> <p>Determines at which position of the smiley list the smiley is shown.</p>"},{"location":"package/pip/smiley/#example","title":"Example","text":"smiley.xml <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;data xmlns=\"http://www.woltlab.com\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.woltlab.com http://www.woltlab.com/XSD/2019/smiley.xsd\"&gt;\n&lt;import&gt;\n&lt;smiley name=\":example:\"&gt;\n&lt;title&gt;example&lt;/title&gt;\n&lt;path&gt;images/smilies/example.png&lt;/path&gt;\n&lt;path2x&gt;images/smilies/example@2x.png&lt;/path2x&gt;\n&lt;aliases&gt;&lt;![CDATA[:alias:\n:more_aliases:]]&gt;&lt;/aliases&gt;\n&lt;/smiley&gt;\n&lt;/import&gt;\n&lt;/data&gt;\n</code></pre>"},{"location":"package/pip/sql/","title":"SQL Package Installation Plugin","text":"<p>Execute SQL instructions using a MySQL-flavored syntax.</p> <p>This file is parsed by WoltLab Suite Core to allow reverting of certain changes, but not every syntax MySQL supports is recognized by the parser. To avoid any troubles, you should always use statements relying on the SQL standard.</p>"},{"location":"package/pip/sql/#expected-value","title":"Expected Value","text":"<p>The <code>sql</code> package installation plugin expects a relative path to a <code>.sql</code> file.</p>"},{"location":"package/pip/sql/#features","title":"Features","text":""},{"location":"package/pip/sql/#logging","title":"Logging","text":"<p>WoltLab Suite Core uses a SQL parser to extract queries and log certain actions. This allows WoltLab Suite Core to revert some of the changes you apply upon package uninstallation.</p> <p>The logged changes are:</p> <ul> <li><code>CREATE TABLE</code></li> <li><code>ALTER TABLE \u2026 ADD COLUMN</code></li> <li><code>ALTER TABLE \u2026 ADD \u2026 KEY</code></li> </ul>"},{"location":"package/pip/sql/#instance-number","title":"Instance Number","text":"<p>It is possible to use different instance numbers, e.g. two separate WoltLab Suite Core installations within one database. WoltLab Suite Core requires you to always use <code>wcf1_&lt;tableName&gt;</code> or <code>&lt;app&gt;1_&lt;tableName&gt;</code> (e.g. <code>blog1_blog</code> in WoltLab Suite Blog), the number (<code>1</code>) will be automatically replaced prior to execution. If you every use anything other but <code>1</code>, you will eventually break things, thus always use <code>1</code>!</p>"},{"location":"package/pip/sql/#table-type","title":"Table Type","text":"<p>WoltLab Suite Core will determine the type of database tables on its own: If the table contains a <code>FULLTEXT</code> index, it uses <code>MyISAM</code>, otherwise <code>InnoDB</code> is used.</p>"},{"location":"package/pip/sql/#limitations","title":"Limitations","text":""},{"location":"package/pip/sql/#logging_1","title":"Logging","text":"<p>WoltLab Suite Core cannot revert changes to the database structure which would cause to the data to be either changed or new data to be incompatible with the original format. Additionally, WoltLab Suite Core does not track regular SQL queries such as <code>DELETE</code> or <code>UPDATE</code>.</p>"},{"location":"package/pip/sql/#triggers","title":"Triggers","text":"<p>WoltLab Suite Core does not support trigger since MySQL does not support execution of triggers if the event was fired by a cascading foreign key action. If you really need triggers, you should consider adding them by custom SQL queries using a script.</p>"},{"location":"package/pip/sql/#example","title":"Example","text":"<p><code>package.xml</code>:</p> <pre><code>&lt;instruction type=\"sql\"&gt;install.sql&lt;/instruction&gt;\n</code></pre> <p>Example content:</p> install.sql <pre><code>CREATE TABLE wcf1_foo_bar (\nfooID INT(10) NOT NULL AUTO_INCREMENT PRIMARY KEY,\npackageID INT(10) NOT NULL,\nbar VARCHAR(255) NOT NULL DEFAULT '',\nfoobar VARCHAR(50) NOT NULL DEFAULT '',\n\nUNIQUE KEY baz (bar, foobar)\n);\n\nALTER TABLE wcf1_foo_bar ADD FOREIGN KEY (packageID) REFERENCES wcf1_package (packageID) ON DELETE CASCADE;\n</code></pre>"},{"location":"package/pip/style/","title":"Style Package Installation Plugin","text":"<p>Install styles during package installation.</p> <p>The <code>style</code> package installation plugins expects a relative path to a <code>.tar</code> file, a<code>.tar.gz</code> file or a <code>.tgz</code> file. Please use the ACP's export mechanism to export styles.</p>"},{"location":"package/pip/style/#example-in-packagexml","title":"Example in <code>package.xml</code>","text":"<pre><code>&lt;instruction type=\"style\"&gt;style.tgz&lt;/instruction&gt;\n</code></pre>"},{"location":"package/pip/template-delete/","title":"Template Delete Package Installation Plugin","text":"<p>Available since WoltLab Suite 5.5.</p> <p>Deletes frontend templates installed with the template package installation plugin.</p> <p>You cannot delete templates provided by other packages.</p>"},{"location":"package/pip/template-delete/#components","title":"Components","text":"<p>Each item is described as a <code>&lt;template&gt;</code> element with an optional <code>application</code>, which behaves like it does for acp templates. The templates are identified by their name like when adding template listeners, i.e. by the file name without the <code>.tpl</code> file extension.</p>"},{"location":"package/pip/template-delete/#example","title":"Example","text":"templateDelete.xml <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;data xmlns=\"http://www.woltlab.com\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.woltlab.com http://www.woltlab.com/XSD/2019/templateDelete.xsd\"&gt;\n&lt;delete&gt;\n&lt;template&gt;fouAdd&lt;/template&gt;\n&lt;template application=\"app\"&gt;__appAdd&lt;/template&gt;\n&lt;/delete&gt;\n&lt;/data&gt;\n</code></pre>"},{"location":"package/pip/template-listener/","title":"Template Listener Package Installation Plugin","text":"<p>Registers template listeners. Template listeners supplement event listeners, which modify server side behaviour, by adding additional template code to display additional elements. The added template code behaves as if it was part of the original template (i.e. it has access to all local variables).</p>"},{"location":"package/pip/template-listener/#components","title":"Components","text":"<p>Each event listener is described as an <code>&lt;templatelistener&gt;</code> element with a <code>name</code> attribute. As the <code>name</code> attribute has only be introduced with WSC 3.0, it is not yet mandatory to allow backwards compatibility. If <code>name</code> is not given, the system automatically sets the name based on the id of the event listener in the database.</p>"},{"location":"package/pip/template-listener/#templatename","title":"<code>&lt;templatename&gt;</code>","text":"<p>The template name is the name of the template in which the event is fired. It correspondes to the <code>eventclassname</code> field of event listeners.</p>"},{"location":"package/pip/template-listener/#eventname","title":"<code>&lt;eventname&gt;</code>","text":"<p>The event name is the name given when the event is fired to identify different events within the same template.</p>"},{"location":"package/pip/template-listener/#templatecode","title":"<code>&lt;templatecode&gt;</code>","text":"<p>The given template code is literally copied into the target template during compile time. The original template is not modified. If multiple template listeners listen to a single event their output is concatenated using the line feed character (<code>\\n</code>, U+000A) in the order defined by the <code>niceValue</code>.</p> <p>It is recommend that the only code is an <code>{include}</code> of a template to enable changes by the administrator. Names of templates included by a template listener start with two underscores by convention.</p>"},{"location":"package/pip/template-listener/#environment","title":"<code>&lt;environment&gt;</code>","text":"<p>The value of the environment element can either be <code>admin</code> or <code>user</code> and is <code>user</code> if no value is given. The value determines if the template listener will be executed in the frontend (<code>user</code>) or the backend (<code>admin</code>).</p>"},{"location":"package/pip/template-listener/#nice","title":"<code>&lt;nice&gt;</code>","text":"<p>Optional</p> <p>The nice value element can contain an integer value out of the interval <code>[-128,127]</code> with <code>0</code> being the default value if the element is omitted. The nice value determines the execution order of template listeners. Template listeners with smaller nice values are executed first. If the nice value of two template listeners is equal, the order is undefined.</p> <p>If you pass a value out of the mentioned interval, the value will be adjusted to the closest value in the interval.</p>"},{"location":"package/pip/template-listener/#options","title":"<code>&lt;options&gt;</code>","text":"<p>Optional</p> <p>The options element can contain a comma-separated list of options of which at least one needs to be enabled for the template listener to be executed.</p>"},{"location":"package/pip/template-listener/#permissions","title":"<code>&lt;permissions&gt;</code>","text":"<p>Optional</p> <p>The permissions element can contain a comma-separated list of permissions of which the active user needs to have at least one for the template listener to be executed.</p>"},{"location":"package/pip/template-listener/#example","title":"Example","text":"templateListener.xml <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;data xmlns=\"http://www.woltlab.com\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.woltlab.com http://www.woltlab.com/XSD/2019/templatelistener.xsd\"&gt;\n&lt;import&gt;\n&lt;templatelistener name=\"example\"&gt;\n&lt;environment&gt;user&lt;/environment&gt;\n&lt;templatename&gt;headIncludeJavaScript&lt;/templatename&gt;\n&lt;eventname&gt;javascriptInclude&lt;/eventname&gt;\n&lt;templatecode&gt;&lt;![CDATA[{include file='__myCustomJavaScript'}]]&gt;&lt;/templatecode&gt;\n&lt;/templatelistener&gt;\n&lt;/import&gt;\n\n&lt;delete&gt;\n&lt;templatelistener name=\"oldTemplateListenerName\"&gt;\n&lt;environment&gt;user&lt;/environment&gt;\n&lt;templatename&gt;headIncludeJavaScript&lt;/templatename&gt;\n&lt;eventname&gt;javascriptInclude&lt;/eventname&gt;\n&lt;/templatelistener&gt;\n&lt;/delete&gt;\n&lt;/data&gt;\n</code></pre>"},{"location":"package/pip/template/","title":"Template Package Installation Plugin","text":"<p>Add templates for frontend pages and forms by providing an archive containing the template files.</p> <p>You cannot overwrite templates provided by other packages.</p> <p>This package installation plugin behaves exactly like the acpTemplate package installation plugin except for installing frontend templates instead of backend/acp templates.</p>"},{"location":"package/pip/user-group-option/","title":"User Group Option Package Installation Plugin","text":"<p>Registers new user group options (\u201cpermissions\u201d). The behaviour of this package installation plugin closely follows the option PIP.</p>"},{"location":"package/pip/user-group-option/#category-components","title":"Category Components","text":"<p>The category definition works exactly like the option PIP.</p>"},{"location":"package/pip/user-group-option/#option-components","title":"Option Components","text":"<p>The fields <code>hidden</code>, <code>supporti18n</code> and <code>requirei18n</code> do not apply. The following extra fields are defined:</p>"},{"location":"package/pip/user-group-option/#adminmoduserdefaultvalue","title":"<code>&lt;(admin|mod|user)defaultvalue&gt;</code>","text":"<p>Defines the <code>defaultvalue</code>s for subsets of the groups:</p> Type Description admin Groups where the <code>admin.user.accessibleGroups</code> user group option includes every group. mod Groups where the <code>mod.general.canUseModeration</code> is set to <code>true</code>. user Groups where the internal group type is neither <code>UserGroup::EVERYONE</code> nor <code>UserGroup::GUESTS</code>."},{"location":"package/pip/user-group-option/#usersonly","title":"<code>&lt;usersonly&gt;</code>","text":"<p>Makes the option unavailable for groups with the group type <code>UserGroup::GUESTS</code>.</p>"},{"location":"package/pip/user-group-option/#language-items","title":"Language Items","text":"<p>All relevant language items have to be put into the <code>wcf.acp.group</code> language item category.</p>"},{"location":"package/pip/user-group-option/#categories","title":"Categories","text":"<p>If you install a category named <code>user.foo</code>, you have to provide the language item <code>wcf.acp.group.option.category.user.foo</code>, which is used when displaying the options. If you want to provide an optional description of the category, you have to provide the language item <code>wcf.acp.group.option.category.user.foo.description</code>. Descriptions are only relevant for categories whose parent has a parent itself, i.e. categories on the third level.</p>"},{"location":"package/pip/user-group-option/#options","title":"Options","text":"<p>If you install an option named <code>user.foo.canBar</code>, you have to provide the language item <code>wcf.acp.group.option.user.foo.canBar</code>, which is used as a label for setting the option value. If you want to provide an optional description of the option, you have to provide the language item <code>wcf.acp.group.option.user.foo.canBar.description</code>.</p>"},{"location":"package/pip/user-menu/","title":"User Menu Package Installation Plugin","text":"<p>Registers new user menu items.</p>"},{"location":"package/pip/user-menu/#components","title":"Components","text":"<p>Each item is described as an <code>&lt;usermenuitem&gt;</code> element with the mandatory attribute <code>name</code>.</p>"},{"location":"package/pip/user-menu/#parent","title":"<code>&lt;parent&gt;</code>","text":"<p>Optional</p> <p>The item\u2019s parent item.</p>"},{"location":"package/pip/user-menu/#showorder","title":"<code>&lt;showorder&gt;</code>","text":"<p>Optional</p> <p>Specifies the order of this item within the parent item.</p>"},{"location":"package/pip/user-menu/#controller","title":"<code>&lt;controller&gt;</code>","text":"<p>The fully qualified class name of the target controller. If not specified this item serves as a category.</p>"},{"location":"package/pip/user-menu/#link","title":"<code>&lt;link&gt;</code>","text":"<p>Additional components if <code>&lt;controller&gt;</code> is set, the full external link otherwise.</p>"},{"location":"package/pip/user-menu/#iconclassname","title":"<code>&lt;iconclassname&gt;</code>","text":"<p>Use an icon only for top-level items.</p> <p>Name of the Font Awesome icon class.</p>"},{"location":"package/pip/user-menu/#options","title":"<code>&lt;options&gt;</code>","text":"<p>Optional</p> <p>The options element can contain a comma-separated list of options of which at least one needs to be enabled for the menu item to be shown.</p>"},{"location":"package/pip/user-menu/#permissions","title":"<code>&lt;permissions&gt;</code>","text":"<p>Optional</p> <p>The permissions element can contain a comma-separated list of permissions of which the active user needs to have at least one for the menu item to be shown.</p>"},{"location":"package/pip/user-menu/#classname","title":"<code>&lt;classname&gt;</code>","text":"<p>The name of the class providing the user menu item\u2019s behaviour, the class has to implement the <code>wcf\\system\\menu\\user\\IUserMenuItemProvider</code> interface.</p>"},{"location":"package/pip/user-menu/#example","title":"Example","text":"userMenu.xml <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;data xmlns=\"http://www.woltlab.com\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.woltlab.com http://www.woltlab.com/XSD/2019/userMenu.xsd\"&gt;\n&lt;import&gt;\n&lt;usermenuitem name=\"wcf.user.menu.foo\"&gt;\n&lt;iconclassname&gt;fa-home&lt;/iconclassname&gt;\n&lt;/usermenuitem&gt;\n\n&lt;usermenuitem name=\"wcf.user.menu.foo.bar\"&gt;\n&lt;controller&gt;wcf\\page\\FooBarListPage&lt;/controller&gt;\n&lt;parent&gt;wcf.user.menu.foo&lt;/parent&gt;\n&lt;permissions&gt;user.foo.canBar&lt;/permissions&gt;\n&lt;classname&gt;wcf\\system\\menu\\user\\FooBarMenuItemProvider&lt;/classname&gt;\n&lt;/usermenuitem&gt;\n\n&lt;usermenuitem name=\"wcf.user.menu.foo.baz\"&gt;\n&lt;controller&gt;wcf\\page\\FooBazListPage&lt;/controller&gt;\n&lt;parent&gt;wcf.user.menu.foo&lt;/parent&gt;\n&lt;permissions&gt;user.foo.canBaz&lt;/permissions&gt;\n&lt;options&gt;module_foo_bar&lt;/options&gt;\n&lt;/usermenuitem&gt;\n&lt;/import&gt;\n&lt;/data&gt;\n</code></pre>"},{"location":"package/pip/user-notification-event/","title":"User Notification Event Package Installation Plugin","text":"<p>Registers new user notification events.</p>"},{"location":"package/pip/user-notification-event/#components","title":"Components","text":"<p>Each package installation plugin is described as an <code>&lt;event&gt;</code> element with the mandatory child <code>&lt;name&gt;</code>.</p>"},{"location":"package/pip/user-notification-event/#objecttype","title":"<code>&lt;objectType&gt;</code>","text":"<p>The <code>(name, objectType)</code> pair must be unique.</p> <p>The given object type must implement the <code>com.woltlab.wcf.notification.objectType</code> definition.</p>"},{"location":"package/pip/user-notification-event/#classname","title":"<code>&lt;classname&gt;</code>","text":"<p>The name of the class providing the event's behaviour, the class has to implement the <code>wcf\\system\\user\\notification\\event\\IUserNotificationEvent</code> interface.</p>"},{"location":"package/pip/user-notification-event/#preset","title":"<code>&lt;preset&gt;</code>","text":"<p>Defines whether this event is enabled by default.</p>"},{"location":"package/pip/user-notification-event/#presetmailnotificationtype","title":"<code>&lt;presetmailnotificationtype&gt;</code>","text":"<p>Avoid using this option, as sending unsolicited mail can be seen as spamming.</p> <p>One of <code>instant</code> or <code>daily</code>. Defines whether this type of email notifications is enabled by default.</p>"},{"location":"package/pip/user-notification-event/#options","title":"<code>&lt;options&gt;</code>","text":"<p>Optional</p> <p>The options element can contain a comma-separated list of options of which at least one needs to be enabled for the notification type to be available.</p>"},{"location":"package/pip/user-notification-event/#permissions","title":"<code>&lt;permissions&gt;</code>","text":"<p>Optional</p> <p>The permissions element can contain a comma-separated list of permissions of which the active user needs to have at least one for the notification type to be available.</p>"},{"location":"package/pip/user-notification-event/#example","title":"Example","text":"userNotificationEvent.xml <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;data xmlns=\"http://www.woltlab.com\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.woltlab.com http://www.woltlab.com/XSD/2019/userNotificationEvent.xsd\"&gt;\n&lt;import&gt;\n&lt;event&gt;\n&lt;name&gt;like&lt;/name&gt;\n&lt;objecttype&gt;com.woltlab.example.comment.like.notification&lt;/objecttype&gt;\n&lt;classname&gt;wcf\\system\\user\\notification\\event\\ExampleCommentLikeUserNotificationEvent&lt;/classname&gt;\n&lt;preset&gt;1&lt;/preset&gt;\n&lt;options&gt;module_like&lt;/options&gt;\n&lt;/event&gt;\n&lt;/import&gt;\n&lt;/data&gt;\n</code></pre>"},{"location":"package/pip/user-option/","title":"User Option Package Installation Plugin","text":"<p>Registers new user options (profile fields / user settings). The behaviour of this package installation plugin closely follows the option PIP.</p>"},{"location":"package/pip/user-option/#category-components","title":"Category Components","text":"<p>The category definition works exactly like the option PIP.</p>"},{"location":"package/pip/user-option/#option-components","title":"Option Components","text":"<p>The fields <code>hidden</code>, <code>supporti18n</code> and <code>requirei18n</code> do not apply. The following extra fields are defined:</p>"},{"location":"package/pip/user-option/#required","title":"<code>&lt;required&gt;</code>","text":"<p>Requires that a value is provided.</p>"},{"location":"package/pip/user-option/#askduringregistration","title":"<code>&lt;askduringregistration&gt;</code>","text":"<p>If set to <code>1</code> the field is shown during user registration in the frontend.</p>"},{"location":"package/pip/user-option/#editable","title":"<code>&lt;editable&gt;</code>","text":"<p>Bitfield with the following options (constants in <code>wcf\\data\\user\\option\\UserOption</code>)</p> Name Value EDITABILITY_OWNER 1 EDITABILITY_ADMINISTRATOR 2 EDITABILITY_OWNER_DURING_REGISTRATION 4"},{"location":"package/pip/user-option/#visible","title":"<code>&lt;visible&gt;</code>","text":"<p>Bitfield with the following options (constants in <code>wcf\\data\\user\\option\\UserOption</code>)</p> Name Value VISIBILITY_OWNER 1 VISIBILITY_ADMINISTRATOR 2 VISIBILITY_REGISTERED 4 VISIBILITY_GUEST 8"},{"location":"package/pip/user-option/#searchable","title":"<code>&lt;searchable&gt;</code>","text":"<p>If set to <code>1</code> the field is searchable.</p>"},{"location":"package/pip/user-option/#outputclass","title":"<code>&lt;outputclass&gt;</code>","text":"<p>PHP class responsible for output formatting of this field. the class has to implement the <code>wcf\\system\\option\\user\\IUserOptionOutput</code> interface.</p>"},{"location":"package/pip/user-option/#language-items","title":"Language Items","text":"<p>All relevant language items have to be put into the <code>wcf.user.option</code> language item category.</p>"},{"location":"package/pip/user-option/#categories","title":"Categories","text":"<p>If you install a category named <code>example</code>, you have to provide the language item <code>wcf.user.option.category.example</code>, which is used when displaying the options. If you want to provide an optional description of the category, you have to provide the language item <code>wcf.user.option.category.example.description</code>. Descriptions are only relevant for categories whose parent has a parent itself, i.e. categories on the third level.</p>"},{"location":"package/pip/user-option/#options","title":"Options","text":"<p>If you install an option named <code>exampleOption</code>, you have to provide the language item <code>wcf.user.option.exampleOption</code>, which is used as a label for setting the option value. If you want to provide an optional description of the option, you have to provide the language item <code>wcf.user.option.exampleOption.description</code>.</p>"},{"location":"package/pip/user-profile-menu/","title":"User Profile Menu Package Installation Plugin","text":"<p>Registers new user profile tabs.</p>"},{"location":"package/pip/user-profile-menu/#components","title":"Components","text":"<p>Each tab is described as an <code>&lt;userprofilemenuitem&gt;</code> element with the mandatory attribute <code>name</code>.</p>"},{"location":"package/pip/user-profile-menu/#classname","title":"<code>&lt;classname&gt;</code>","text":"<p>The name of the class providing the tab\u2019s behaviour, the class has to implement the <code>wcf\\system\\menu\\user\\profile\\content\\IUserProfileMenuContent</code> interface.</p>"},{"location":"package/pip/user-profile-menu/#showorder","title":"<code>&lt;showorder&gt;</code>","text":"<p>Optional</p> <p>Determines at which position of the tab list the tab is shown.</p>"},{"location":"package/pip/user-profile-menu/#options","title":"<code>&lt;options&gt;</code>","text":"<p>Optional</p> <p>The options element can contain a comma-separated list of options of which at least one needs to be enabled for the tab to be shown.</p>"},{"location":"package/pip/user-profile-menu/#permissions","title":"<code>&lt;permissions&gt;</code>","text":"<p>Optional</p> <p>The permissions element can contain a comma-separated list of permissions of which the active user needs to have at least one for the tab to be shown.</p>"},{"location":"package/pip/user-profile-menu/#example","title":"Example","text":"userProfileMenu.xml <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;data xmlns=\"http://www.woltlab.com\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.woltlab.com http://www.woltlab.com/XSD/2019/userProfileMenu.xsd\"&gt;\n&lt;import&gt;\n&lt;userprofilemenuitem name=\"example\"&gt;\n&lt;classname&gt;wcf\\system\\menu\\user\\profile\\content\\ExampleProfileMenuContent&lt;/classname&gt;\n&lt;showorder&gt;3&lt;/showorder&gt;\n&lt;options&gt;module_example&lt;/options&gt;\n&lt;/userprofilemenuitem&gt;\n&lt;/import&gt;\n&lt;/data&gt;\n</code></pre>"},{"location":"php/apps/","title":"Apps for WoltLab Suite","text":""},{"location":"php/apps/#introduction","title":"Introduction","text":"<p>Apps are among the most powerful components in WoltLab Suite. Unlike plugins that extend an existing functionality and pages, apps have their own frontend with a dedicated namespace, database table prefixes and template locations.</p> <p>However, apps are meant to be a logical (and to some extent physical) separation from other parts of the framework, including other installed apps. They offer an additional layer of isolation and enable you to re-use class and template names that are already in use by the Core itself.</p> <p>If you've come here, thinking about the question if your next package should be an app instead of a regular plugin, the result is almost always: No.</p>"},{"location":"php/apps/#differences-to-plugins","title":"Differences to Plugins","text":"<p>Apps do offer a couple of unique features that are not available to plugins and there are valid reasons to use one instead of a plugin, but they also increase both the code and system complexity. There is a performance penalty for each installed app, regardless if it is actively used in a request or not, simplying being there forces the Core to include it in many places, for example, class resolution or even simple tasks such as constructing a link.</p>"},{"location":"php/apps/#unique-namespace","title":"Unique Namespace","text":"<p>Each app has its own unique namespace that is entirely separated from the Core and any other installed apps. The namespace is derived from the last part of the package identifier, for example, <code>com.example.foo</code> will yield the namespace <code>foo</code>.</p> <p>The namespace is always relative to the installation directory of the app, it doesn't matter if the app is installed on <code>example.com/foo/</code> or in <code>example.com/bar/</code>, the namespace will always resolve to the right directory.</p> <p>This app namespace is also used for ACP templates, frontend templates and files:</p> <pre><code>&lt;!-- somewhere in the package.xml --&gt;\n&lt;instructions type=\"file\" application=\"foo\" /&gt;\n</code></pre>"},{"location":"php/apps/#unique-database-table-prefix","title":"Unique Database Table Prefix","text":"<p>All database tables make use of a generic prefix that is derived from one of the installed apps, including <code>wcf</code> which resolves to the Core itself. Following the aforementioned example, the new prefix <code>fooN_</code> will be automatically registered and recognized in any generated statement.</p> <p>Any <code>DatabaseObject</code> that uses the app's namespace is automatically assumed to use the app's database prefix. For instance, <code>foo\\data\\bar\\Bar</code> is implicitly mapped to the database table <code>fooN_bar</code>.</p> <p>The app prefix is recognized in SQL-PIPs and statements that reference one of its database tables are automatically rewritten to use the Core's instance number.</p>"},{"location":"php/apps/#separate-domain-and-path-configuration","title":"Separate Domain and Path Configuration","text":"<p>Any controller that is provided by a plugin is served from the configured domain and path of the corresponding app, such as plugins for the Core are always served from the Core's directory. Apps are different and use their own domain and/or path to present their content, additionally, this allows the app to re-use a controller name that is already provided by the Core or any other app itself.</p>"},{"location":"php/apps/#creating-an-app","title":"Creating an App","text":"<p>This is a non-reversible operation! Once a package has been installed, its type cannot be changed without uninstalling and reinstalling the entire package, an app will always be an app and vice versa.</p>"},{"location":"php/apps/#packagexml","title":"<code>package.xml</code>","text":"<p>The <code>package.xml</code> supports two additional elements in the <code>&lt;packageinformation&gt;</code> block that are unique to applications.</p>"},{"location":"php/apps/#isapplication1isapplication","title":"<code>&lt;isapplication&gt;1&lt;/isapplication&gt;</code>","text":"<p>This element is responsible to flag a package as an app.</p>"},{"location":"php/apps/#applicationdirectoryexampleapplicationdirectory","title":"<code>&lt;applicationdirectory&gt;example&lt;/applicationdirectory&gt;</code>","text":"<p>Sets the suggested name of the application directory when installing it, the path result in <code>&lt;path-to-the-core&gt;/example/</code>. If you leave this element out, the app identifier (<code>com.example.foo -&gt; foo</code>) will be used instead.</p>"},{"location":"php/apps/#minimum-required-files","title":"Minimum Required Files","text":"<p>An example project with the source code can be found on GitHub, it includes everything that is required for a basic app.</p>"},{"location":"php/code-style-documentation/","title":"Documentation","text":"<p>The following documentation conventions are used by us for our own packages. While you do not have to follow every rule, you are encouraged to do so.</p>"},{"location":"php/code-style-documentation/#database-objects","title":"Database Objects","text":""},{"location":"php/code-style-documentation/#database-table-columns-as-properties","title":"Database Table Columns as Properties","text":"<p>As the database table columns are not explicit properties of the classes extending <code>wcf\\data\\DatabaseObject</code> but rather stored in <code>DatabaseObject::$data</code> and accessible via <code>DatabaseObject::__get($name)</code>, the IDE we use, PhpStorm, is neither able to autocomplete such property access nor to interfere the type of the property.</p> <p>To solve this problem, <code>@property-read</code> tags must be added to the class documentation which registers the database table columns as public read-only properties:</p> <pre><code> * @property-read   propertyType    $propertyName   property description\n</code></pre> <p>The properties have to be in the same order as the order in the database table.</p> <p>The following table provides templates for common description texts so that similar database table columns have similar description texts.</p> property description template and example unique object id <code>unique id of the {object name}</code>example: <code>unique id of the acl option</code> id of the delivering package <code>id of the package which delivers the {object name}</code>example: <code>id of the package which delivers the acl option</code> show order for nested structure <code>position of the {object name} in relation to its siblings</code>example: <code>position of the ACP menu item in relation to its siblings</code> show order within different object <code>position of the {object name} in relation to the other {object name}s in the {parent object name}</code>example: <code>position of the label in relation to the other labels in the label group</code> required permissions <code>comma separated list of user group permissions of which the active user needs to have at least one to see (access, \u2026) the {object name}</code>example:<code>comma separated list of user group permissions of which the active user needs to have at least one to see the ACP menu item</code> required options <code>comma separated list of options of which at least one needs to be enabled for the {object name} to be shown (accessible, \u2026)</code>example:<code>comma separated list of options of which at least one needs to be enabled for the ACP menu item to be shown</code> id of the user who has created the object <code>id of the user who created (wrote, \u2026) the {object name} (or `null` if the user does not exist anymore (or if the {object name} has been created by a guest))</code>example:<code>id of the user who wrote the comment or `null` if the user does not exist anymore or if the comment has been written by a guest</code> name of the user who has created the object <code>name of the user (or guest) who created (wrote, \u2026) the {object name}</code>example:<code>name of the user or guest who wrote the comment</code> additional data <code>array with additional data of the {object name}</code>example:<code>array with additional data of the user activity event</code> time-related columns <code>timestamp at which the {object name} has been created (written, \u2026)</code>example:<code>timestamp at which the comment has been written</code> boolean options <code>is `1` (or `0`) if the {object name} \u2026 (and thus \u2026), otherwise `0` (or `1`)</code>example:<code>is `1` if the ad is disabled and thus not shown, otherwise `0`</code> <code>$cumulativeLikes</code> <code>cumulative result of likes (counting `+1`) and dislikes (counting `-1`) for the {object name}</code>example:<code>cumulative result of likes (counting `+1`) and dislikes (counting `-1`) for the article</code> <code>$comments</code> <code>number of comments on the {object name}</code>example:<code>number of comments on the article</code> <code>$views</code> <code>number of times the {object name} has been viewed</code>example:<code>number of times the article has been viewed</code> text field with potential language item name as value <code>{text type} of the {object name} or name of language item which contains the {text type}</code>example:<code>description of the cronjob or name of language item which contains the description</code> <code>$objectTypeID</code> <code>id of the `{object type definition name}` object type</code>example:<code>id of the `com.woltlab.wcf.modifiableContent` object type</code>"},{"location":"php/code-style-documentation/#database-object-editors","title":"Database Object Editors","text":""},{"location":"php/code-style-documentation/#class-tags","title":"Class Tags","text":"<p>Any database object editor class comment must have to following tags to properly support autocompletion by IDEs:</p> <pre><code>/**\n * \u2026\n * @method static   {DBO class name}    create(array $parameters = [])\n * @method      {DBO class name}    getDecoratedObject()\n * @mixin       {DBO class name}\n */\n</code></pre> <p>The only exception to this rule is if the class overwrites the <code>create()</code> method which itself has to be properly documentation then.</p> <p>The first and second line makes sure that when calling the <code>create()</code> or <code>getDecoratedObject()</code> method, the return value is correctly recognized and not just a general <code>DatabaseObject</code> instance. The third line tells the IDE (if <code>@mixin</code> is supported) that the database object editor decorates the database object and therefore offers autocompletion for properties and methods from the database object class itself.</p>"},{"location":"php/code-style-documentation/#runtime-caches","title":"Runtime Caches","text":""},{"location":"php/code-style-documentation/#class-tags_1","title":"Class Tags","text":"<p>Any class implementing the IRuntimeCache interface must have the following class tags:</p> <pre><code>/**\n * \u2026\n * @method  {DBO class name}[]  getCachedObjects()\n * @method  {DBO class name}    getObject($objectID)\n * @method  {DBO class name}[]  getObjects(array $objectIDs)\n */\n</code></pre> <p>These tags ensure that when calling any of the mentioned methods, the return value refers to the concrete database object and not just generically to DatabaseObject.</p>"},{"location":"php/code-style/","title":"Code Style","text":"<p>The following code style conventions are used by us for our own packages. While you do not have to follow every rule, you are encouraged to do so.</p> <p>For information about how to document your code, please refer to the documentation page.</p>"},{"location":"php/code-style/#general-code-style","title":"General Code Style","text":""},{"location":"php/code-style/#naming-conventions","title":"Naming conventions","text":"<p>The relevant naming conventions are:</p> <ul> <li>Upper camel case:   The first letters of all compound words are written in upper case.</li> <li>Lower camel case:   The first letters of compound words are written in upper case, except for the first letter which is written in lower case.</li> <li>Screaming snake case:   All letters are written in upper case and compound words are separated by underscores.</li> </ul> Type Convention Example Variable lower camel case <code>$variableName</code> Class upper camel case <code>class UserGroupEditor</code> Properties lower camel case <code>public $propertyName</code> Method lower camel case <code>public function getObjectByName()</code> Constant screaming snake case <code>MODULE_USER_THING</code>"},{"location":"php/code-style/#arrays","title":"Arrays","text":"<p>For arrays, use the short array syntax introduced with PHP 5.4. The following example illustrates the different cases that can occur when working with arrays and how to format them:</p> <pre><code>&lt;?php\n\n$empty = [];\n\n$oneElement = [1];\n$multipleElements = [1, 2, 3];\n\n$oneElementWithKey = ['firstElement' =&gt; 1];\n$multipleElementsWithKey = [\n    'firstElement' =&gt; 1,\n    'secondElement' =&gt; 2,\n    'thirdElement' =&gt; 3\n];\n</code></pre>"},{"location":"php/code-style/#ternary-operator","title":"Ternary Operator","text":"<p>The ternary operator can be used for short conditioned assignments:</p> <pre><code>&lt;?php\n\n$name = isset($tagArgs['name']) ? $tagArgs['name'] : 'default';\n</code></pre> <p>The condition and the values should be short so that the code does not result in a very long line which thus decreases the readability compared to an <code>if-else</code> statement.</p> <p>Parentheses may only be used around the condition and not around the whole statement:</p> <pre><code>&lt;?php\n\n// do not do it like this\n$name = (isset($tagArgs['name']) ? $tagArgs['name'] : 'default');\n</code></pre> <p>Parentheses around the conditions may not be used to wrap simple function calls:</p> <pre><code>&lt;?php\n\n// do not do it like this\n$name = (isset($tagArgs['name'])) ? $tagArgs['name'] : 'default';\n</code></pre> <p>but have to be used for comparisons or other binary operators:</p> <pre><code>&lt;?php\n\n$value = ($otherValue &gt; $upperLimit) ? $additionalValue : $otherValue;\n</code></pre> <p>If you need to use more than one binary operator, use an <code>if-else</code> statement.</p> <p>The same rules apply to assigning array values:</p> <pre><code>&lt;?php\n\n$values = [\n    'first' =&gt; $firstValue,\n    'second' =&gt; $secondToggle ? $secondValueA : $secondValueB,\n    'third' =&gt; ($thirdToogle &gt; 13) ? $thirdToogleA : $thirdToogleB\n];\n</code></pre> <p>or return values:</p> <pre><code>&lt;?php\n\nreturn isset($tagArgs['name']) ? $tagArgs['name'] : 'default';\n</code></pre>"},{"location":"php/code-style/#whitespaces","title":"Whitespaces","text":"<p>You have to put a whitespace in front of the following things:</p> <ul> <li>equal sign in assignments: <code>$x = 1;</code></li> <li>comparison operators: <code>$x == 1</code></li> <li>opening bracket of a block <code>public function test() {</code></li> </ul> <p>You have to put a whitespace behind the following things:</p> <ul> <li>equal sign in assignments: <code>$x = 1;</code></li> <li>comparison operators: <code>$x == 1</code></li> <li>comma in a function/method parameter list if the comma is not followed by a line break: <code>public function test($a, $b) {</code></li> <li><code>if</code>, <code>for</code>, <code>foreach</code>, <code>while</code>: <code>if ($x == 1)</code></li> </ul>"},{"location":"php/code-style/#classes","title":"Classes","text":""},{"location":"php/code-style/#referencing-class-names","title":"Referencing Class Names","text":"<p>If you have to reference a class name inside a php file, you have to use the <code>class</code> keyword.</p> <pre><code>&lt;?php\n\n// not like this\n$className = 'wcf\\data\\example\\Example';\n\n// like this\nuse wcf\\data\\example\\Example;\n$className = Example::class;\n</code></pre>"},{"location":"php/code-style/#static-getters-of-databaseobject-classes","title":"Static Getters (of <code>DatabaseObject</code> Classes)","text":"<p>Some database objects provide static getters, either if they are decorators or for a unique combination of database table columns, like <code>wcf\\data\\box\\Box::getBoxByIdentifier()</code>:</p> files/lib/data/box/Box.class.php <pre><code>&lt;?php\nnamespace wcf\\data\\box;\nuse wcf\\data\\DatabaseObject;\nuse wcf\\system\\WCF;\n\nclass Box extends DatabaseObject {\n    /**\n     * Returns the box with the given identifier.\n     *\n     * @param   string      $identifier\n     * @return  Box|null\n     */\n    public static function getBoxByIdentifier($identifier) {\n        $sql = \"SELECT  *\n                FROM    wcf1_box\n                WHERE   identifier = ?\";\n        $statement = WCF::getDB()-&gt;prepare($sql);\n        $statement-&gt;execute([$identifier]);\n\n        return $statement-&gt;fetchObject(self::class);\n    }\n}\n</code></pre> <p>Such methods should always either return the desired object or <code>null</code> if the object does not exist. <code>wcf\\system\\database\\statement\\PreparedStatement::fetchObject()</code> already takes care of this distinction so that its return value can simply be returned by such methods.</p> <p>The name of such getters should generally follow the convention <code>get{object type}By{column or other description}</code>.</p>"},{"location":"php/code-style/#long-method-calls","title":"Long method calls","text":"<p>In some instances, methods with many argument have to be called which can result in lines of code like this one:</p> <pre><code>&lt;?php\n\n\\wcf\\system\\search\\SearchIndexManager::getInstance()-&gt;set('com.woltlab.wcf.article', $articleContent-&gt;articleContentID, $articleContent-&gt;content, $articleContent-&gt;title, $articles[$articleContent-&gt;articleID]-&gt;time, $articles[$articleContent-&gt;articleID]-&gt;userID, $articles[$articleContent-&gt;articleID]-&gt;username, $articleContent-&gt;languageID, $articleContent-&gt;teaser);\n</code></pre> <p>which is hardly readable. Therefore, the line must be split into multiple lines with each argument in a separate line:</p> <pre><code>&lt;?php\n\n\\wcf\\system\\search\\SearchIndexManager::getInstance()-&gt;set(\n    'com.woltlab.wcf.article',\n    $articleContent-&gt;articleContentID,\n    $articleContent-&gt;content,\n    $articleContent-&gt;title,\n    $articles[$articleContent-&gt;articleID]-&gt;time,\n    $articles[$articleContent-&gt;articleID]-&gt;userID,\n    $articles[$articleContent-&gt;articleID]-&gt;username,\n    $articleContent-&gt;languageID,\n    $articleContent-&gt;teaser\n);\n</code></pre> <p>In general, this rule applies to the following methods:</p> <ul> <li><code>wcf\\system\\edit\\EditHistoryManager::add()</code></li> <li><code>wcf\\system\\message\\quote\\MessageQuoteManager::addQuote()</code></li> <li><code>wcf\\system\\message\\quote\\MessageQuoteManager::getQuoteID()</code></li> <li><code>wcf\\system\\search\\SearchIndexManager::set()</code></li> <li><code>wcf\\system\\user\\object\\watch\\UserObjectWatchHandler::updateObject()</code></li> <li><code>wcf\\system\\user\\notification\\UserNotificationHandler::fireEvent()</code></li> </ul>"},{"location":"php/database-access/","title":"Database Access","text":"<p>Database Objects provide a convenient and object-oriented approach to work with the database, but there can be use-cases that require raw access including writing methods for model classes. This section assumes that you have either used prepared statements before or at least understand how it works.</p>"},{"location":"php/database-access/#the-preparedstatement-object","title":"The PreparedStatement Object","text":"<p>The database access is designed around PreparedStatement, built on top of PHP's <code>PDOStatement</code> so that you call all of <code>PDOStatement</code>'s methods, and each query requires you to obtain a statement object.</p> <pre><code>&lt;?php\n$statement = \\wcf\\system\\WCF::getDB()-&gt;prepare(\"SELECT * FROM wcf1_example\");\n$statement-&gt;execute();\nwhile ($row = $statement-&gt;fetchArray()) {\n    // handle result\n}\n</code></pre>"},{"location":"php/database-access/#query-parameters","title":"Query Parameters","text":"<p>The example below illustrates the usage of parameters where each value is replaced with the generic <code>?</code>-placeholder. Values are provided by calling <code>$statement-&gt;execute()</code> with a continuous, one-dimensional array that exactly match the number of question marks.</p> <pre><code>&lt;?php\n$sql = \"SELECT  *\n        FROM    wcf1_example\n        WHERE   exampleID = ?\n                OR bar IN (?, ?, ?, ?, ?)\";\n$statement = \\wcf\\system\\WCF::getDB()-&gt;prepare($sql);\n$statement-&gt;execute([\n    $exampleID,\n    $list, $of, $values, $for, $bar\n]);\nwhile ($row = $statement-&gt;fetchArray()) {\n    // handle result\n}\n</code></pre>"},{"location":"php/database-access/#fetching-a-single-result","title":"Fetching a Single Result","text":"<p>Do not attempt to use <code>fetchSingleRow()</code> or <code>fetchSingleColumn()</code> if the result contains more than one row.</p> <p>You can opt-in to retrieve only a single row from database and make use of shortcut methods to reduce the code that you have to write.</p> <pre><code>&lt;?php\n$sql = \"SELECT  *\n        FROM    wcf1_example\n        WHERE   exampleID = ?\";\n$statement = \\wcf\\system\\WCF::getDB()-&gt;prepare($sql, 1);\n$statement-&gt;execute([$exampleID]);\n$row = $statement-&gt;fetchSingleRow();\n</code></pre> <p>There are two distinct differences when comparing with the example on query parameters above:</p> <ol> <li>The method <code>prepare()</code> receives a secondary parameter that will be appended to the query as <code>LIMIT 1</code>.</li> <li>Data is read using <code>fetchSingleRow()</code> instead of <code>fetchArray()</code> or similar methods, that will read one result and close the cursor.</li> </ol>"},{"location":"php/database-access/#fetch-by-column","title":"Fetch by Column","text":"<p>There is no way to return another column from the same row if you use <code>fetchColumn()</code> to retrieve data.</p> <p>Fetching an array is only useful if there is going to be more than one column per result row, otherwise accessing the column directly is much more convenient and increases the code readability.</p> <pre><code>&lt;?php\n$sql = \"SELECT  bar\n        FROM    wcf1_example\";\n$statement = \\wcf\\system\\WCF::getDB()-&gt;prepare($sql);\n$statement-&gt;execute();\nwhile ($bar = $statement-&gt;fetchColumn()) {\n    // handle result\n}\n$bar = $statement-&gt;fetchSingleColumn();\n</code></pre> <p>Similar to fetching a single row, you can also issue a query that will select a single row, but reads only one column from the result row.</p> <pre><code>&lt;?php\n$sql = \"SELECT  bar\n        FROM    wcf1_example\n        WHERE   exampleID = ?\";\n$statement = \\wcf\\system\\WCF::getDB()-&gt;prepare($sql, 1);\n$statement-&gt;execute([$exampleID]);\n$bar = $statement-&gt;fetchSingleColumn();\n</code></pre>"},{"location":"php/database-access/#fetching-all-results","title":"Fetching All Results","text":"<p>If you want to fetch all results of a query but only store them in an array without directly processing them, in most cases, you can rely on built-in methods.</p> <p>To fetch all rows of query, you can use <code>PDOStatement::fetchAll()</code> with <code>\\PDO::FETCH_ASSOC</code> as the first parameter:</p> <pre><code>&lt;?php\n$sql = \"SELECT  *\n        FROM    wcf1_example\";\n$statement = \\wcf\\system\\WCF::getDB()-&gt;prepare($sql);\n$statement-&gt;execute();\n$rows = $statement-&gt;fetchAll(\\PDO::FETCH_ASSOC);\n</code></pre> <p>As a result, you get an array containing associative arrays with the rows of the <code>wcf{WCF_N}_example</code> database table as content.</p> <p>If you only want to fetch a list of the values of a certain column, you can use <code>\\PDO::FETCH_COLUMN</code> as the first parameter:</p> <pre><code>&lt;?php\n$sql = \"SELECT  exampleID\n        FROM    wcf1_example\";\n$statement = \\wcf\\system\\WCF::getDB()-&gt;prepare($sql);\n$statement-&gt;execute();\n$exampleIDs = $statement-&gt;fetchAll(\\PDO::FETCH_COLUMN);\n</code></pre> <p>As a result, you get an array with all <code>exampleID</code> values.</p> <p>The <code>PreparedStatement</code> class adds an additional methods that covers another common use case in our code: Fetching two columns and using the first column's value as the array key and the second column's value as the array value. This case is covered by <code>PreparedStatement::fetchMap()</code>:</p> <pre><code>&lt;?php\n$sql = \"SELECT  exampleID, userID\n        FROM    wcf1_example_mapping\";\n$statement = \\wcf\\system\\WCF::getDB()-&gt;prepare($sql);\n$statement-&gt;execute();\n$map = $statement-&gt;fetchMap('exampleID', 'userID');\n</code></pre> <p><code>$map</code> is a one-dimensional array where each <code>exampleID</code> value maps to the corresponding <code>userID</code> value.</p> <p>If there are multiple entries for a certain <code>exampleID</code> value with different <code>userID</code> values, the existing entry in the array will be overwritten and contain the last read value from the database table. Therefore, this method should generally only be used for unique combinations.</p> <p>If you do not have a combination of columns with unique pairs of values, but you want to get a list of <code>userID</code> values with the same <code>exampleID</code>, you can set the third parameter of <code>fetchMap()</code> to <code>false</code> and get a list:</p> <pre><code>&lt;?php\n$sql = \"SELECT  exampleID, userID\n        FROM    wcf1_example_mapping\";\n$statement = \\wcf\\system\\WCF::getDB()-&gt;prepare($sql);\n$statement-&gt;execute();\n$map = $statement-&gt;fetchMap('exampleID', 'userID', false);\n</code></pre> <p>Now, as a result, you get a two-dimensional array with the array keys being the <code>exampleID</code> values and the array values being arrays with all <code>userID</code> values from rows with the respective <code>exampleID</code> value.</p>"},{"location":"php/database-access/#building-complex-conditions","title":"Building Complex Conditions","text":"<p>Building conditional conditions can turn out to be a real mess and it gets even worse with SQL's <code>IN (\u2026)</code> which requires as many placeholders as there will be values. The solutions is <code>PreparedStatementConditionBuilder</code>, a simple but useful helper class with a bulky name, it is also the class used when accessing <code>DatabaseObjecList::getConditionBuilder()</code>.</p> <pre><code>&lt;?php\n$conditions = new \\wcf\\system\\database\\util\\PreparedStatementConditionBuilder();\n$conditions-&gt;add(\"exampleID = ?\", [$exampleID]);\nif (!empty($valuesForBar)) {\n    $conditions-&gt;add(\"(bar IN (?) OR baz = ?)\", [$valuesForBar, $baz]);\n}\n</code></pre> <p>The <code>IN (?)</code> in the example above is automatically expanded to match the number of items contained in <code>$valuesForBar</code>. Be aware that the method will generate an invalid query if <code>$valuesForBar</code> is empty!</p>"},{"location":"php/database-access/#insert-or-update-in-bulk","title":"INSERT or UPDATE in Bulk","text":"<p>Prepared statements not only protect against SQL injection by separating the logical query and the actual data, but also provides the ability to reuse the same query with different values. This leads to a performance improvement as the code does not have to transmit the query with for every data set and only has to parse and analyze the query once.</p> <pre><code>&lt;?php\n$data = ['abc', 'def', 'ghi'];\n\n$sql = \"INSERT INTO  wcf1_example\n                     (bar)\n        VALUES       (?)\";\n$statement = \\wcf\\system\\WCF::getDB()-&gt;prepare($sql);\n\n\\wcf\\system\\WCF::getDB()-&gt;beginTransaction();\nforeach ($data as $bar) {\n    $statement-&gt;execute([$bar]);\n}\n\\wcf\\system\\WCF::getDB()-&gt;commitTransaction();\n</code></pre> <p>It is generally advised to wrap bulk operations in a transaction as it allows the database to optimize the process, including fewer I/O operations.</p> <pre><code>&lt;?php\n$data = [\n    1 =&gt; 'abc',\n    3 =&gt; 'def',\n    4 =&gt; 'ghi'\n];\n\n$sql = \"UPDATE  wcf1_example\n        SET     bar = ?\n        WHERE   exampleID = ?\";\n$statement = \\wcf\\system\\WCF::getDB()-&gt;prepare($sql);\n\n\\wcf\\system\\WCF::getDB()-&gt;beginTransaction();\nforeach ($data as $exampleID =&gt; $bar) {\n    $statement-&gt;execute([\n        $bar,\n        $exampleID\n    ]);\n}\n\\wcf\\system\\WCF::getDB()-&gt;commitTransaction();\n</code></pre>"},{"location":"php/database-objects/","title":"Database Objects","text":"<p>WoltLab Suite uses a unified interface to work with database rows using an object based approach instead of using native arrays holding arbitrary data. Each database table is mapped to a model class that is designed to hold a single record from that table and expose methods to work with the stored data, for example providing assistance when working with normalized datasets.</p> <p>Developers are required to provide the proper DatabaseObject implementations themselves, they're not automatically generated, all though the actual code that needs to be written is rather small. The following examples assume the fictional database table <code>wcf1_example</code>, <code>exampleID</code> as the auto-incrementing primary key and the column <code>bar</code> to store some text.</p>"},{"location":"php/database-objects/#databaseobject","title":"DatabaseObject","text":"<p>The basic model derives from <code>wcf\\data\\DatabaseObject</code> and provides a convenient constructor to fetch a single row or construct an instance using pre-loaded rows.</p> files/lib/data/example/Example.class.php <pre><code>&lt;?php\nnamespace wcf\\data\\example;\nuse wcf\\data\\DatabaseObject;\n\nclass Example extends DatabaseObject {}\n</code></pre> <p>The class is intended to be empty by default and there only needs to be code if you want to add additional logic to your model. Both the class name and primary key are determined by <code>DatabaseObject</code> using the namespace and class name of the derived class. The example above uses the namespace <code>wcf\\\u2026</code> which is used as table prefix and the class name <code>Example</code> is converted into <code>exampleID</code>, resulting in the database table name <code>wcfN_example</code> with the primary key <code>exampleID</code>.</p> <p>You can prevent this automatic guessing by setting the class properties <code>$databaseTableName</code> and <code>$databaseTableIndexName</code> manually.</p>"},{"location":"php/database-objects/#databaseobjectdecorator","title":"DatabaseObjectDecorator","text":"<p>If you already have a <code>DatabaseObject</code> class and would like to extend it with additional data or methods, for example by providing a class <code>ViewableExample</code> which features view-related changes without polluting the original object, you can use <code>DatabaseObjectDecorator</code> which a default implementation of a decorator for database objects.</p> files/lib/data/example/ViewableExample.class.php <pre><code>&lt;?php\nnamespace wcf\\data\\example;\nuse wcf\\data\\DatabaseObjectDecorator;\n\nclass ViewableExample extends DatabaseObjectDecorator {\n    protected static $baseClass = Example::class;\n\n    public function getOutput() {\n        $output = '';\n\n        // [determine output]\n\n        return $output;\n    }\n}\n</code></pre> <p>It is mandatory to set the static <code>$baseClass</code> property to the name of the decorated class.</p> <p>Like for any decorator, you can directly access the decorated object's properties and methods for a decorated object by accessing the property or calling the method on the decorated object. You can access the decorated objects directly via <code>DatabaseObjectDecorator::getDecoratedObject()</code>.</p>"},{"location":"php/database-objects/#databaseobjecteditor","title":"DatabaseObjectEditor","text":"<p>This is the low-level interface to manipulate data rows, it is recommended to use <code>AbstractDatabaseObjectAction</code>.</p> <p>Adding, editing and deleting models is done using the <code>DatabaseObjectEditor</code> class that decorates a <code>DatabaseObject</code> and uses its data to perform the actions.</p> files/lib/data/example/ExampleEditor.class.php <pre><code>&lt;?php\nnamespace wcf\\data\\example;\nuse wcf\\data\\DatabaseObjectEditor;\n\nclass ExampleEditor extends DatabaseObjectEditor {\n    protected static $baseClass = Example::class;\n}\n</code></pre> <p>The editor class requires you to provide the fully qualified name of the model, that is the class name including the complete namespace. Database table name and index key will be pulled directly from the model.</p>"},{"location":"php/database-objects/#create-a-new-row","title":"Create a new row","text":"<p>Inserting a new row into the database table is provided through <code>DatabaseObjectEditor::create()</code> which yields a <code>DatabaseObject</code> instance after creation.</p> <pre><code>&lt;?php\n$example = \\wcf\\data\\example\\ExampleEditor::create([\n    'bar' =&gt; 'Hello World!'\n]);\n\n// output: Hello World!\necho $example-&gt;bar;\n</code></pre>"},{"location":"php/database-objects/#updating-an-existing-row","title":"Updating an existing row","text":"<p>The internal state of the decorated <code>DatabaseObject</code> is not altered at any point, the values will still be the same after editing or deleting the represented row. If you need an object with the latest data, you'll have to discard the current object and refetch the data from database.</p> <pre><code>&lt;?php\n$example = new \\wcf\\data\\example\\Example($id);\n$exampleEditor = new \\wcf\\data\\example\\ExampleEditor($example);\n$exampleEditor-&gt;update([\n    'bar' =&gt; 'baz'\n]);\n\n// output: Hello World!\necho $example-&gt;bar;\n\n// re-creating the object will query the database again and retrieve the updated value\n$example = new \\wcf\\data\\example\\Example($example-&gt;id);\n\n// output: baz\necho $example-&gt;bar;\n</code></pre>"},{"location":"php/database-objects/#deleting-a-row","title":"Deleting a row","text":"<p>Similar to the update process, the decorated <code>DatabaseObject</code> is not altered and will then point to an inexistent row.</p> <pre><code>&lt;?php\n$example = new \\wcf\\data\\example\\Example($id);\n$exampleEditor = new \\wcf\\data\\example\\ExampleEditor($example);\n$exampleEditor-&gt;delete();\n</code></pre>"},{"location":"php/database-objects/#databaseobjectlist","title":"DatabaseObjectList","text":"<p>Every row is represented as a single instance of the model, but the instance creation deals with single rows only. Retrieving larger sets of rows would be quite inefficient due to the large amount of queries that will be dispatched. This is solved with the <code>DatabaseObjectList</code> object that exposes an interface to query the database table using arbitrary conditions for data selection. All rows will be fetched using a single query and the resulting rows are automatically loaded into separate models.</p> files/lib/data/example/ExampleList.class.php <pre><code>&lt;?php\nnamespace wcf\\data\\example;\nuse wcf\\data\\DatabaseObjectList;\n\nclass ExampleList extends DatabaseObjectList {\n    public $className = Example::class;\n}\n</code></pre> <p>The following code listing illustrates loading a large set of examples and iterating over the list to retrieve the objects.</p> <pre><code>&lt;?php\n$exampleList = new \\wcf\\data\\example\\ExampleList();\n// add constraints using the condition builder\n$exampleList-&gt;getConditionBuilder()-&gt;add('bar IN (?)', [['Hello World!', 'bar', 'baz']]);\n// actually read the rows\n$exampleList-&gt;readObjects();\nforeach ($exampleList as $example) {\n    echo $example-&gt;bar;\n}\n\n// retrieve the models directly instead of iterating over them\n$examples = $exampleList-&gt;getObjects();\n\n// just retrieve the number of rows\n$exampleCount = $exampleList-&gt;countObjects();\n</code></pre> <p><code>DatabaseObjectList</code> implements both SeekableIterator and Countable.</p> <p>Additionally, <code>DatabaseObjectList</code> objects has the following three public properties that are useful when fetching data with lists:</p> <ul> <li><code>$sqlLimit</code> determines how many rows are fetched.   If its value is <code>0</code> (which is the default value), all results are fetched.   So be careful when dealing with large tables and you only want a limited number of rows:   Set <code>$sqlLimit</code> to a value larger than zero!</li> <li><code>$sqlOffset</code>:   Paginated pages like a thread list use this feature a lot, it allows you to skip a given number of results.   Imagine you want to display 20 threads per page but there are a total of 60 threads available.   In this case you would specify <code>$sqlLimit = 20</code> and <code>$sqlOffset = 20</code> which will skip the first 20 threads, effectively displaying thread 21 to 40.</li> <li><code>$sqlOrderBy</code> determines by which column(s) the rows are sorted in which order.   Using our example in <code>$sqlOffset</code> you might want to display the 20 most recent threads on page 1, thus you should specify the order field and its direction, e.g. <code>$sqlOrderBy = 'thread.lastPostTime DESC'</code> which returns the most recent thread first.</li> </ul> <p>For more advanced usage, there two additional fields that deal with the type of objects returned. First, let's go into a bit more detail what setting the <code>$className</code> property actually does:</p> <ol> <li>It is the type of database object in which the rows are wrapped.</li> <li>It determines which database table is actually queried and which index is used (see the <code>$databaseTableName</code> and <code>$databaseTableIndexName</code> properties of <code>DatabaseObject</code>).</li> </ol> <p>Sometimes you might use the database table of some database object but wrap the rows in another database object. This can be achieved by setting the <code>$objectClassName</code> property to the desired class name.</p> <p>In other cases, you might want to wrap the created objects in a database object decorator which can be done by setting the <code>$decoratorClassName</code> property to the desired class name:</p> <pre><code>&lt;?php\n$exampleList = new \\wcf\\data\\example\\ExampleList();\n$exampleList-&gt;decoratorClassName = \\wcf\\data\\example\\ViewableExample::class;\n</code></pre> <p>Of course, you do not have to set the property after creating the list object, you can also set it by creating a dedicated class:</p> files/lib/data/example/ViewableExampleList.class.php <pre><code>&lt;?php\nnamespace wcf\\data\\example;\n\nclass ViewableExampleList extends ExampleList {\n    public $decoratorClassName = ViewableExample::class;\n}\n</code></pre>"},{"location":"php/database-objects/#abstractdatabaseobjectaction","title":"AbstractDatabaseObjectAction","text":"<p>Row creation and manipulation can be performed using the aforementioned <code>DatabaseObjectEditor</code> class, but this approach has two major issues:</p> <ol> <li>Row creation, update and deletion takes place silently without notifying any other components.</li> <li>Data is passed to the database adapter without any further processing.</li> </ol> <p>The <code>AbstractDatabaseObjectAction</code> solves both problems by wrapping around the editor class and thus provide an additional layer between the action that should be taken and the actual process. The first problem is solved by a fixed set of events being fired, the second issue is addressed by having a single entry point for all data editing.</p> files/lib/data/example/ExampleAction.class.php <pre><code>&lt;?php\nnamespace wcf\\data\\example;\nuse wcf\\data\\AbstractDatabaseObjectAction;\n\nclass ExampleAction extends AbstractDatabaseObjectAction {\n    public $className = ExampleEditor::class;\n}\n</code></pre>"},{"location":"php/database-objects/#executing-an-action","title":"Executing an Action","text":"<p>The method <code>AbstractDatabaseObjectAction::validateAction()</code> is internally used for AJAX method invocation and must not be called programmatically.</p> <p>The next example represents the same functionality as seen for <code>DatabaseObjectEditor</code>:</p> <pre><code>&lt;?php\nuse wcf\\data\\example\\ExampleAction;\n\n// create a row\n$exampleAction = new ExampleAction([], 'create', [\n    'data' =&gt; ['bar' =&gt; 'Hello World']\n]);\n$example = $exampleAction-&gt;executeAction()['returnValues'];\n\n// update a row using the id\n$exampleAction = new ExampleAction([1], 'update', [\n    'data' =&gt; ['bar' =&gt; 'baz']\n]);\n$exampleAction-&gt;executeAction();\n\n// delete a row using a model\n$exampleAction = new ExampleAction([$example], 'delete');\n$exampleAction-&gt;executeAction();\n</code></pre> <p>You can access the return values both by storing the return value of <code>executeAction()</code> or by retrieving it via <code>getReturnValues()</code>.</p> <p>Events <code>initializeAction</code>, <code>validateAction</code> and <code>finalizeAction</code></p>"},{"location":"php/database-objects/#custom-method-with-ajax-support","title":"Custom Method with AJAX Support","text":"<p>This section is about adding the method <code>baz()</code> to <code>ExampleAction</code> and calling it via AJAX.</p>"},{"location":"php/database-objects/#ajax-validation","title":"AJAX Validation","text":"<p>Methods of an action cannot be called via AJAX, unless they have a validation method. This means that <code>ExampleAction</code> must define both a <code>public function baz()</code> and <code>public function validateBaz()</code>, the name for the validation method is constructed by upper-casing the first character of the method name and prepending <code>validate</code>.</p> <p>The lack of the companion <code>validate*</code> method will cause the AJAX proxy to deny the request instantaneously. Do not add a validation method if you don't want it to be callable via AJAX ever!</p>"},{"location":"php/database-objects/#create-update-and-delete","title":"create, update and delete","text":"<p>The methods <code>create</code>, <code>update</code> and <code>delete</code> are available for all classes deriving from <code>AbstractDatabaseObjectAction</code> and directly pass the input data to the <code>DatabaseObjectEditor</code>. These methods deny access to them via AJAX by default, unless you explicitly enable access. Depending on your case, there are two different strategies to enable AJAX access to them.</p> <pre><code>&lt;?php\nnamespace wcf\\data\\example;\nuse wcf\\data\\AbstractDatabaseObjectAction;\n\nclass ExampleAction extends AbstractDatabaseObjectAction {\n    // `create()` can now be called via AJAX if the requesting user posses the listed permissions\n    protected $permissionsCreate = ['admin.example.canManageExample'];\n\n    public function validateUpdate() {\n        // your very own validation logic that does not make use of the\n        // built-in `$permissionsUpdate` property\n\n        // you can still invoke the built-in permissions check if you like to\n        parent::validateUpdate();\n    }\n}\n</code></pre>"},{"location":"php/database-objects/#allow-invokation-by-guests","title":"Allow Invokation by Guests","text":"<p>Invoking methods is restricted to logged-in users by default and the only way to override this behavior is to alter the property <code>$allowGuestAccess</code>. It is a simple string array that is expected to hold all methods that should be accessible by users, excluding their companion validation methods.</p>"},{"location":"php/database-objects/#acp-access-only","title":"ACP Access Only","text":"<p>Method access is usually limited by permissions, but sometimes there might be the need for some added security to avoid mistakes. The <code>$requireACP</code> property works similar to <code>$allowGuestAccess</code>, but enforces the request to originate from the ACP together with a valid ACP session, ensuring that only users able to access the ACP can actually invoke these methods.</p>"},{"location":"php/exceptions/","title":"Exceptions","text":""},{"location":"php/exceptions/#spl-exceptions","title":"SPL Exceptions","text":"<p>The Standard PHP Library (SPL) provides some exceptions that should be used whenever possible.</p>"},{"location":"php/exceptions/#custom-exceptions","title":"Custom Exceptions","text":"<p>Do not use <code>wcf\\system\\exception\\SystemException</code> anymore, use specific exception classes!</p> <p>The following table contains a list of custom exceptions that are commonly used. All of the exceptions are found in the <code>wcf\\system\\exception</code> namespace.</p> Class name (examples) when to use <code>IllegalLinkException</code> access to a page that belongs to a non-existing object, executing actions on specific non-existing objects (is shown as http 404 error to the user) <code>ImplementationException</code> a class does not implement an expected interface <code>InvalidObjectArgument</code> 5.4+ API method support generic objects but specific implementation requires objects of specific (sub)class and different object is given <code>InvalidObjectTypeException</code> object type is not of an expected object type definition <code>InvalidSecurityTokenException</code> given security token does not match the security token of the active user's session <code>ParentClassException</code> a class does not extend an expected (parent) class <code>PermissionDeniedException</code> page access without permission, action execution without permission (is shown as http 403 error to the user) <code>UserInputException</code> user input does not pass validation"},{"location":"php/exceptions/#sensitive-arguments-in-stack-traces","title":"Sensitive Arguments in Stack Traces","text":"<p>Sometimes sensitive values are passed as a function or method argument. If the callee throws an Exception, these values will be part of the Exception\u2019s stack trace and logged, unless the Exception is caught and ignored.</p> <p>WoltLab Suite will automatically suppress the values of parameters named like they might contain sensitive values, namely arguments matching the regular expression <code>/(?:^(?:password|passphrase|secret)|(?:Password|Passphrase|Secret))/</code>.</p> <p>If you need to suppress additional arguments from appearing in the stack trace, you can add the <code>\\wcf\\SensitiveArgument</code> attribute to such parameters. Arguments are only supported as of PHP 8 and ignored as comments in lower PHP versions. In PHP 7, such arguments will not be suppressed, but the code will continue to work. Make sure to insert a linebreak between the attribute and the parameter name.</p> <p>Example:</p> wcfsetup/install/files/lib/data/user/User.class.php<pre><code>&lt;?php\n\nnamespace wcf\\data\\user;\n\n// \u2026\n\nfinal class User extends DatabaseObject implements IPopoverObject, IRouteController, IUserContent\n{\n    // \u2026\n\n    public function checkPassword(\n        #[\\wcf\\SensitiveArgument()]\n        $password\n    ) {\n        // \u2026\n    }\n\n    // \u2026\n}\n</code></pre>"},{"location":"php/gdpr/","title":"General Data Protection Regulation (GDPR)","text":""},{"location":"php/gdpr/#introduction","title":"Introduction","text":"<p>The General Data Protection Regulation (GDPR) of the European Union enters into force on May 25, 2018. It comes with a set of restrictions when handling users' personal data as well as to provide an interface to export this data on demand.</p> <p>If you're looking for a guide on the implications of the GDPR and what you will need or consider to do, please read the article Implementation of the GDPR on woltlab.com.</p>"},{"location":"php/gdpr/#including-data-in-the-export","title":"Including Data in the Export","text":"<p>The <code>wcf\\acp\\action\\UserExportGdprAction</code> already includes WoltLab Suite Core itself as well as all official apps, but you'll need to include any personal data stored for your plugin or app by yourself.</p> <p>The event <code>export</code> is fired before any data is sent out, but after any Core data has been dumped to the <code>$data</code> property.</p>"},{"location":"php/gdpr/#example-code","title":"Example code","text":"files/lib/system/event/listener/MyUserExportGdprActionListener.class.php <pre><code>&lt;?php\nnamespace wcf\\system\\event\\listener;\nuse wcf\\acp\\action\\UserExportGdprAction;\nuse wcf\\data\\user\\UserProfile;\n\nclass MyUserExportGdprActionListener implements IParameterizedEventListener {\n    public function execute(/** @var UserExportGdprAction $eventObj */$eventObj, $className, $eventName, array &amp;$parameters) {\n        /** @var UserProfile $user */\n        $user = $eventObj-&gt;user;\n\n        $eventObj-&gt;data['my.fancy.plugin'] = [\n            'superPersonalData' =&gt; \"This text is super personal and should be included in the output\",\n            'weirdIpAddresses' =&gt; $eventObj-&gt;exportIpAddresses('app'.WCF_N.'_non_standard_column_names_for_ip_addresses', 'ipAddressColumnName', 'timeColumnName', 'userIDColumnName')\n        ];\n        $eventObj-&gt;exportUserProperties[] = 'shouldAlwaysExportThisField';\n        $eventObj-&gt;exportUserPropertiesIfNotEmpty[] = 'myFancyField';\n        $eventObj-&gt;exportUserOptionSettings[] = 'thisSettingIsAlwaysExported';\n        $eventObj-&gt;exportUserOptionSettingsIfNotEmpty[] = 'someSettingContainingPersonalData';\n        $eventObj-&gt;ipAddresses['my.fancy.plugin'] = ['wcf'.WCF_N.'_my_fancy_table', 'wcf'.WCF_N.'_i_also_store_ipaddresses_here'];\n        $eventObj-&gt;skipUserOptions[] = 'thisLooksLikePersonalDataButItIsNot';\n        $eventObj-&gt;skipUserOptions[] = 'thisIsAlsoNotPersonalDataPleaseIgnoreIt';\n    }\n}\n</code></pre>"},{"location":"php/gdpr/#data","title":"<code>$data</code>","text":"<p>Contains the entire data that will be included in the exported JSON file, some fields may already exist (such as <code>'com.woltlab.wcf'</code>) and while you may add or edit any fields within, you should restrict yourself to only append data from your plugin or app.</p>"},{"location":"php/gdpr/#exportuserproperties","title":"<code>$exportUserProperties</code>","text":"<p>Only a whitelist of  columns in <code>wcfN_user</code> is exported by default, if your plugin or app adds one or more columns to this table that do hold personal data, then you will have to append it to this array. The listed properties will always be included regardless of their content.</p>"},{"location":"php/gdpr/#exportuserpropertiesifnotempty","title":"<code>$exportUserPropertiesIfNotEmpty</code>","text":"<p>Only a whitelist of  columns in <code>wcfN_user</code> is exported by default, if your plugin or app adds one or more columns to this table that do hold personal data, then you will have to append it to this array. Empty values will not be added to the output.</p>"},{"location":"php/gdpr/#exportuseroptionsettings","title":"<code>$exportUserOptionSettings</code>","text":"<p>Any user option that exists within a <code>settings.*</code> category is automatically excluded from the export, with the notable exception of the <code>timezone</code> option. You can opt-in to include your setting by appending to this array, if it contains any personal data. The listed settings are always included regardless of their content.</p>"},{"location":"php/gdpr/#exportuseroptionsettingsifnotempty","title":"<code>$exportUserOptionSettingsIfNotEmpty</code>","text":"<p>Any user option that exists within a <code>settings.*</code> category is automatically excluded from the export, with the notable exception of the <code>timezone</code> option. You can opt-in to include your setting by appending to this array, if it contains any personal data.</p>"},{"location":"php/gdpr/#ipaddresses","title":"<code>$ipAddresses</code>","text":"<p>List of database table names per package identifier that contain ip addresses. The contained ip addresses will be exported when the ip logging module is enabled.</p> <p>It expects the database table to use the column names <code>ipAddress</code>, <code>time</code> and <code>userID</code>. If your table does not match this pattern for whatever reason, you'll need to manually probe for <code>LOG_IP_ADDRESS</code> and then call <code>exportIpAddresses()</code> to retrieve the list. Afterwards you are responsible to append these ip addresses to the <code>$data</code> array to have it exported.</p>"},{"location":"php/gdpr/#skipuseroptions","title":"<code>$skipUserOptions</code>","text":"<p>All user options are included in the export by default, unless they start with <code>can*</code> or <code>admin*</code>, or are blacklisted using this array. You should append any of your plugin's or app's user option that should not be exported, for example because it does not contain personal data, such as internal data.</p>"},{"location":"php/pages/","title":"Page Types","text":""},{"location":"php/pages/#abstractpage","title":"AbstractPage","text":"<p>The default implementation for pages to present any sort of content, but are designed to handle <code>GET</code> requests only. They usually follow a fixed method chain that will be invoked one after another, adding logical sections to the request flow.</p>"},{"location":"php/pages/#method-chain","title":"Method Chain","text":""},{"location":"php/pages/#__run","title":"__run()","text":"<p>This is the only method being invoked from the outside and starts the whole chain.</p>"},{"location":"php/pages/#readparameters","title":"readParameters()","text":"<p>Reads and sanitizes request parameters, this should be the only method to ever read user-supplied input. Read data should be stored in class properties to be accessible at a later point, allowing your code to safely assume that the data has been sanitized and is safe to work with.</p> <p>A typical example is the board page from the forum app that reads the id and attempts to identify the request forum.</p> <pre><code>public function readParameters() {\n    parent::readParameters();\n\n    if (isset($_REQUEST['id'])) $this-&gt;boardID = intval($_REQUEST['id']);\n    $this-&gt;board = BoardCache::getInstance()-&gt;getBoard($this-&gt;boardID);\n    if ($this-&gt;board === null) {\n        throw new IllegalLinkException();\n    }\n\n    // check permissions\n    if (!$this-&gt;board-&gt;canEnter()) {\n        throw new PermissionDeniedException();\n    }\n}\n</code></pre> <p>Events <code>readParameters</code></p>"},{"location":"php/pages/#show","title":"show()","text":"<p>Used to be the method of choice to handle permissions and module option checks, but has been used almost entirely as an internal method since the introduction of the properties <code>$loginRequired</code>, <code>$neededModules</code> and <code>$neededPermissions</code>.</p> <p>Events <code>checkModules</code>, <code>checkPermissions</code> and <code>show</code></p>"},{"location":"php/pages/#readdata","title":"readData()","text":"<p>Central method for data retrieval based on class properties including those populated with user data in <code>readParameters()</code>. It is strongly recommended to use this method to read data in order to properly separate the business logic present in your class.</p> <p>Events <code>readData</code></p>"},{"location":"php/pages/#assignvariables","title":"assignVariables()","text":"<p>Last method call before the template engine kicks in and renders the template. All though some properties are bound to the template automatically, you still need to pass any custom variables and class properties to the engine to make them available in templates.</p> <p>Following the example in <code>readParameters()</code>, the code below adds the board data to the template.</p> <pre><code>public function assignVariables() {\n    parent::assignVariables();\n\n    WCF::getTPL()-&gt;assign([\n        'board' =&gt; $this-&gt;board,\n        'boardID' =&gt; $this-&gt;boardID\n    ]);\n}\n</code></pre> <p>Events <code>assignVariables</code></p>"},{"location":"php/pages/#abstractform","title":"AbstractForm","text":"<p>Extends the AbstractPage implementation with additional methods designed to handle form submissions properly.</p>"},{"location":"php/pages/#method-chain_1","title":"Method Chain","text":""},{"location":"php/pages/#__run_1","title":"__run()","text":"<p>Inherited from AbstractPage.</p>"},{"location":"php/pages/#readparameters_1","title":"readParameters()","text":"<p>Inherited from AbstractPage.</p>"},{"location":"php/pages/#show_1","title":"show()","text":"<p>Inherited from AbstractPage.</p>"},{"location":"php/pages/#submit","title":"submit()","text":"<p>The methods <code>submit()</code> up until <code>save()</code> are only invoked if either <code>$_POST</code> or <code>$_FILES</code> are not empty, otherwise they won't be invoked and the execution will continue with <code>readData()</code>.</p> <p>This is an internal method that is responsible of input processing and validation.</p> <p>Events <code>submit</code></p>"},{"location":"php/pages/#readformparameters","title":"readFormParameters()","text":"<p>This method is quite similar to <code>readParameters()</code> that is being called earlier, but is designed around reading form data submitted through POST requests. You should avoid accessing <code>$_GET</code> or <code>$_REQUEST</code> in this context to avoid mixing up parameters evaluated when retrieving the page on first load and when submitting to it.</p> <p>Events <code>readFormParameters</code></p>"},{"location":"php/pages/#validate","title":"validate()","text":"<p>Deals with input validation and automatically catches exceptions deriving from <code>wcf\\system\\exception\\UserInputException</code>, resulting in a clean and consistent error handling for the user.</p> <p>Events <code>validate</code></p>"},{"location":"php/pages/#save","title":"save()","text":"<p>Saves the processed data to database or any other source of your choice. Please keep in mind to invoke <code>$this-&gt;saved()</code> before resetting the form data.</p> <p>Events <code>save</code></p>"},{"location":"php/pages/#saved","title":"saved()","text":"<p>This method is not called automatically and must be invoked manually by executing <code>$this-&gt;saved()</code> inside <code>save()</code>.</p> <p>The only purpose of this method is to fire the event <code>saved</code> that signals that the form data has been processed successfully and data has been saved. It is somewhat special as it is dispatched after the data has been saved, but before the data is purged during form reset. This is by default the last event that has access to the processed data.</p> <p>Events <code>saved</code></p>"},{"location":"php/pages/#readdata_1","title":"readData()","text":"<p>Inherited from AbstractPage.</p>"},{"location":"php/pages/#assignvariables_1","title":"assignVariables()","text":"<p>Inherited from AbstractPage.</p>"},{"location":"php/api/caches/","title":"Caches","text":"<p>WoltLab Suite offers two distinct types of caches:</p> <ol> <li>Persistent caches created by cache builders whose data can be stored using different cache sources.</li> <li>Runtime caches store objects for the duration of a single request.</li> </ol>"},{"location":"php/api/caches/#understanding-caching","title":"Understanding Caching","text":"<p>Every so often, plugins make use of cache builders or runtime caches to store their data, even if there is absolutely no need for them to do so. Usually, this involves a strong opinion about the total number of SQL queries on a page, including but not limited to some magic treshold numbers, which should not be exceeded for \"performance reasons\".</p> <p>This misconception can easily lead into thinking that SQL queries should be avoided or at least written to a cache, so that it doesn't need to be executed so often. Unfortunately, this completely ignores the fact that both a single query can take down your app (e. g. full table scan on millions of rows), but 10 queries using a primary key on a table with a few hundred rows will not slow down your page.</p> <p>There are some queries that should go into caches by design, but most of the cache builders weren't initially there, but instead have been added because they were required to reduce the load significantly. You need to understand that caches always come at a cost, even a runtime cache does! In particular, they will always consume memory that is not released over the duration of the request lifecycle and potentially even leak memory by holding references to objects and data structures that are no longer required.</p> <p>Caching should always be a solution for a problem.</p>"},{"location":"php/api/caches/#when-to-use-a-cache","title":"When to Use a Cache","text":"<p>It's difficult to provide a definite answer or checklist when to use a cache and why it is required at this point, because the answer is: It depends. The permission cache for user groups is a good example for a valid cache, where we can achieve significant performance improvement compared to processing this data on every request.</p> <p>Its caches are build for each permutation of user group memberships that are encountered for a page request. Building this data is an expensive process that involves both inheritance and specific rules in regards to when a value for a permission overrules another value. The added benefit of this cache is that one cache usually serves a large number of users with the same group memberships and by computing these permissions once, we can serve many different requests. Also, the permissions are rather static values that change very rarely and thus we can expect a very high cache lifetime before it gets rebuild.</p>"},{"location":"php/api/caches/#when-not-to-use-a-cache","title":"When not to Use a Cache","text":"<p>I remember, a few years ago, there was a plugin that displayed a user's character from an online video game. The character sheet not only included a list of basic statistics, but also displayed the items that this character was wearing and or holding at the time.</p> <p>The data for these items were downloaded in bulk from the game's vendor servers and stored in a persistent cache file that periodically gets renewed. There is nothing wrong with the idea of caching the data on your own server rather than requesting them everytime from the vendor's servers - not only because they imposed a limit on the number of requests per hour.</p> <p>Unfortunately, the character sheet had a sub-par performance and the users were upset by the significant loading times compared to literally every other page on the same server. The author of the plugin was working hard to resolve this issue and was evaluating all kind of methods to improve the page performance, including deep-diving into the realm of micro-optimizations to squeeze out every last bit of performance that is possible.</p> <p>The real problem was the cache file itself, it turns out that it was holding the data for several thousand items with a total file size of about 13 megabytes. It doesn't look that much at first glance, after all this isn't the '90s anymore, but unserializing a 13 megabyte array is really slow and looking up items in such a large array isn't exactly fast either.</p> <p>The solution was rather simple, the data that was fetched from the vendor's API was instead written into a separate database table. Next, the persistent cache was removed and the character sheet would now request the item data for that specific character straight from the database. Previously, the character sheet took several seconds to load and after the change it was done in a fraction of a second. Although quite extreme, this illustrates a situation where the cache file was introduced in the design process, without evaluating if the cache - at least how it was implemented - was really necessary.</p> <p>Caching should always be a solution for a problem. Not the other way around.</p>"},{"location":"php/api/caches_persistent-caches/","title":"Persistent Caches","text":"<p>Relational databases are designed around the principle of normalized data that is organized across clearly separated tables with defined releations between data rows. While this enables you to quickly access and modify individual rows and columns, it can create the problem that re-assembling this data into a more complex structure can be quite expensive.</p> <p>For example, the user group permissions are stored for each user group and each permissions separately, but in order to be applied, they need to be fetched and the cumulative values across all user groups of an user have to be calculated. These repetitive tasks on barely ever changing data make them an excellent target for caching, where all sub-sequent requests are accelerated because they no longer have to perform the same expensive calculations every time.</p> <p>It is easy to get lost in the realm of caching, especially when it comes to the decision if you should use a cache or not. When in doubt, you should opt to not use them, because they also come at a hidden cost that cannot be expressed through simple SQL query counts. If you haven't already, it is recommended that you read the introduction article on caching first, it provides a bit of background on caches and examples that should help you in your decision.</p>"},{"location":"php/api/caches_persistent-caches/#abstractcachebuilder","title":"<code>AbstractCacheBuilder</code>","text":"<p>Every cache builder should derive from the base class AbstractCacheBuilder that already implements the mandatory interface ICacheBuilder.</p> files/lib/system/cache/builder/ExampleCacheBuilder.class.php <pre><code>&lt;?php\nnamespace wcf\\system\\cache\\builder;\n\nclass ExampleCacheBuilder extends AbstractCacheBuilder {\n    // 3600 = 1hr\n    protected $maxLifetime = 3600;\n\n    public function rebuild(array $parameters) {\n        $data = [];\n\n        // fetch and process your data and assign it to `$data`\n\n        return $data;\n    }\n}\n</code></pre> <p>Reading data from your cache builder is quite simple and follows a consistent pattern. The callee only needs to know the name of the cache builder, which parameters it requires and how the returned data looks like. It does not need to know how the data is retrieve, where it was stored, nor if it had to be rebuild due to the maximum lifetime.</p> <pre><code>&lt;?php\nuse wcf\\system\\cache\\builder\\ExampleCacheBuilder;\n\n$data = ExampleCacheBuilder::getInstance()-&gt;getData($parameters);\n</code></pre>"},{"location":"php/api/caches_persistent-caches/#getdataarray-parameters-string-arrayindex-array","title":"<code>getData(array $parameters = [], string $arrayIndex = ''): array</code>","text":"<p>Retrieves the data from the cache builder, the <code>$parameters</code> array is automatically sorted to allow sub-sequent requests for the same parameters to be recognized, even if their parameters are mixed. For example, <code>getData([1, 2])</code> and <code>getData([2, 1])</code> will have the same exact result.</p> <p>The optional <code>$arrayIndex</code> will instruct the cache builder to retrieve the data and examine if the returned data is an array that has the index <code>$arrayIndex</code>. If it is set, the potion below this index is returned instead.</p>"},{"location":"php/api/caches_persistent-caches/#getmaxlifetime-int","title":"<code>getMaxLifetime(): int</code>","text":"<p>Returns the maximum lifetime of a cache in seconds. It can be controlled through the <code>protected $maxLifetime</code> property which defaults to <code>0</code>. Any cache that has a lifetime greater than 0 is automatically discarded when exceeding this age, otherwise it will remain forever until it is explicitly removed or invalidated.</p>"},{"location":"php/api/caches_persistent-caches/#resetarray-parameters-void","title":"<code>reset(array $parameters = []): void</code>","text":"<p>Invalidates a cache, the <code>$parameters</code> array will again be ordered using the same rules that are applied for <code>getData()</code>.</p>"},{"location":"php/api/caches_persistent-caches/#rebuildarray-parameters-array","title":"<code>rebuild(array $parameters): array</code>","text":"<p>This method is protected.</p> <p>This is the only method that a cache builder deriving from <code>AbstractCacheBuilder</code> has to implement and it will be invoked whenever the cache is required to be rebuild for whatever reason.</p>"},{"location":"php/api/caches_runtime-caches/","title":"Runtime Caches","text":"<p>Runtime caches store objects created during the runtime of the script and are automatically discarded after the script terminates. Runtime caches are especially useful when objects are fetched by different APIs, each requiring separate requests. By using a runtime cache, you have two advantages:</p> <ol> <li>If the API allows it, you can delay fetching the actual objects and initially only tell the runtime cache that at some point in the future of the current request, you need the objects with the given ids.    If multiple APIs do this one after another, all objects can be fetched using only one query instead of each API querying the database on its own.</li> <li>If an object with the same ID has already been fetched from database, this object is simply returned and can be reused instead of being fetched from database again.</li> </ol>"},{"location":"php/api/caches_runtime-caches/#iruntimecache","title":"<code>IRuntimeCache</code>","text":"<p>Every runtime cache has to implement the IRuntimeCache interface. It is recommended, however, that you extend AbstractRuntimeCache, the default implementation of the runtime cache interface. In most instances, you only need to set the <code>AbstractRuntimeCache::$listClassName</code> property to the name of database object list class which fetches the cached objects from database (see example).</p>"},{"location":"php/api/caches_runtime-caches/#usage","title":"Usage","text":"<pre><code>&lt;?php\nuse wcf\\system\\cache\\runtime\\UserRuntimeCache;\n\n$userIDs = [1, 2];\n\n// first (optional) step: tell runtime cache to remember user ids\nUserRuntimeCache::getInstance()-&gt;cacheObjectIDs($userIDs);\n\n// [\u2026]\n\n// second step: fetch the objects from database\n$users = UserRuntimeCache::getInstance()-&gt;getObjects($userIDs);\n\n// somewhere else: fetch only one user\n$userID = 1;\n\nUserRuntimeCache::getInstance()-&gt;cacheObjectID($userID);\n\n// [\u2026]\n\n// get user without the cache actually fetching it from database because it has already been loaded\n$user = UserRuntimeCache::getInstance()-&gt;getObject($userID);\n\n// somewhere else: fetch users directly without caching user ids first\n$users = UserRuntimeCache::getInstance()-&gt;getObjects([3, 4]);\n</code></pre>"},{"location":"php/api/caches_runtime-caches/#example","title":"Example","text":"files/lib/system/cache/runtime/UserRuntimeCache.class.php <pre><code>&lt;?php\nnamespace wcf\\system\\cache\\runtime;\nuse wcf\\data\\user\\User;\nuse wcf\\data\\user\\UserList;\n\n/**\n * Runtime cache implementation for users.\n *\n * @author  Matthias Schmidt\n * @copyright   2001-2016 WoltLab GmbH\n * @license GNU Lesser General Public License &lt;http://opensource.org/licenses/lgpl-license.php&gt;\n * @package WoltLabSuite\\Core\\System\\Cache\\Runtime\n * @since   3.0\n *\n * @method  User[]      getCachedObjects()\n * @method  User        getObject($objectID)\n * @method  User[]      getObjects(array $objectIDs)\n */\nclass UserRuntimeCache extends AbstractRuntimeCache {\n    /**\n     * @inheritDoc\n     */\n    protected $listClassName = UserList::class;\n}\n</code></pre>"},{"location":"php/api/comments/","title":"Comments","text":""},{"location":"php/api/comments/#user-group-options","title":"User Group Options","text":"<p>You need to create the following permissions:</p> user group type permission type naming user creating comments <code>user.foo.canAddComment</code> user editing own comments <code>user.foo.canEditComment</code> user deleting own comments <code>user.foo.canDeleteComment</code> moderator moderating comments <code>mod.foo.canModerateComment</code> moderator editing comments <code>mod.foo.canEditComment</code> moderator deleting comments <code>mod.foo.canDeleteComment</code> <p>Within their respective user group option category, the options should be listed in the same order as in the table above.</p>"},{"location":"php/api/comments/#language-items","title":"Language Items","text":""},{"location":"php/api/comments/#user-group-options_1","title":"User Group Options","text":"<p>The language items for the comment-related user group options generally have the same values:</p> <ul> <li><code>wcf.acp.group.option.user.foo.canAddComment</code></li> </ul> <p>German: <code>Kann Kommentare erstellen</code></p> <p>English: <code>Can create comments</code></p> <ul> <li><code>wcf.acp.group.option.user.foo.canEditComment</code></li> </ul> <p>German: <code>Kann eigene Kommentare bearbeiten</code></p> <p>English: <code>Can edit their comments</code></p> <ul> <li><code>wcf.acp.group.option.user.foo.canDeleteComment</code></li> </ul> <p>German: <code>Kann eigene Kommentare l\u00f6schen</code></p> <p>English: <code>Can delete their comments</code></p> <ul> <li><code>wcf.acp.group.option.mod.foo.canModerateComment</code></li> </ul> <p>German: <code>Kann Kommentare moderieren</code></p> <p>English: <code>Can moderate comments</code></p> <ul> <li><code>wcf.acp.group.option.mod.foo.canEditComment</code></li> </ul> <p>German: <code>Kann Kommentare bearbeiten</code></p> <p>English: <code>Can edit comments</code></p> <ul> <li><code>wcf.acp.group.option.mod.foo.canDeleteComment</code></li> </ul> <p>German: <code>Kann Kommentare l\u00f6schen</code></p> <p>English: <code>Can delete comments</code></p>"},{"location":"php/api/cronjobs/","title":"Cronjobs","text":"<p>Cronjobs offer an easy way to execute actions periodically, like cleaning up the database.</p> <p>The execution of cronjobs is not guaranteed but requires someone to access the page with JavaScript enabled.</p> <p>This page focuses on the technical aspects of cronjobs, the cronjob package installation plugin page covers how you can actually register a cronjob.</p>"},{"location":"php/api/cronjobs/#example","title":"Example","text":"files/lib/system/cronjob/LastActivityCronjob.class.php <pre><code>&lt;?php\nnamespace wcf\\system\\cronjob;\nuse wcf\\data\\cronjob\\Cronjob;\nuse wcf\\system\\WCF;\n\n/**\n * Updates the last activity timestamp in the user table.\n *\n * @author  Marcel Werk\n * @copyright   2001-2016 WoltLab GmbH\n * @license GNU Lesser General Public License &lt;http://opensource.org/licenses/lgpl-license.php&gt;\n * @package WoltLabSuite\\Core\\System\\Cronjob\n */\nclass LastActivityCronjob extends AbstractCronjob {\n    /**\n     * @inheritDoc\n     */\n    public function execute(Cronjob $cronjob) {\n        parent::execute($cronjob);\n\n        $sql = \"UPDATE  wcf1_user user_table,\n                        wcf1_session session\n                SET     user_table.lastActivityTime = session.lastActivityTime\n                WHERE   user_table.userID = session.userID\n                    AND session.userID &lt;&gt; 0\";\n        $statement = WCF::getDB()-&gt;prepare($sql);\n        $statement-&gt;execute();\n    }\n}\n</code></pre>"},{"location":"php/api/cronjobs/#icronjob-interface","title":"<code>ICronjob</code> Interface","text":"<p>Every cronjob needs to implement the <code>wcf\\system\\cronjob\\ICronjob</code> interface which requires the <code>execute(Cronjob $cronjob)</code> method to be implemented. This method is called by wcf\\system\\cronjob\\CronjobScheduler when executing the cronjobs.</p> <p>In practice, however, you should extend the <code>AbstractCronjob</code> class and also call the <code>AbstractCronjob::execute()</code> method as it fires an event which makes cronjobs extendable by plugins (see event documentation).</p>"},{"location":"php/api/cronjobs/#executing-cronjobs-through-cli","title":"Executing Cronjobs Through CLI","text":"<p>Cronjobs can be executed through the command-line interface (CLI):</p> <pre><code>php /path/to/wcf/cli.php &lt;&lt; 'EOT'\nUSERNAME\nPASSWORD\ncronjob execute\nEOT\n</code></pre>"},{"location":"php/api/event_list/","title":"Event List","text":"<p>Events whose name is marked with an asterisk are called from a static method and thus do not provide any object, just the class name. </p>"},{"location":"php/api/event_list/#woltlab-suite-core","title":"WoltLab Suite Core","text":"Class Event Name <code>wcf\\acp\\action\\UserExportGdprAction</code> <code>export</code> <code>wcf\\acp\\form\\StyleAddForm</code> <code>setVariables</code> <code>wcf\\acp\\form\\UserSearchForm</code> <code>search</code> <code>wcf\\action\\AbstractAction</code> <code>checkModules</code> <code>wcf\\action\\AbstractAction</code> <code>checkPermissions</code> <code>wcf\\action\\AbstractAction</code> <code>execute</code> <code>wcf\\action\\AbstractAction</code> <code>executed</code> <code>wcf\\action\\AbstractAction</code> <code>readParameters</code> <code>wcf\\data\\attachment\\AttachmentAction</code> <code>generateThumbnail</code> <code>wcf\\data\\session\\SessionAction</code> <code>keepAlive</code> <code>wcf\\data\\session\\SessionAction</code> <code>poll</code> <code>wcf\\data\\trophy\\Trophy</code> <code>renderTrophy</code> <code>wcf\\data\\user\\online\\UserOnline</code> <code>getBrowser</code> <code>wcf\\data\\user\\online\\UserOnlineList</code> <code>isVisible</code> <code>wcf\\data\\user\\trophy\\UserTrophy</code> <code>getReplacements</code> <code>wcf\\data\\user\\UserAction</code> <code>beforeFindUsers</code> <code>wcf\\data\\user\\UserAction</code> <code>rename</code> <code>wcf\\data\\user\\UserProfile</code> <code>getAvatar</code> <code>wcf\\data\\user\\UserProfile</code> <code>isAccessible</code> <code>wcf\\data\\AbstractDatabaseObjectAction</code> <code>finalizeAction</code> <code>wcf\\data\\AbstractDatabaseObjectAction</code> <code>initializeAction</code> <code>wcf\\data\\AbstractDatabaseObjectAction</code> <code>validateAction</code> <code>wcf\\data\\DatabaseObjectList</code> <code>init</code> <code>wcf\\form\\AbstractForm</code> <code>readFormParameters</code> <code>wcf\\form\\AbstractForm</code> <code>save</code> <code>wcf\\form\\AbstractForm</code> <code>saved</code> <code>wcf\\form\\AbstractForm</code> <code>submit</code> <code>wcf\\form\\AbstractForm</code> <code>validate</code> <code>wcf\\form\\AbstractModerationForm</code> <code>prepareSave</code> <code>wcf\\page\\AbstractPage</code> <code>assignVariables</code> <code>wcf\\page\\AbstractPage</code> <code>checkModules</code> <code>wcf\\page\\AbstractPage</code> <code>checkPermissions</code> <code>wcf\\page\\AbstractPage</code> <code>readData</code> <code>wcf\\page\\AbstractPage</code> <code>readParameters</code> <code>wcf\\page\\AbstractPage</code> <code>show</code> <code>wcf\\page\\MultipleLinkPage</code> <code>beforeReadObjects</code> <code>wcf\\page\\MultipleLinkPage</code> <code>calculateNumberOfPages</code> <code>wcf\\page\\MultipleLinkPage</code> <code>countItems</code> <code>wcf\\page\\SortablePage</code> <code>validateSortField</code> <code>wcf\\page\\SortablePage</code> <code>validateSortOrder</code> <code>wcf\\system\\bbcode\\MessageParser</code> <code>afterParsing</code> <code>wcf\\system\\bbcode\\MessageParser</code> <code>beforeParsing</code> <code>wcf\\system\\bbcode\\SimpleMessageParser</code> <code>afterParsing</code> <code>wcf\\system\\bbcode\\SimpleMessageParser</code> <code>beforeParsing</code> <code>wcf\\system\\box\\AbstractBoxController</code> <code>__construct</code> <code>wcf\\system\\box\\AbstractBoxController</code> <code>afterLoadContent</code> <code>wcf\\system\\box\\AbstractBoxController</code> <code>beforeLoadContent</code> <code>wcf\\system\\box\\AbstractDatabaseObjectListBoxController</code> <code>afterLoadContent</code> <code>wcf\\system\\box\\AbstractDatabaseObjectListBoxController</code> <code>beforeLoadContent</code> <code>wcf\\system\\box\\AbstractDatabaseObjectListBoxController</code> <code>hasContent</code> <code>wcf\\system\\box\\AbstractDatabaseObjectListBoxController</code> <code>readObjects</code> <code>wcf\\system\\cronjob\\AbstractCronjob</code> <code>execute</code> <code>wcf\\system\\email\\Email</code> <code>getJobs</code> <code>wcf\\system\\form\\builder\\container\\wysiwyg\\WysiwygFormContainer</code> <code>populate</code> <code>wcf\\system\\html\\input\\filter\\MessageHtmlInputFilter</code> <code>setAttributeDefinitions</code> <code>wcf\\system\\html\\input\\node\\HtmlInputNodeProcessor</code> <code>afterProcess</code> <code>wcf\\system\\html\\input\\node\\HtmlInputNodeProcessor</code> <code>beforeEmbeddedProcess</code> <code>wcf\\system\\html\\input\\node\\HtmlInputNodeProcessor</code> <code>beforeProcess</code> <code>wcf\\system\\html\\input\\node\\HtmlInputNodeProcessor</code> <code>convertPlainLinks</code> <code>wcf\\system\\html\\input\\node\\HtmlInputNodeProcessor</code> <code>getTextContent</code> <code>wcf\\system\\html\\input\\node\\HtmlInputNodeProcessor</code> <code>parseEmbeddedContent</code> <code>wcf\\system\\html\\input\\node\\HtmlInputNodeWoltlabMetacodeMarker</code> <code>filterGroups</code> <code>wcf\\system\\html\\output\\node\\HtmlOutputNodePre</code> <code>selectHighlighter</code> <code>wcf\\system\\html\\output\\node\\HtmlOutputNodeProcessor</code> <code>beforeProcess</code> <code>wcf\\system\\image\\adapter\\ImagickImageAdapter</code> <code>getResizeFilter</code> <code>wcf\\system\\menu\\user\\profile\\UserProfileMenu</code> <code>init</code> <code>wcf\\system\\menu\\user\\profile\\UserProfileMenu</code> <code>loadCache</code> <code>wcf\\system\\menu\\TreeMenu</code> <code>init</code> <code>wcf\\system\\menu\\TreeMenu</code> <code>loadCache</code> <code>wcf\\system\\message\\QuickReplyManager</code> <code>addFullQuote</code> <code>wcf\\system\\message\\QuickReplyManager</code> <code>allowedDataParameters</code> <code>wcf\\system\\message\\QuickReplyManager</code> <code>beforeRenderQuote</code> <code>wcf\\system\\message\\QuickReplyManager</code> <code>createMessage</code> <code>wcf\\system\\message\\QuickReplyManager</code> <code>createdMessage</code> <code>wcf\\system\\message\\QuickReplyManager</code> <code>getMessage</code> <code>wcf\\system\\message\\QuickReplyManager</code> <code>validateParameters</code> <code>wcf\\system\\option\\OptionHandler</code> <code>afterReadCache</code> <code>wcf\\system\\package\\plugin\\AbstractPackageInstallationPlugin</code> <code>construct</code> <code>wcf\\system\\package\\plugin\\AbstractPackageInstallationPlugin</code> <code>hasUninstall</code> <code>wcf\\system\\package\\plugin\\AbstractPackageInstallationPlugin</code> <code>install</code> <code>wcf\\system\\package\\plugin\\AbstractPackageInstallationPlugin</code> <code>uninstall</code> <code>wcf\\system\\package\\plugin\\AbstractPackageInstallationPlugin</code> <code>update</code> <code>wcf\\system\\package\\plugin\\ObjectTypePackageInstallationPlugin</code> <code>addConditionFields</code> <code>wcf\\system\\package\\PackageInstallationDispatcher</code> <code>postInstall</code> <code>wcf\\system\\package\\PackageUninstallationDispatcher</code> <code>postUninstall</code> <code>wcf\\system\\reaction\\ReactionHandler</code> <code>getDataAttributes</code> <code>wcf\\system\\request\\RouteHandler</code> <code>didInit</code> <code>wcf\\system\\session\\ACPSessionFactory</code> <code>afterInit</code> <code>wcf\\system\\session\\ACPSessionFactory</code> <code>beforeInit</code> <code>wcf\\system\\session\\SessionHandler</code> <code>afterChangeUser</code> <code>wcf\\system\\session\\SessionHandler</code> <code>beforeChangeUser</code> <code>wcf\\system\\style\\StyleCompiler</code> <code>compile</code> <code>wcf\\system\\template\\TemplateEngine</code> <code>afterDisplay</code> <code>wcf\\system\\template\\TemplateEngine</code> <code>beforeDisplay</code> <code>wcf\\system\\upload\\DefaultUploadFileSaveStrategy</code> <code>generateThumbnails</code> <code>wcf\\system\\upload\\DefaultUploadFileSaveStrategy</code> <code>save</code> <code>wcf\\system\\user\\authentication\\UserAuthenticationFactory</code> <code>init</code> <code>wcf\\system\\user\\notification\\UserNotificationHandler</code> <code>createdNotification</code> <code>wcf\\system\\user\\notification\\UserNotificationHandler</code> <code>fireEvent</code> <code>wcf\\system\\user\\notification\\UserNotificationHandler</code> <code>markAsConfirmed</code> <code>wcf\\system\\user\\notification\\UserNotificationHandler</code> <code>markAsConfirmedByIDs</code> <code>wcf\\system\\user\\notification\\UserNotificationHandler</code> <code>removeNotifications</code> <code>wcf\\system\\user\\notification\\UserNotificationHandler</code> <code>updateTriggerCount</code> <code>wcf\\system\\user\\UserBirthdayCache</code> <code>loadMonth</code> <code>wcf\\system\\worker\\AbstractRebuildDataWorker</code> <code>execute</code> <code>wcf\\system\\CLIWCF</code> <code>afterArgumentParsing</code> <code>wcf\\system\\CLIWCF</code> <code>beforeArgumentParsing</code> <code>wcf\\system\\WCF</code> <code>initialized</code> <code>wcf\\util\\HeaderUtil</code> <code>parseOutput</code>*"},{"location":"php/api/event_list/#woltlab-suite-forum","title":"WoltLab Suite Forum","text":"Class Event Name <code>wbb\\data\\board\\BoardAction</code> <code>cloneBoard</code> <code>wbb\\data\\post\\PostAction</code> <code>quickReplyShouldMerge</code> <code>wbb\\system\\thread\\ThreadHandler</code> <code>didInit</code>"},{"location":"php/api/events/","title":"Events","text":"<p>WoltLab Suite's event system allows manipulation of program flows and data without having to change any of the original source code. At many locations throughout the PHP code of WoltLab Suite Core and mainly through inheritance also in the applications and plugins, so called events are fired which trigger registered event listeners that get access to the object firing the event (or at least the class name if the event has been fired in a static method).</p> <p>This page focuses on the technical aspects of events and event listeners, the eventListener package installation plugin page covers how you can actually register an event listener. A comprehensive list of all available events is provided here.</p>"},{"location":"php/api/events/#introductory-example","title":"Introductory Example","text":"<p>Let's start with a simple example to illustrate how the event system works. Consider this pre-existing class:</p> files/lib/system/example/ExampleComponent.class.php <pre><code>&lt;?php\nnamespace wcf\\system\\example;\nuse wcf\\system\\event\\EventHandler;\n\nclass ExampleComponent {\n    public $var = 1;\n\n    public function getVar() {\n        EventHandler::getInstance()-&gt;fireAction($this, 'getVar');\n\n        return $this-&gt;var;\n    }\n}\n</code></pre> <p>where an event with event name <code>getVar</code> is fired in the <code>getVar()</code> method.</p> <p>If you create an object of this class and call the <code>getVar()</code> method, the return value will be <code>1</code>, of course:</p> <pre><code>&lt;?php\n\n$example = new wcf\\system\\example\\ExampleComponent();\nif ($example-&gt;getVar() == 1) {\n    echo \"var is 1!\";\n}\nelse if ($example-&gt;getVar() == 2) {\n    echo \"var is 2!\";\n}\nelse {\n    echo \"No, var is neither 1 nor 2.\";\n}\n\n// output: var is 1!\n</code></pre> <p>Now, consider that we have registered the following event listener to this event:</p> files/lib/system/event/listener/ExampleEventListener.class.php <pre><code>&lt;?php\nnamespace wcf\\system\\event\\listener;\n\nclass ExampleEventListener implements IParameterizedEventListener {\n    public function execute($eventObj, $className, $eventName, array &amp;$parameters) {\n        $eventObj-&gt;var = 2;\n    }\n}\n</code></pre> <p>Whenever the event in the <code>getVar()</code> method is called, this method (of the same event listener object) is called. In this case, the value of the method's first parameter is the <code>ExampleComponent</code> object passed as the first argument of the <code>EventHandler::fireAction()</code> call in <code>ExampleComponent::getVar()</code>. As <code>ExampleComponent::$var</code> is a public property, the event listener code can change it and set it to <code>2</code>.</p> <p>If you now execute the example code from above again, the output will change from <code>var is 1!</code> to <code>var is 2!</code> because prior to returning the value, the event listener code changes the value from <code>1</code> to <code>2</code>.</p> <p>This introductory example illustrates how event listeners can change data in a non-intrusive way. Program flow can be changed, for example, by throwing a <code>wcf\\system\\exception\\PermissionDeniedException</code> if some additional constraint to access a page is not fulfilled.</p>"},{"location":"php/api/events/#listening-to-events","title":"Listening to Events","text":"<p>In order to listen to events, you need to register the event listener and the event listener itself needs to implement the interface <code>wcf\\system\\event\\listener\\IParameterizedEventListener</code> which only contains the <code>execute</code> method (see example above).</p> <p>The first parameter <code>$eventObj</code> of the method contains the passed object where the event is fired or the name of the class in which the event is fired if it is fired from a static method. The second parameter <code>$className</code> always contains the name of the class where the event has been fired. The third parameter <code>$eventName</code> provides the name of the event within a class to uniquely identify the exact location in the class where the event has been fired. The last parameter <code>$parameters</code> is a reference to the array which contains additional data passed by the method firing the event. If no additional data is passed, <code>$parameters</code> is empty.</p>"},{"location":"php/api/events/#firing-events","title":"Firing Events","text":"<p>If you write code and want plugins to have access at certain points, you can fire an event on your own. The only thing to do is to call the <code>wcf\\system\\event\\EventHandler::fireAction($eventObj, $eventName, array &amp;$parameters = [])</code> method and pass the following parameters:</p> <ol> <li><code>$eventObj</code> should be <code>$this</code> if you fire from an object context, otherwise pass the class name <code>static::class</code>.</li> <li><code>$eventName</code> identifies the event within the class and generally has the same name as the method.    In cases, were you might fire more than one event in a method, for example before and after a certain piece of code, you can use the prefixes <code>before*</code> and <code>after*</code> in your event names.</li> <li><code>$parameters</code> is an optional array which allows you to pass additional data to the event listeners without having to make this data accessible via a property explicitly only created for this purpose.    This additional data can either be just additional information for the event listeners about the context of the method call or allow the event listener to manipulate local data if the code, where the event has been fired, uses the passed data afterwards.  </li> </ol>"},{"location":"php/api/events/#example-using-parameters-argument","title":"Example: Using <code>$parameters</code> argument","text":"<p>Consider the following method which gets some text that the methods parses.</p> files/lib/system/example/ExampleParser.class.php <pre><code>&lt;?php\nnamespace wcf\\system\\example;\nuse wcf\\system\\event\\EventHandler;\n\nclass ExampleParser {\n    public function parse($text) {\n        // [some parsing done by default]\n\n        $parameters = ['text' =&gt; $text];\n        EventHandler::getInstance()-&gt;fireAction($this, 'parse', $parameters);\n\n        return $parameters['text'];\n    }\n}\n</code></pre> <p>After the default parsing by the method itself, the author wants to enable plugins to do additional parsing and thus fires an event and passes the parsed text as an additional parameter. Then, a plugin can deliver the following event listener</p> files/lib/system/event/listener/ExampleParserEventListener.class.php <pre><code>&lt;?php\nnamespace wcf\\system\\event\\listener;\n\nclass ExampleParserEventListener implements IParameterizedEventListener {\n    public function execute($eventObj, $className, $eventName, array &amp;$parameters) {\n        $text = $parameters['text'];\n\n        // [some additional parsing which changes $text]\n\n        $parameters['text'] = $text;\n    }\n}\n</code></pre> <p>which can access the text via <code>$parameters['text']</code>.</p> <p>This example can also be perfectly used to illustrate how to name multiple events in the same method. Let's assume that the author wants to enable plugins to change the text before and after the method does its own parsing and thus fires two events:</p> files/lib/system/example/ExampleParser.class.php <pre><code>&lt;?php\nnamespace wcf\\system\\example;\nuse wcf\\system\\event\\EventHandler;\n\nclass ExampleParser {\n    public function parse($text) {\n        $parameters = ['text' =&gt; $text];\n        EventHandler::getInstance()-&gt;fireAction($this, 'beforeParsing', $parameters);\n        $text = $parameters['text'];\n\n        // [some parsing done by default]\n\n        $parameters = ['text' =&gt; $text];\n        EventHandler::getInstance()-&gt;fireAction($this, 'afterParsing', $parameters);\n\n        return $parameters['text'];\n    }\n}\n</code></pre>"},{"location":"php/api/events/#advanced-example-additional-form-field","title":"Advanced Example: Additional Form Field","text":"<p>One common reason to use event listeners is to add an additional field to a pre-existing form (in combination with template listeners, which we will not cover here). We will assume that users are able to do both, create and edit the objects via this form. The points in the program flow of AbstractForm that are relevant here are:</p> <ul> <li>adding object (after the form has been submitted):</li> <li>reading the value of the field</li> <li>validating the read value</li> <li> <p>saving the additional value after successful validation and resetting locally stored value or assigning the current value of the field to the template after unsuccessful validation</p> </li> <li> <p>editing object:</p> </li> <li>on initial form request:<ol> <li>reading the pre-existing value of the edited object</li> <li>assigning the field value to the template</li> </ol> </li> <li>after the form has been submitted:<ol> <li>reading the value of the field</li> <li>validating the read value</li> <li>saving the additional value after successful validation</li> <li>assigning the current value of the field to the template</li> </ol> </li> </ul> <p>All of these cases can be covered the by following code in which we assume that <code>wcf\\form\\ExampleAddForm</code> is the form to create example objects and that <code>wcf\\form\\ExampleEditForm</code> extends <code>wcf\\form\\ExampleAddForm</code> and is used for editing existing example objects.</p> files/lib/system/event/listener/ExampleAddFormListener.class.php <pre><code>&lt;?php\nnamespace wcf\\system\\event\\listener;\nuse wcf\\form\\ExampleAddForm;\nuse wcf\\form\\ExampleEditForm;\nuse wcf\\system\\exception\\UserInputException;\nuse wcf\\system\\WCF;\n\nclass ExampleAddFormListener implements IParameterizedEventListener {\n    protected $var = 0;\n\n    public function execute($eventObj, $className, $eventName, array &amp;$parameters) {\n        $this-&gt;$eventName($eventObj);\n    }\n\n    protected function assignVariables() {\n        WCF::getTPL()-&gt;assign('var', $this-&gt;var);\n    }\n\n    protected function readData(ExampleEditForm $eventObj) {\n        if (empty($_POST)) {\n            $this-&gt;var = $eventObj-&gt;example-&gt;var;\n        }\n    }\n\n    protected function readFormParameters() {\n        if (isset($_POST['var'])) $this-&gt;var = intval($_POST['var']);\n    }\n\n    protected function save(ExampleAddForm $eventObj) {\n        $eventObj-&gt;additionalFields = array_merge($eventObj-&gt;additionalFields, ['var' =&gt; $this-&gt;var]);\n    }\n\n    protected function saved() {\n        $this-&gt;var = 0;\n    }\n\n    protected function validate() {\n        if ($this-&gt;var &lt; 0) {\n            throw new UserInputException('var', 'isNegative');\n        }\n    }\n}\n</code></pre> <p>The <code>execute</code> method in this example just delegates the call to a method with the same name as the event so that this class mimics the structure of a form class itself. The form object is passed to the methods but is only given in the method signatures as a parameter here whenever the form object is actually used. Furthermore, the type-hinting of the parameter illustrates in which contexts the method is actually called which will become clear in the following discussion of the individual methods:</p> <ul> <li><code>assignVariables()</code> is called for the add and the edit form and simply assigns the current value of the variable to the template.</li> <li><code>readData()</code> reads the pre-existing value of <code>$var</code> if the form has not been submitted and thus is only relevant when editing objects which is illustrated by the explicit type-hint of <code>ExampleEditForm</code>.</li> <li><code>readFormParameters()</code> reads the value for both, the add and the edit form.</li> <li><code>save()</code> is, of course, also relevant in both cases but requires the form object to store the additional value in the <code>wcf\\form\\AbstractForm::$additionalFields</code> array which can be used if a <code>var</code> column has been added to the database table in which the example objects are stored.</li> <li><code>saved()</code> is only called for the add form as it clears the internal value so that in the <code>assignVariables()</code> call, the default value will be assigned to the template to create an \"empty\" form.   During edits, this current value is the actual value that should be shown.</li> <li><code>validate()</code> also needs to be called in both cases as the input data always has to be validated.</li> </ul> <p>Lastly, the following XML file has to be used to register the event listeners (you can find more information about how to register event listeners on the eventListener package installation plugin page):</p> eventListener.xml <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;data xmlns=\"http://www.woltlab.com\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.woltlab.com http://www.woltlab.com/XSD/2019/eventListener.xsd\"&gt;\n&lt;import&gt;\n&lt;eventlistener name=\"exampleAddInherited\"&gt;\n&lt;eventclassname&gt;wcf\\form\\ExampleAddForm&lt;/eventclassname&gt;\n&lt;eventname&gt;assignVariables,readFormParameters,save,validate&lt;/eventname&gt;\n&lt;listenerclassname&gt;wcf\\system\\event\\listener\\ExampleAddFormListener&lt;/listenerclassname&gt;\n&lt;inherit&gt;1&lt;/inherit&gt;\n&lt;/eventlistener&gt;\n\n&lt;eventlistener name=\"exampleAdd\"&gt;\n&lt;eventclassname&gt;wcf\\form\\ExampleAddForm&lt;/eventclassname&gt;\n&lt;eventname&gt;saved&lt;/eventname&gt;\n&lt;listenerclassname&gt;wcf\\system\\event\\listener\\ExampleAddFormListener&lt;/listenerclassname&gt;\n&lt;/eventlistener&gt;\n\n&lt;eventlistener name=\"exampleEdit\"&gt;\n&lt;eventclassname&gt;wcf\\form\\ExampleEditForm&lt;/eventclassname&gt;\n&lt;eventname&gt;readData&lt;/eventname&gt;\n&lt;listenerclassname&gt;wcf\\system\\event\\listener\\ExampleAddFormListener&lt;/listenerclassname&gt;\n&lt;/eventlistener&gt;\n&lt;/import&gt;\n&lt;/data&gt;\n</code></pre>"},{"location":"php/api/package_installation_plugins/","title":"Package Installation Plugins","text":"<p>A package installation plugin (PIP) defines the behavior to handle a specific instruction during package installation, update or uninstallation.</p>"},{"location":"php/api/package_installation_plugins/#abstractpackageinstallationplugin","title":"<code>AbstractPackageInstallationPlugin</code>","text":"<p>Any package installation plugin has to implement the IPackageInstallationPlugin interface. It is recommended however, to extend the abstract implementation AbstractPackageInstallationPlugin of this interface instead of directly implementing the interface. The abstract implementation will always provide sane methods in case of any API changes.</p>"},{"location":"php/api/package_installation_plugins/#class-members","title":"Class Members","text":"<p>Package Installation Plugins have a few notable class members easing your work:</p>"},{"location":"php/api/package_installation_plugins/#installation","title":"<code>$installation</code>","text":"<p>This member contains an instance of PackageInstallationDispatcher which provides you with all meta data related to the current package being processed. The most common usage is the retrieval of the package ID via <code>$this-&gt;installation-&gt;getPackageID()</code>.</p>"},{"location":"php/api/package_installation_plugins/#application","title":"<code>$application</code>","text":"<p>Represents the abbreviation of the target application, e.g. <code>wbb</code> (default value: <code>wcf</code>), used for the name of database table in which the installed data is stored.</p>"},{"location":"php/api/package_installation_plugins/#abstractxmlpackageinstallationplugin","title":"<code>AbstractXMLPackageInstallationPlugin</code>","text":"<p>AbstractPackageInstallationPlugin is the default implementation for all package installation plugins based upon a single XML document. It handles the evaluation of the document and provide you an object-orientated approach to handle its data.</p>"},{"location":"php/api/package_installation_plugins/#class-members_1","title":"Class Members","text":""},{"location":"php/api/package_installation_plugins/#classname","title":"<code>$className</code>","text":"<p>Value must be the qualified name of a class deriving from DatabaseObjectEditor which is used to create and update objects.</p>"},{"location":"php/api/package_installation_plugins/#tagname","title":"<code>$tagName</code>","text":"<p>Specifies the tag name within a <code>&lt;import&gt;</code> or <code>&lt;delete&gt;</code> section of the XML document used for each installed object.</p>"},{"location":"php/api/package_installation_plugins/#prepareimportarray-data","title":"<code>prepareImport(array $data)</code>","text":"<p>The passed array <code>$data</code> contains the parsed value from each evaluated tag in the <code>&lt;import&gt;</code> section:</p> <ul> <li><code>$data['elements']</code> contains a list of tag names and their value.</li> <li><code>$data['attributes']</code> contains a list of attributes present on the tag identified by $tagName.</li> </ul> <p>This method should return an one-dimensional array, where each key maps to the corresponding database column name (key names are case-sensitive). It will be passed to either <code>DatabaseObjectEditor::create()</code> or <code>DatabaseObjectEditor::update()</code>.</p> <p>Example:</p> <pre><code>&lt;?php\nreturn [\n    'environment' =&gt; $data['elements']['environment'],\n    'eventName' =&gt; $data['elements']['eventname'],\n    'name' =&gt; $data['attributes']['name']\n];\n</code></pre>"},{"location":"php/api/package_installation_plugins/#validateimportarray-data","title":"<code>validateImport(array $data)</code>","text":"<p>The passed array <code>$data</code> equals the data returned by prepareImport(). This method has no return value, instead you should throw an exception if the passed data is invalid.</p>"},{"location":"php/api/package_installation_plugins/#findexistingitemarray-data","title":"<code>findExistingItem(array $data)</code>","text":"<p>The passed array <code>$data</code> equals the data returned by prepareImport(). This method is expected to return an array with two keys:</p> <ul> <li><code>sql</code> contains the SQL query with placeholders.</li> <li><code>parameters</code> contains an array with values used for the SQL query.</li> </ul>"},{"location":"php/api/package_installation_plugins/#example","title":"Example","text":"<pre><code>&lt;?php\n$sql = \"SELECT  *\n    FROM    wcf\".WCF_N.\"_\".$this-&gt;tableName.\"\n    WHERE   packageID = ?\n        AND name = ?\n        AND templateName = ?\n        AND eventName = ?\n        AND environment = ?\";\n$parameters = [\n    $this-&gt;installation-&gt;getPackageID(),\n    $data['name'],\n    $data['templateName'],\n    $data['eventName'],\n    $data['environment']\n];\n\nreturn [\n    'sql' =&gt; $sql,\n    'parameters' =&gt; $parameters\n];\n</code></pre>"},{"location":"php/api/package_installation_plugins/#handledeletearray-items","title":"<code>handleDelete(array $items)</code>","text":"<p>The passed array <code>$items</code> contains the original node data, similar to prepareImport(). You should make use of this data to remove the matching element from database.</p> <p>Example: <pre><code>&lt;?php\n$sql = \"DELETE FROM wcf\".WCF_N.\"_\".$this-&gt;tableName.\"\n    WHERE       packageID = ?\n            AND environment = ?\n            AND eventName = ?\n            AND name = ?\n            AND templateName = ?\";\n$statement = WCF::getDB()-&gt;prepareStatement($sql);\nforeach ($items as $item) {\n    $statement-&gt;execute([\n        $this-&gt;installation-&gt;getPackageID(),\n        $item['elements']['environment'],\n        $item['elements']['eventname'],\n        $item['attributes']['name'],\n        $item['elements']['templatename']\n    ]);\n}\n</code></pre></p>"},{"location":"php/api/package_installation_plugins/#postimport","title":"<code>postImport()</code>","text":"<p>Allows you to (optionally) run additionally actions after all elements were processed.</p>"},{"location":"php/api/package_installation_plugins/#abstractoptionpackageinstallationplugin","title":"<code>AbstractOptionPackageInstallationPlugin</code>","text":"<p>AbstractOptionPackageInstallationPlugin is an abstract implementation for options, used for:</p> <ul> <li>ACL Options</li> <li>Options</li> <li>User Options</li> <li>User Group Options</li> </ul>"},{"location":"php/api/package_installation_plugins/#differences-to-abstractxmlpackageinstallationplugin","title":"Differences to <code>AbstractXMLPackageInstallationPlugin</code>","text":""},{"location":"php/api/package_installation_plugins/#reservedtags","title":"<code>$reservedTags</code>","text":"<p><code>$reservedTags</code> is a list of reserved tag names so that any tag encountered but not listed here will be added to the database column <code>additionalData</code>. This allows options to store arbitrary data which can be accessed but were not initially part of the PIP specifications.</p>"},{"location":"php/api/sitemaps/","title":"Sitemaps","text":"<p>WoltLab Suite is capable of automatically creating a sitemap. This sitemap contains all static pages registered via the page package installation plugin and which may be indexed by search engines (checking the <code>allowSpidersToIndex</code> parameter and page permissions) and do not expect an object ID. Other pages have to be added to the sitemap as a separate object.</p> <p>The only prerequisite for sitemap objects is that the objects are instances of <code>wcf\\data\\DatabaseObject</code> and that there is a <code>wcf\\data\\DatabaseObjectList</code> implementation.</p> <p>First, we implement the PHP class, which provides us all database objects and optionally checks the permissions for a single object. The class must implement the interface <code>wcf\\system\\sitemap\\object\\ISitemapObjectObjectType</code>. However, in order to have some methods already implemented and ensure backwards compatibility, you should use the abstract class <code>wcf\\system\\sitemap\\object\\AbstractSitemapObjectObjectType</code>. The abstract class takes care of generating the <code>DatabaseObjectList</code> class name and list directly and implements optional methods with the default values. The only method that you have to implement yourself is the <code>getObjectClass()</code> method which returns the fully qualified name of the <code>DatabaseObject</code> class. The <code>DatabaseObject</code> class must implement the interface <code>wcf\\data\\ILinkableObject</code>.</p> <p>Other optional methods are:</p> <ul> <li>The <code>getLastModifiedColumn()</code> method returns the name of the column in the database where the last modification date is stored.   If there is none, this method must return <code>null</code>.</li> <li>The <code>canView()</code> method checks whether the passed <code>DatabaseObject</code> is visible to the current user with the current user always being a guest.</li> <li>The <code>getObjectListClass()</code> method returns a non-standard <code>DatabaseObjectList</code> class name.</li> <li>The <code>getObjectList()</code> method returns the <code>DatabaseObjectList</code> instance.   You can, for example, specify additional query conditions in the method.</li> </ul> <p>As an example, the implementation for users looks like this:</p> files/lib/system/sitemap/object/UserSitemapObject.class.php <pre><code>&lt;?php\nnamespace wcf\\system\\sitemap\\object;\nuse wcf\\data\\user\\User;\nuse wcf\\data\\DatabaseObject;\nuse wcf\\system\\WCF;\n\n/**\n * User sitemap implementation.\n *\n * @author  Joshua Ruesweg\n * @copyright   2001-2017 WoltLab GmbH\n * @license GNU Lesser General Public License &lt;http://opensource.org/licenses/lgpl-license.php&gt;\n * @package WoltLabSuite\\Core\\Sitemap\\Object\n * @since   3.1\n */\nclass UserSitemapObject extends AbstractSitemapObjectObjectType {\n    /**\n     * @inheritDoc\n     */\n    public function getObjectClass() {\n        return User::class;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    public function getLastModifiedColumn() {\n        return 'lastActivityTime';\n    }\n\n    /**\n     * @inheritDoc\n     */\n    public function canView(DatabaseObject $object) {\n        return WCF::getSession()-&gt;getPermission('user.profile.canViewUserProfile');\n    }\n}\n</code></pre> <p>Next, the sitemap object must be registered as an object type:</p> <pre><code>&lt;type&gt;\n&lt;name&gt;com.example.plugin.sitemap.object.user&lt;/name&gt;\n&lt;definitionname&gt;com.woltlab.wcf.sitemap.object&lt;/definitionname&gt;\n&lt;classname&gt;wcf\\system\\sitemap\\object\\UserSitemapObject&lt;/classname&gt;\n&lt;priority&gt;0.5&lt;/priority&gt;\n&lt;changeFreq&gt;monthly&lt;/changeFreq&gt;\n&lt;rebuildTime&gt;259200&lt;/rebuildTime&gt;\n&lt;/type&gt;\n</code></pre> <p>In addition to the fully qualified class name, the object type definition <code>com.woltlab.wcf.sitemap.object</code> and the object type name, the parameters <code>priority</code>, <code>changeFreq</code> and <code>rebuildTime</code> must also be specified. <code>priority</code> (https://www.sitemaps.org/protocol.html#prioritydef) and <code>changeFreq</code> (https://www.sitemaps.org/protocol.html#changefreqdef) are specifications in the sitemaps protocol and can be changed by the user in the ACP. The <code>priority</code> should be <code>0.5</code> by default, unless there is an important reason to change it. The parameter <code>rebuildTime</code> specifies the number of seconds after which the sitemap should be regenerated.</p> <p>Finally, you have to create the language variable for the sitemap object. The language variable follows the pattern <code>wcf.acp.sitemap.objectType.{objectTypeName}</code> and is in the category <code>wcf.acp.sitemap</code>.</p>"},{"location":"php/api/user_activity_points/","title":"User Activity Points","text":"<p>Users get activity points whenever they create content to award them for their contribution. Activity points are used to determine the rank of a user and can also be used for user conditions, for example for automatic user group assignments.</p> <p>To integrate activity points into your package, you have to register an object type for the defintion <code>com.woltlab.wcf.user.activityPointEvent</code> and specify a default number of points:</p> <pre><code>&lt;type&gt;\n&lt;name&gt;com.example.foo.activityPointEvent.bar&lt;/name&gt;\n&lt;definitionname&gt;com.woltlab.wcf.user.activityPointEvent&lt;/definitionname&gt;\n&lt;points&gt;10&lt;/points&gt;\n&lt;/type&gt;\n</code></pre> <p>The number of points awarded for this type of activity point event can be changed by the administrator in the admin control panel. For this form and the user activity point list shown in the frontend, you have to provide the language item</p> <pre><code>wcf.user.activityPoint.objectType.com.example.foo.activityPointEvent.bar\n</code></pre> <p>that contains the name of the content for which the activity points are awarded.</p> <p>If a relevant object is created, you have to use <code>UserActivityPointHandler::fireEvent()</code> which expects the name of the activity point event object type, the id of the object for which the points are awarded (though the object id is not used at the moment) and the user who gets the points:</p> <pre><code>UserActivityPointHandler::getInstance()-&gt;fireEvent(\n        'com.example.foo.activityPointEvent.bar',\n        $bar-&gt;barID,\n        $bar-&gt;userID\n);\n</code></pre> <p>To remove activity points once objects are deleted, you have to use <code>UserActivityPointHandler::removeEvents()</code> which also expects the name of the activity point event object type and additionally an array mapping the id of the user whose activity points will be reduced to the number of objects that are removed for the relevant user:</p> <pre><code>UserActivityPointHandler::getInstance()-&gt;removeEvents(\n        'com.example.foo.activityPointEvent.bar',\n       [\n                1 =&gt; 1, // remove points for one object for user with id `1`\n                4 =&gt; 2  // remove points for two objects for user with id `4`\n        ]\n);\n</code></pre>"},{"location":"php/api/user_notifications/","title":"User Notifications","text":"<p>WoltLab Suite includes a powerful user notification system that supports notifications directly shown on the website and emails sent immediately or on a daily basis.</p>"},{"location":"php/api/user_notifications/#objecttypexml","title":"<code>objectType.xml</code>","text":"<p>For any type of object related to events, you have to define an object type for the object type definition <code>com.woltlab.wcf.notification.objectType</code>:</p> objectType.xml <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;data xmlns=\"http://www.woltlab.com\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.woltlab.com http://www.woltlab.com/XSD/2019/objectType.xsd\"&gt;\n&lt;import&gt;\n&lt;type&gt;\n&lt;name&gt;com.woltlab.example.foo&lt;/name&gt;\n&lt;definitionname&gt;com.woltlab.wcf.notification.objectType&lt;/definitionname&gt;\n&lt;classname&gt;example\\system\\user\\notification\\object\\type\\FooUserNotificationObjectType&lt;/classname&gt;\n&lt;category&gt;com.woltlab.example&lt;/category&gt;\n&lt;/type&gt;\n&lt;/import&gt;\n&lt;/data&gt;\n</code></pre> <p>The referenced class <code>FooUserNotificationObjectType</code> has to implement the IUserNotificationObjectType interface, which should be done by extending AbstractUserNotificationObjectType.</p> files/lib/system/user/notification/object/type/FooUserNotificationObjectType.class.php <pre><code>&lt;?php\nnamespace example\\system\\user\\notification\\object\\type;\nuse example\\data\\foo\\Foo;\nuse example\\data\\foo\\FooList;\nuse example\\system\\user\\notification\\object\\FooUserNotificationObject;\nuse wcf\\system\\user\\notification\\object\\type\\AbstractUserNotificationObjectType;\n\n/**\n * Represents a foo as a notification object type.\n *\n * @author  Matthias Schmidt\n * @copyright   2001-2017 WoltLab GmbH\n * @license WoltLab License &lt;http://www.woltlab.com/license-agreement.html&gt;\n * @package WoltLabSuite\\Example\\System\\User\\Notification\\Object\\Type\n */\nclass FooUserNotificationObjectType extends AbstractUserNotificationObjectType {\n    /**\n     * @inheritDoc\n     */\n    protected static $decoratorClassName = FooUserNotificationObject::class;\n\n    /**\n     * @inheritDoc\n     */\n    protected static $objectClassName = Foo::class;\n\n    /**\n     * @inheritDoc\n     */\n    protected static $objectListClassName = FooList::class;\n}\n</code></pre> <p>You have to set the class names of the database object (<code>$objectClassName</code>) and the related list (<code>$objectListClassName</code>). Additionally, you have to create a class that implements the IUserNotificationObject whose name you have to set as the value of the <code>$decoratorClassName</code> property.</p> files/lib/system/user/notification/object/FooUserNotificationObject.class.php <pre><code>&lt;?php\nnamespace example\\system\\user\\notification\\object;\nuse example\\data\\foo\\Foo;\nuse wcf\\data\\DatabaseObjectDecorator;\nuse wcf\\system\\user\\notification\\object\\IUserNotificationObject;\n\n/**\n * Represents a foo as a notification object.\n *\n * @author  Matthias Schmidt\n * @copyright   2001-2017 WoltLab GmbH\n * @license WoltLab License &lt;http://www.woltlab.com/license-agreement.html&gt;\n * @package WoltLabSuite\\Example\\System\\User\\Notification\\Object\n *\n * @method  Foo getDecoratedObject()\n * @mixin   Foo\n */\nclass FooUserNotificationObject extends DatabaseObjectDecorator implements IUserNotificationObject {\n    /**\n     * @inheritDoc\n     */\n    protected static $baseClass = Foo::class;\n\n    /**\n     * @inheritDoc\n     */\n    public function getTitle() {\n        return $this-&gt;getDecoratedObject()-&gt;getTitle();\n    }\n\n    /**\n     * @inheritDoc\n     */\n    public function getURL() {\n        return $this-&gt;getDecoratedObject()-&gt;getLink();\n    }\n\n    /**\n     * @inheritDoc\n     */\n    public function getAuthorID() {\n        return $this-&gt;getDecoratedObject()-&gt;userID;\n    }\n}\n</code></pre> <ul> <li>The <code>getTitle()</code> method returns the title of the object.   In this case, we assume that the <code>Foo</code> class has implemented the ITitledObject interface so that the decorated <code>Foo</code> can handle this method call itself.</li> <li>The <code>getURL()</code> method returns the link to the object.   As for the <code>getTitle()</code>, we assume that the <code>Foo</code> class has implemented the ILinkableObject interface so that the decorated <code>Foo</code> can also handle this method call itself.</li> <li>The <code>getAuthorID()</code> method returns the id of the user who created the decorated <code>Foo</code> object.   We assume that <code>Foo</code> objects have a <code>userID</code> property that contains this id.</li> </ul>"},{"location":"php/api/user_notifications/#usernotificationeventxml","title":"<code>userNotificationEvent.xml</code>","text":"<p>Each event that you fire in your package needs to be registered using the user notification event package installation plugin. An example file might look like this:</p> userNotificationEvent.xml <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;data xmlns=\"http://www.woltlab.com\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.woltlab.com http://www.woltlab.com/XSD/2019/userNotificationEvent.xsd\"&gt;\n&lt;import&gt;\n&lt;event&gt;\n&lt;name&gt;bar&lt;/name&gt;\n&lt;objecttype&gt;com.woltlab.example.foo&lt;/objecttype&gt;\n&lt;classname&gt;example\\system\\user\\notification\\event\\FooUserNotificationEvent&lt;/classname&gt;\n&lt;preset&gt;1&lt;/preset&gt;\n&lt;/event&gt;\n&lt;/import&gt;\n&lt;/data&gt;\n</code></pre> <p>Here, you reference the user notification object type created via <code>objectType.xml</code>. The referenced class in the <code>&lt;classname&gt;</code> element has to implement the IUserNotificationEvent interface by extending the AbstractUserNotificationEvent class or the AbstractSharedUserNotificationEvent class if you want to pre-load additional data before processing notifications. In <code>AbstractSharedUserNotificationEvent::prepare()</code>, you can, for example, tell runtime caches to prepare to load certain objects which then are loaded all at once when the objects are needed.</p> files/lib/system/user/notification/event/FooUserNotificationEvent.class.php <pre><code>&lt;?php\nnamespace example\\system\\user\\notification\\event;\nuse example\\system\\cache\\runtime\\BazRuntimeCache;\nuse example\\system\\user\\notification\\object\\FooUserNotificationObject;\nuse wcf\\system\\email\\Email;\nuse wcf\\system\\request\\LinkHandler;\nuse wcf\\system\\user\\notification\\event\\AbstractSharedUserNotificationEvent;\n\n/**\n * Notification event for foos.\n *\n * @author  Matthias Schmidt\n * @copyright   2001-2017 WoltLab GmbH\n * @license WoltLab License &lt;http://www.woltlab.com/license-agreement.html&gt;\n * @package WoltLabSuite\\Example\\System\\User\\Notification\\Event\n *\n * @method  FooUserNotificationObject   getUserNotificationObject()\n */\nclass FooUserNotificationEvent extends AbstractSharedUserNotificationEvent {\n    /**\n     * @inheritDoc\n     */\n    protected $stackable = true;\n\n    /** @noinspection PhpMissingParentCallCommonInspection */\n    /**\n     * @inheritDoc\n     */\n    public function checkAccess() {\n        $this-&gt;getUserNotificationObject()-&gt;setBaz(BazRuntimeCache::getInstance()-&gt;getObject($this-&gt;getUserNotificationObject()-&gt;bazID));\n\n        if (!$this-&gt;getUserNotificationObject()-&gt;isAccessible()) {\n            // do some cleanup, if necessary\n\n            return false;\n        }\n\n        return true;\n    }\n\n    /** @noinspection PhpMissingParentCallCommonInspection */\n    /**\n     * @inheritDoc\n     */\n    public function getEmailMessage($notificationType = 'instant') {\n        $this-&gt;getUserNotificationObject()-&gt;setBaz(BazRuntimeCache::getInstance()-&gt;getObject($this-&gt;getUserNotificationObject()-&gt;bazID));\n\n        $messageID = '&lt;com.woltlab.example.baz/'.$this-&gt;getUserNotificationObject()-&gt;bazID.'@'.Email::getHost().'&gt;';\n\n        return [\n            'application' =&gt; 'example',\n            'in-reply-to' =&gt; [$messageID],\n            'message-id' =&gt; 'com.woltlab.example.foo/'.$this-&gt;getUserNotificationObject()-&gt;fooID,\n            'references' =&gt; [$messageID],\n            'template' =&gt; 'email_notification_foo'\n        ];\n    }\n\n    /**\n     * @inheritDoc\n     * @since   5.0\n     */\n    public function getEmailTitle() {\n        $this-&gt;getUserNotificationObject()-&gt;setBaz(BazRuntimeCache::getInstance()-&gt;getObject($this-&gt;getUserNotificationObject()-&gt;bazID));\n\n        return $this-&gt;getLanguage()-&gt;getDynamicVariable('example.foo.notification.mail.title', [\n            'userNotificationObject' =&gt; $this-&gt;getUserNotificationObject()\n        ]);\n    }\n\n    /** @noinspection PhpMissingParentCallCommonInspection */\n    /**\n     * @inheritDoc\n     */\n    public function getEventHash() {\n        return sha1($this-&gt;eventID . '-' . $this-&gt;getUserNotificationObject()-&gt;bazID);\n    }\n\n    /**\n     * @inheritDoc\n     */\n    public function getLink() {\n        return LinkHandler::getInstance()-&gt;getLink('Foo', [\n            'application' =&gt; 'example',\n            'object' =&gt; $this-&gt;getUserNotificationObject()-&gt;getDecoratedObject()\n        ]);\n    }\n\n    /**\n     * @inheritDoc\n     */\n    public function getMessage() {\n        $authors = $this-&gt;getAuthors();\n        $count = count($authors);\n\n        if ($count &gt; 1) {\n            if (isset($authors[0])) {\n                unset($authors[0]);\n            }\n            $count = count($authors);\n\n            return $this-&gt;getLanguage()-&gt;getDynamicVariable('example.foo.notification.message.stacked', [\n                'author' =&gt; $this-&gt;author,\n                'authors' =&gt; array_values($authors),\n                'count' =&gt; $count,\n                'guestTimesTriggered' =&gt; $this-&gt;notification-&gt;guestTimesTriggered,\n                'message' =&gt; $this-&gt;getUserNotificationObject(),\n                'others' =&gt; $count - 1\n            ]);\n        }\n\n        return $this-&gt;getLanguage()-&gt;getDynamicVariable('example.foo.notification.message', [\n            'author' =&gt; $this-&gt;author,\n            'userNotificationObject' =&gt; $this-&gt;getUserNotificationObject()\n        ]);\n    }\n\n    /**\n     * @inheritDoc\n     */\n    public function getTitle() {\n        $count = count($this-&gt;getAuthors());\n        if ($count &gt; 1) {\n            return $this-&gt;getLanguage()-&gt;getDynamicVariable('example.foo.notification.title.stacked', [\n                'count' =&gt; $count,\n                'timesTriggered' =&gt; $this-&gt;notification-&gt;timesTriggered\n            ]);\n        }\n\n        return $this-&gt;getLanguage()-&gt;get('example.foo.notification.title');\n    }\n\n    /**\n     * @inheritDoc\n     */\n    protected function prepare() {\n        BazRuntimeCache::getInstance()-&gt;cacheObjectID($this-&gt;getUserNotificationObject()-&gt;bazID);\n    }\n}\n</code></pre> <ul> <li>The <code>$stackable</code> property is <code>false</code> by default and has to be explicitly set to <code>true</code> if stacking of notifications should be enabled.   Stacking of notification does not create new notifications for the same event for a certain object if the related action as been triggered by different users.   For example, if something is liked by one user and then liked again by another user before the recipient of the notification has confirmed it, the existing notification will be amended to include both users who liked the content.   Stacking can thus be used to avoid cluttering the notification list of users.</li> <li>The <code>checkAccess()</code> method makes sure that the active user still has access to the object related to the notification.   If that is not the case, the user notification system will automatically deleted the user notification based on the return value of the method.   If you have any cached values related to notifications, you should also reset these values here.</li> <li>The <code>getEmailMessage()</code> method return data to create the instant email or the daily summary email.   For instant emails (<code>$notificationType = 'instant'</code>), you have to return an array like the one shown in the code above with the following components:</li> <li><code>application</code>:     abbreviation of application</li> <li><code>in-reply-to</code> (optional):     message id of the notification for the parent item and used to improve the ordering in threaded email clients</li> <li><code>message-id</code> (optional):     message id of the notification mail and has to be used in <code>in-reply-to</code> and <code>references</code> for follow up mails</li> <li><code>references</code> (optional):     all of the message ids of parent items (i.e. recursive in-reply-to)</li> <li><code>template</code>:     name of the template used to render the email body, should start with <code>email_</code></li> <li><code>variables</code> (optional):     template variables passed to the email template where they can be accessed via <code>$notificationContent[variables]</code></li> </ul> <p>For daily emails (<code>$notificationType = 'daily'</code>), only <code>application</code>, <code>template</code>, and <code>variables</code> are supported. - The <code>getEmailTitle()</code> returns the title of the instant email sent to the user.   By default, <code>getEmailTitle()</code> simply calls <code>getTitle()</code>. - The <code>getEventHash()</code> method returns a hash by which user notifications are grouped.   Here, we want to group them not by the actual <code>Foo</code> object but by its parent <code>Baz</code> object and thus overwrite the default implementation provided by <code>AbstractUserNotificationEvent</code>. - The <code>getLink()</code> returns the link to the <code>Foo</code> object the notification belongs to. - The <code>getMessage()</code> method and the <code>getTitle()</code> return the message and the title of the user notification respectively.   By checking the value of <code>count($this-&gt;getAuthors())</code>, we check if the notification is stacked, thus if the event has been triggered for multiple users so that different languages items are used.   If your notification event does not support stacking, this distinction is not necessary. - The <code>prepare()</code> method is called for each user notification before all user notifications are rendered.   This allows to tell runtime caches to prepare to load objects later on (see Runtime Caches).</p>"},{"location":"php/api/user_notifications/#firing-events","title":"Firing Events","text":"<p>When the action related to a user notification is executed, you can use <code>UserNotificationHandler::fireEvent()</code> to create the notifications:</p> <pre><code>$recipientIDs = []; // fill with user ids of the recipients of the notification\nUserNotificationHandler::getInstance()-&gt;fireEvent(\n    'bar', // event name\n    'com.woltlab.example.foo', // event object type name\n    new FooUserNotificationObject(new Foo($fooID)), // object related to the event\n    $recipientIDs\n);\n</code></pre>"},{"location":"php/api/user_notifications/#marking-notifications-as-confirmed","title":"Marking Notifications as Confirmed","text":"<p>In some instances, you might want to manually mark user notifications as confirmed without the user manually confirming them, for example when they visit the page that is related to the user notification. In this case, you can use <code>UserNotificationHandler::markAsConfirmed()</code>:</p> <pre><code>$recipientIDs = []; // fill with user ids of the recipients of the notification\n$fooIDs = []; // fill with ids of related foo objects\nUserNotificationHandler::getInstance()-&gt;markAsConfirmed(\n    'bar', // event name\n    'com.woltlab.example.foo', // event object type name\n    $recipientIDs,\n    $fooIDs\n);\n</code></pre>"},{"location":"php/api/form_builder/dependencies/","title":"Form Node Dependencies","text":"<p>Form node dependencies allow to make parts of a form dynamically available or unavailable depending on the values of form fields. Dependencies are always added to the object whose visibility is determined by certain form fields. They are not added to the form field\u2019s whose values determine the visibility! An example is a text form field that should only be available if a certain option from a single selection form field is selected. Form builder\u2019s dependency system supports such scenarios and also automatically making form containers unavailable once all of its children are unavailable.</p> <p>If a form node has multiple dependencies and one of them is not met, the form node is unavailable. A form node not being available due to dependencies has to the following consequences:</p> <ul> <li>The form field value is not validated. It is, however, read from the request data as all request data needs to be read first so that the dependencies can determine whether they are met or not.</li> <li>No data is collected for the form field and returned by <code>IFormDocument::getData()</code>.</li> <li>In the actual form, the form field will be hidden via JavaScript.</li> </ul>"},{"location":"php/api/form_builder/dependencies/#iformfielddependency","title":"<code>IFormFieldDependency</code>","text":"<p>The basis of the dependencies is the <code>IFormFieldDependency</code> interface that has to be implemented by every dependency class. The interface requires the following methods:</p> <ul> <li><code>checkDependency()</code> checks if the dependency is met, thus if the dependant form field should be considered available.</li> <li><code>dependentNode(IFormNode $node)</code> and <code>getDependentNode()</code> can be used to set and get the node whose availability depends on the referenced form field.   <code>TFormNode::addDependency()</code> automatically calls <code>dependentNode(IFormNode $node)</code> with itself as the dependent node, thus the dependent node is automatically set by the API.</li> <li><code>field(IFormField $field)</code> and <code>getField()</code> can be used to set and get the form field that influences the availability of the dependent node.</li> <li><code>fieldId($fieldId)</code> and <code>getFieldId()</code> can be used to set and get the id of the form field that influences the availability of the dependent node.</li> <li><code>getHtml()</code> returns JavaScript code required to ensure the dependency in the form output.</li> <li><code>getId()</code> returns the id of the dependency used to identify multiple dependencies of the same form node.</li> <li><code>static create($id)</code> is the factory method that has to be used to create new dependencies with the given id.</li> </ul> <p><code>AbstractFormFieldDependency</code> provides default implementations for all methods except for <code>checkDependency()</code>.</p> <p>Using <code>fieldId($fieldId)</code> instead of <code>field(IFormField $field)</code> makes sense when adding the dependency directly when setting up the form:</p> <pre><code>$container-&gt;appendChildren([\n    FooField::create('a'),\n\n    BarField::create('b')\n        -&gt;addDependency(\n            BazDependency::create('a')\n                -&gt;fieldId('a')\n        )\n]);\n</code></pre> <p>Here, without an additional assignment, the first field with id <code>a</code> cannot be accessed thus <code>fieldId($fieldId)</code> should be used as the id of the relevant field is known. When the form is built, all dependencies that only know the id of the relevant field and do not have a reference for the actual object are populated with the actual form field objects.</p>"},{"location":"php/api/form_builder/dependencies/#default-dependencies","title":"Default Dependencies","text":"<p>WoltLab Suite Core delivers the following default dependency classes by default:</p>"},{"location":"php/api/form_builder/dependencies/#nonemptyformfielddependency","title":"<code>NonEmptyFormFieldDependency</code>","text":"<p><code>NonEmptyFormFieldDependency</code> can be used to ensure that a node is only shown if the value of the referenced form field is not empty (being empty is determined using PHP\u2019s <code>empty()</code> language construct).</p>"},{"location":"php/api/form_builder/dependencies/#emptyformfielddependency","title":"<code>EmptyFormFieldDependency</code>","text":"<p>This is the inverse of <code>NonEmptyFormFieldDependency</code>, checking for <code>!empty()</code>.</p>"},{"location":"php/api/form_builder/dependencies/#valueformfielddependency","title":"<code>ValueFormFieldDependency</code>","text":"<p><code>ValueFormFieldDependency</code> can be used to ensure that a node is only shown if the value of the referenced form field is from a specified list of of values (see methods <code>values($values)</code> and <code>getValues()</code>).   Additionally, via <code>negate($negate = true)</code> and <code>isNegated()</code>, the logic can also be inverted by requiring the value of the referenced form field not to be from a specified list of values.</p>"},{"location":"php/api/form_builder/dependencies/#valueintervalformfielddependency","title":"<code>ValueIntervalFormFieldDependency</code>","text":"<p>Only available since version 5.5.</p> <p><code>ValueIntervalFormFieldDependency</code> can be used to ensure that a node is only shown if the value of the referenced form field is in a specific interval whose boundaries are set via <code>minimum(?float $minimum = null)</code> and <code>maximum(?float $maximum = null)</code>.</p>"},{"location":"php/api/form_builder/dependencies/#isnotclickedformfielddependency","title":"<code>IsNotClickedFormFieldDependency</code>","text":"<p><code>IsNotClickedFormFieldDependency</code> is a special dependency for <code>ButtonFormField</code>s. Refer to the documentation of <code>ButtomFormField</code> for details.</p>"},{"location":"php/api/form_builder/dependencies/#javascript-implementation","title":"JavaScript Implementation","text":"<p>To ensure that dependent node are correctly shown and hidden when changing the value of referenced form fields, every PHP dependency class has a corresponding JavaScript module that checks the dependency in the browser. Every JavaScript dependency has to extend <code>WoltLabSuite/Core/Form/Builder/Field/Dependency/Abstract</code> and implement the <code>checkDependency()</code> function, the JavaScript version of <code>IFormFieldDependency::checkDependency()</code>.</p> <p>All of the JavaScript dependency objects automatically register themselves during initialization with the <code>WoltLabSuite/Core/Form/Builder/Field/Dependency/Manager</code> which takes care of checking the dependencies at the correct points in time.</p> <p>Additionally, the dependency manager also ensures that form containers in which all children are hidden due to dependencies are also hidden and, once any child becomes available again, makes the container also available again. Every form container has to create a matching form container dependency object from a module based on <code>WoltLabSuite/Core/Form/Builder/Field/Dependency/Abstract</code>.</p>"},{"location":"php/api/form_builder/dependencies/#examples","title":"Examples","text":"<p>If <code>$booleanFormField</code> is an instance of <code>BooleanFormField</code> and the text form field <code>$textFormField</code> should only be available if \u201cYes\u201d has been selected, the following condition has to be set up:</p> <pre><code>$textFormField-&gt;addDependency(\n    NonEmptyFormFieldDependency::create('booleanFormField')\n        -&gt;field($booleanFormField)\n);\n</code></pre> <p>If <code>$singleSelectionFormField</code> is an instance of <code>SingleSelectionFormField</code> that offers the options <code>1</code>, <code>2</code>, and <code>3</code> and <code>$textFormField</code> should only be available if <code>1</code> or <code>3</code> is selected, the following condition has to be set up:</p> <pre><code>$textFormField-&gt;addDependency(\n    ValueFormFieldDependency::create('singleSelectionFormField')\n        -&gt;field($singleSelectionFormField)\n        -&gt;values([1, 3])\n);\n</code></pre> <p>If, in contrast, <code>$singleSelectionFormField</code> has many available options and <code>7</code> is the only option for which <code>$textFormField</code> should not be available, <code>negate()</code> should be used:</p> <pre><code>$textFormField-&gt;addDependency(\n    ValueFormFieldDependency::create('singleSelectionFormField')\n        -&gt;field($singleSelectionFormField)\n        -&gt;values([7])\n        -&gt;negate()\n);\n</code></pre>"},{"location":"php/api/form_builder/form_fields/","title":"Form Builder Fields","text":""},{"location":"php/api/form_builder/form_fields/#abstract-form-fields","title":"Abstract Form Fields","text":"<p>The following form field classes cannot be instantiated directly because they are abstract, but they can/must be used when creating own form field classes. </p>"},{"location":"php/api/form_builder/form_fields/#abstractformfield","title":"<code>AbstractFormField</code>","text":"<p><code>AbstractFormField</code> is the abstract default implementation of the <code>IFormField</code> interface and it is expected that every implementation of <code>IFormField</code> implements the interface by extending this class.</p>"},{"location":"php/api/form_builder/form_fields/#abstractnumericformfield","title":"<code>AbstractNumericFormField</code>","text":"<p><code>AbstractNumericFormField</code> is the abstract implementation of a form field handling a single numeric value. The class implements <code>IAttributeFormField</code>, <code>IAutoCompleteFormField</code>, <code>ICssClassFormField</code>, <code>IImmutableFormField</code>, <code>IInputModeFormField</code>, <code>IMaximumFormField</code>, <code>IMinimumFormField</code>, <code>INullableFormField</code>, <code>IPlaceholderFormField</code> and <code>ISuffixedFormField</code>. If the property <code>$integerValues</code> is <code>true</code>, the form field works with integer values, otherwise it works with floating point numbers. The methods <code>step($step = null)</code> and <code>getStep()</code> can be used to set and get the step attribute of the <code>input</code> element. The default step for form fields with integer values is <code>1</code>. Otherwise, the default step is <code>any</code>.</p>"},{"location":"php/api/form_builder/form_fields/#abstractformfielddecorator","title":"<code>AbstractFormFieldDecorator</code>","text":"<p>Only available since version 5.4.5.</p> <p><code>AbstractFormFieldDecorator</code> is a default implementation of a decorator for form fields that forwards calls to all methods defined in <code>IFormField</code> to the respective method of the decorated object. The class implements <code>IFormfield</code>. If the implementation of a more specific interface is required then the remaining methods must be implemented in the concrete decorator derived from <code>AbstractFormFieldDecorator</code> and the type of the <code>$field</code> property must be narrowed appropriately.</p>"},{"location":"php/api/form_builder/form_fields/#general-form-fields","title":"General Form Fields","text":"<p>The following form fields are general reusable fields without any underlying context.</p>"},{"location":"php/api/form_builder/form_fields/#booleanformfield","title":"<code>BooleanFormField</code>","text":"<p><code>BooleanFormField</code> is used for boolean (<code>0</code> or <code>1</code>, <code>yes</code> or <code>no</code>) values. Objects of this class require a label. The return value of <code>getSaveValue()</code> is the integer representation of the boolean value, i.e. <code>0</code> or <code>1</code>. The class implements <code>IAttributeFormField</code>, <code>IAutoFocusFormField</code>, <code>ICssClassFormField</code>, and <code>IImmutableFormField</code>.</p>"},{"location":"php/api/form_builder/form_fields/#checkboxformfield","title":"<code>CheckboxFormField</code>","text":"<p>Only available since version 5.3.2.</p> <p><code>CheckboxFormField</code> extends <code>BooleanFormField</code> and offers a simple HTML checkbox.</p>"},{"location":"php/api/form_builder/form_fields/#classnameformfield","title":"<code>ClassNameFormField</code>","text":"<p><code>ClassNameFormField</code> is a text form field that supports additional settings, specific to entering a PHP class name:</p> <ul> <li><code>classExists($classExists = true)</code> and <code>getClassExists()</code> can be used to ensure that the entered class currently exists in the installation.   By default, the existance of the entered class is required.</li> <li><code>implementedInterface($interface)</code> and <code>getImplementedInterface()</code> can be used to ensure that the entered class implements the specified interface.   By default, no interface is required.</li> <li><code>parentClass($parentClass)</code> and <code>getParentClass()</code> can be used to ensure that the entered class extends the specified class.   By default, no parent class is required.</li> <li><code>instantiable($instantiable = true)</code> and <code>isInstantiable()</code> can be used to ensure that the entered class is instantiable.   By default, entered classes have to instantiable.</li> </ul> <p>Additionally, the default id of a <code>ClassNameFormField</code> object is <code>className</code>, the default label is <code>wcf.form.field.className</code>, and if either an interface or a parent class is required, a default description is set if no description has already been set (<code>wcf.form.field.className.description.interface</code> and <code>wcf.form.field.className.description.parentClass</code>, respectively).</p>"},{"location":"php/api/form_builder/form_fields/#dateformfield","title":"<code>DateFormField</code>","text":"<p><code>DateFormField</code> is a form field to enter a date (and optionally a time). The class implements <code>IAttributeFormField</code>, <code>IAutoFocusFormField</code>, <code>ICssClassFormField</code>, <code>IImmutableFormField</code>, and <code>INullableFormField</code>. The following methods are specific to this form field class:</p> <ul> <li><code>earliestDate($earliestDate)</code> and <code>getEarliestDate()</code> can be used to get and set the earliest selectable/valid date and <code>latestDate($latestDate)</code> and <code>getLatestDate()</code> can be used to get and set the latest selectable/valid date.   The date passed to the setters must have the same format as set via <code>saveValueFormat()</code>.   If a custom format is used, that format has to be set via <code>saveValueFormat()</code> before calling any of the setters.</li> <li><code>saveValueFormat($saveValueFormat)</code> and <code>getSaveValueFormat()</code> can be used to specify the date format of the value returned by <code>getSaveValue()</code>.   By default, <code>U</code> is used as format.   The PHP manual provides an overview of supported formats.</li> <li><code>supportTime($supportsTime = true)</code> and <code>supportsTime()</code> can be used to toggle whether, in addition to a date, a time can also be specified.   By default, specifying a time is disabled.</li> </ul>"},{"location":"php/api/form_builder/form_fields/#descriptionformfield","title":"<code>DescriptionFormField</code>","text":"<p><code>DescriptionFormField</code> is a multi-line text form field with <code>description</code> as the default id and <code>wcf.global.description</code> as the default label.</p>"},{"location":"php/api/form_builder/form_fields/#emailformfield","title":"<code>EmailFormField</code>","text":"<p><code>EmailFormField</code> is a form field to enter an email address which is internally validated using <code>UserUtil::isValidEmail()</code>. The class implements <code>IAttributeFormField</code>, <code>IAutoCompleteFormField</code>, <code>IAutoFocusFormField</code>, <code>ICssClassFormField</code>, <code>II18nFormField</code>, <code>IImmutableFormField</code>, <code>IInputModeFormField</code>, <code>IPatternFormField</code>, and <code>IPlaceholderFormField</code>.</p>"},{"location":"php/api/form_builder/form_fields/#floatformfield","title":"<code>FloatFormField</code>","text":"<p><code>FloatFormField</code> is an implementation of AbstractNumericFormField for floating point numbers.</p>"},{"location":"php/api/form_builder/form_fields/#hiddenformfield","title":"<code>HiddenFormField</code>","text":"<p><code>HiddenFormField</code> is a form field without any user-visible UI. Even though the form field is invisible to the user, the value can still be modified by the user, e.g. by leveraging the web browsers developer tools. The <code>HiddenFormField</code> must not be used to transfer sensitive information or information that the user should not be able to modify.</p>"},{"location":"php/api/form_builder/form_fields/#iconformfield","title":"<code>IconFormField</code>","text":"<p><code>IconFormField</code> is a form field to select a FontAwesome icon.</p>"},{"location":"php/api/form_builder/form_fields/#integerformfield","title":"<code>IntegerFormField</code>","text":"<p><code>IntegerFormField</code> is an implementation of AbstractNumericFormField for integers.</p>"},{"location":"php/api/form_builder/form_fields/#isdisabledformfield","title":"<code>IsDisabledFormField</code>","text":"<p><code>IsDisabledFormField</code> is a boolean form field with <code>isDisabled</code> as the default id.</p>"},{"location":"php/api/form_builder/form_fields/#itemlistformfield","title":"<code>ItemListFormField</code>","text":"<p><code>ItemListFormField</code> is a form field in which multiple values can be entered and returned in different formats as save value. The class implements <code>IAttributeFormField</code>, <code>IAutoFocusFormField</code>, <code>ICssClassFormField</code>, <code>IImmutableFormField</code>, and <code>IMultipleFormField</code>. The <code>saveValueType($saveValueType)</code> and <code>getSaveValueType()</code> methods are specific to this form field class and determine the format of the save value. The following save value types are supported:</p> <ul> <li><code>ItemListFormField::SAVE_VALUE_TYPE_ARRAY</code> adds a custom data processor that writes the form field data directly in the parameters array and not in the data sub-array of the parameters array.</li> <li><code>ItemListFormField::SAVE_VALUE_TYPE_CSV</code> lets the value be returned as a string in which the values are concatenated by commas.</li> <li><code>ItemListFormField::SAVE_VALUE_TYPE_NSV</code> lets the value be returned as a string in which the values are concatenated by <code>\\n</code>.</li> <li><code>ItemListFormField::SAVE_VALUE_TYPE_SSV</code> lets the value be returned as a string in which the values are concatenated by spaces.</li> </ul> <p>By default, <code>ItemListFormField::SAVE_VALUE_TYPE_CSV</code> is used.</p> <p>If <code>ItemListFormField::SAVE_VALUE_TYPE_ARRAY</code> is used as save value type, <code>ItemListFormField</code> objects register a custom form field data processor to add the relevant array into the <code>$parameters</code> array directly using the object property as the array key.</p>"},{"location":"php/api/form_builder/form_fields/#multilinetextformfield","title":"<code>MultilineTextFormField</code>","text":"<p><code>MultilineTextFormField</code> is a text form field that supports multiple rows of text. The methods <code>rows($rows)</code> and <code>getRows()</code> can be used to set and get the number of rows of the <code>textarea</code> elements. The default number of rows is <code>10</code>. These methods do not, however, restrict the number of text rows that can be entered.</p>"},{"location":"php/api/form_builder/form_fields/#multipleselectionformfield","title":"<code>MultipleSelectionFormField</code>","text":"<p><code>MultipleSelectionFormField</code> is a form fields that allows the selection of multiple options out of a predefined list of available options. The class implements <code>IAttributeFormField</code>, <code>ICssClassFormField</code>, <code>IFilterableSelectionFormField</code>, and <code>IImmutableFormField</code>.</p>"},{"location":"php/api/form_builder/form_fields/#radiobuttonformfield","title":"<code>RadioButtonFormField</code>","text":"<p><code>RadioButtonFormField</code> is a form fields that allows the selection of a single option out of a predefined list of available options using radiobuttons. The class implements <code>IAttributeFormField</code>, <code>ICssClassFormField</code>, <code>IImmutableFormField</code>, and <code>ISelectionFormField</code>.</p>"},{"location":"php/api/form_builder/form_fields/#ratingformfield","title":"<code>RatingFormField</code>","text":"<p><code>RatingFormField</code> is a form field to set a rating for an object. The class implements <code>IImmutableFormField</code>, <code>IMaximumFormField</code>, <code>IMinimumFormField</code>, and <code>INullableFormField</code>. Form fields of this class have <code>rating</code> as their default id, <code>wcf.form.field.rating</code> as their default label, <code>1</code> as their default minimum, and <code>5</code> as their default maximum. For this field, the minimum and maximum refer to the minimum and maximum rating an object can get. When the field is shown, there will be <code>maximum() - minimum() + 1</code> icons be shown with additional CSS classes that can be set and gotten via <code>defaultCssClasses(array $cssClasses)</code> and <code>getDefaultCssClasses()</code>. If a rating values is set, the first <code>getValue()</code> icons will instead use the classes that can be set and gotten via <code>activeCssClasses(array $cssClasses)</code> and <code>getActiveCssClasses()</code>. By default, the only default class is <code>fa-star-o</code> and the active classes are <code>fa-star</code> and <code>orange</code>. </p>"},{"location":"php/api/form_builder/form_fields/#showorderformfield","title":"<code>ShowOrderFormField</code>","text":"<p><code>ShowOrderFormField</code> is a single selection form field for which the selected value determines the position at which an object is shown. The show order field provides a list of all siblings and the object will be positioned after the selected sibling. To insert objects at the very beginning, the <code>options()</code> automatically method prepends an additional option for that case so that only the existing siblings need to be passed. The default id of instances of this class is <code>showOrder</code> and their default label is <code>wcf.form.field.showOrder</code>.</p> <p>It is important that the relevant object property is always kept updated. Whenever a new object is added or an existing object is edited or delete, the values of the other objects have to be adjusted to ensure consecutive numbering.</p>"},{"location":"php/api/form_builder/form_fields/#singleselectionformfield","title":"<code>SingleSelectionFormField</code>","text":"<p><code>SingleSelectionFormField</code> is a form fields that allows the selection of a single option out of a predefined list of available options. The class implements <code>ICssClassFormField</code>, <code>IFilterableSelectionFormField</code>, <code>IImmutableFormField</code>, and <code>INullableFormField</code>. If the field is nullable and the current form field value is considered <code>empty</code> by PHP, <code>null</code> is returned as the save value.</p>"},{"location":"php/api/form_builder/form_fields/#sortorderformfield","title":"<code>SortOrderFormField</code>","text":"<p><code>SingleSelectionFormField</code> is a single selection form field with default id <code>sortOrder</code>, default label <code>wcf.global.showOrder</code> and default options <code>ASC: wcf.global.sortOrder.ascending</code> and <code>DESC: wcf.global.sortOrder.descending</code>.</p>"},{"location":"php/api/form_builder/form_fields/#textformfield","title":"<code>TextFormField</code>","text":"<p><code>TextFormField</code> is a form field that allows entering a single line of text. The class implements <code>IAttributeFormField</code>, <code>IAutoCompleteFormField</code>, <code>ICssClassFormField</code>, <code>IImmutableFormField</code>, <code>II18nFormField</code>, <code>IInputModeFormField</code>, <code>IMaximumLengthFormField</code>, <code>IMinimumLengthFormField</code>, <code>IPatternFormField</code>, and <code>IPlaceholderFormField</code>.</p>"},{"location":"php/api/form_builder/form_fields/#titleformfield","title":"<code>TitleFormField</code>","text":"<p><code>TitleFormField</code> is a text form field with <code>title</code> as the default id and <code>wcf.global.title</code> as the default label.</p>"},{"location":"php/api/form_builder/form_fields/#urlformfield","title":"<code>UrlFormField</code>","text":"<p><code>UrlFormField</code> is a text form field whose values are checked via <code>Url::is()</code>.</p>"},{"location":"php/api/form_builder/form_fields/#specific-fields","title":"Specific Fields","text":"<p>The following form fields are reusable fields that generally are bound to a certain API or <code>DatabaseObject</code> implementation.</p>"},{"location":"php/api/form_builder/form_fields/#aclformfield","title":"<code>AclFormField</code>","text":"<p><code>AclFormField</code> is used for setting up acl values for specific objects. The class implements <code>IObjectTypeFormField</code> and requires an object type of the object type definition <code>com.woltlab.wcf.acl</code>. Additionally, the class provides the methods <code>categoryName($categoryName)</code> and <code>getCategoryName()</code> that allow setting a specific name or filter for the acl option categories whose acl options are shown. A category name of <code>null</code> signals that no category filter is used.</p> <p>Since version 5.5, the category name also supports filtering using a wildcard like <code>user.*</code>, see WoltLab/WCF#4355.</p> <p><code>AclFormField</code> objects register a custom form field data processor to add the relevant ACL object type id into the <code>$parameters</code> array directly using <code>{$objectProperty}_aclObjectTypeID</code> as the array key. The relevant database object action method is expected, based on the given ACL object type id, to save the ACL option values appropriately.</p>"},{"location":"php/api/form_builder/form_fields/#buttonformfield","title":"<code>ButtonFormField</code>","text":"<p>Only available since version 5.4.</p> <p><code>ButtonFormField</code> shows a submit button as part of the form. The class implements <code>IAttributeFormField</code> and <code>ICssClassFormField</code>.</p> <p>Specifically for this form field, there is the <code>IsNotClickedFormFieldDependency</code> dependency with which certain parts of the form will only be processed if the relevent button has not clicked. </p>"},{"location":"php/api/form_builder/form_fields/#captchaformfield","title":"<code>CaptchaFormField</code>","text":"<p><code>CaptchaFormField</code> is used to add captcha protection to the form.</p> <p>You must specify a captcha object type (<code>com.woltlab.wcf.captcha</code>) using the <code>objectType()</code> method.</p>"},{"location":"php/api/form_builder/form_fields/#colorformfield","title":"<code>ColorFormField</code>","text":"<p>Only available since version 5.5.</p> <p><code>ColorFormField</code> is used to specify RGBA colors using the <code>rgba(r, g, b, a)</code> format. The class implements <code>IImmutableFormField</code>.</p>"},{"location":"php/api/form_builder/form_fields/#contentlanguageformfield","title":"<code>ContentLanguageFormField</code>","text":"<p><code>ContentLanguageFormField</code> is used to select the content language of an object. Fields of this class are only available if multilingualism is enabled and if there are content languages.  The class implements <code>IImmutableFormField</code>.</p>"},{"location":"php/api/form_builder/form_fields/#labelformfield","title":"<code>LabelFormField</code>","text":"<p><code>LabelFormField</code> is used to select a label from a specific label group. The class implements <code>IObjectTypeFormNode</code>.</p> <p>The <code>labelGroup(ViewableLabelGroup $labelGroup)</code> and <code>getLabelGroup()</code> methods are specific to this form field class and can be used to set and get the label group whose labels can be selected. Additionally, there is the static method <code>createFields($objectType, array $labelGroups, $objectProperty = 'labelIDs)</code> that can be used to create all relevant label form fields for a given list of label groups. In most cases, <code>LabelFormField::createFields()</code> should be used.</p>"},{"location":"php/api/form_builder/form_fields/#optionformfield","title":"<code>OptionFormField</code>","text":"<p><code>OptionFormField</code> is an item list form field to set a list of options. The class implements <code>IPackagesFormField</code> and only options of the set packages are considered available. The default label of instances of this class is <code>wcf.form.field.option</code> and their default id is <code>options</code>.</p>"},{"location":"php/api/form_builder/form_fields/#simpleaclformfield","title":"<code>SimpleAclFormField</code>","text":"<p><code>SimpleAclFormField</code> is used for setting up simple acl values (one <code>yes</code>/<code>no</code> option per user and user group) for specific objects.</p> <p><code>SimpleAclFormField</code> objects register a custom form field data processor to add the relevant simple ACL data array into the <code>$parameters</code> array directly using the object property as the array key.</p> <p>Since version 5.5, the field also supports inverted permissions, see WoltLab/WCF#4570.</p> <p>The <code>SimpleAclFormField</code> supports inverted permissions, allowing the administrator to grant access to all non-selected users and groups. If this behavior is desired, it needs to be enabled by calling <code>supportInvertedPermissions</code>. An <code>invertPermissions</code> key containing a boolean value with the users selection will be provided together with the ACL values when saving the field.</p>"},{"location":"php/api/form_builder/form_fields/#singlemediaselectionformfield","title":"<code>SingleMediaSelectionFormField</code>","text":"<p><code>SingleMediaSelectionFormField</code> is used to select a specific media file. The class implements <code>IImmutableFormField</code>.</p> <p>The following methods are specific to this form field class:</p> <ul> <li><code>imageOnly($imageOnly = true)</code> and <code>isImageOnly()</code> can be used to set and check if only images may be selected.</li> <li><code>getMedia()</code> returns the media file based on the current field value if a field is set.</li> </ul>"},{"location":"php/api/form_builder/form_fields/#tagformfield","title":"<code>TagFormField</code>","text":"<p><code>TagFormField</code> is a form field to enter tags. The class implements <code>IAttributeFormField</code> and <code>IObjectTypeFormNode</code>. Arrays passed to <code>TagFormField::values()</code> can contain tag names as strings and <code>Tag</code> objects. The default label of instances of this class is <code>wcf.tagging.tags</code> and their default description is <code>wcf.tagging.tags.description</code>.</p> <p><code>TagFormField</code> objects register a custom form field data processor to add the array with entered tag names into the <code>$parameters</code> array directly using the object property as the array key.</p>"},{"location":"php/api/form_builder/form_fields/#uploadformfield","title":"<code>UploadFormField</code>","text":"<p><code>UploadFormField</code> is a form field that allows uploading files by the user.</p> <p><code>UploadFormField</code> objects register a custom form field data processor to add the array of <code>wcf\\system\\file\\upload\\UploadFile\\UploadFile</code> into the <code>$parameters</code> array directly using the object property as the array key. Also it registers the removed files as an array of <code>wcf\\system\\file\\upload\\UploadFile\\UploadFile</code> into the <code>$parameters</code> array directly using the object property with the suffix <code>_removedFiles</code> as the array key.  </p> <p>The field supports additional settings:</p> <ul> <li><code>imageOnly($imageOnly = true)</code> and <code>isImageOnly()</code> can be used to ensure that the uploaded files are only images.</li> <li><code>allowSvgImage($allowSvgImages = true)</code> and <code>svgImageAllowed()</code> can be used to allow SVG images, if the image only mode is enabled (otherwise, the method will throw an exception). By default, SVG images are not allowed.</li> </ul>"},{"location":"php/api/form_builder/form_fields/#provide-value-from-database-object","title":"Provide value from database object","text":"<p>To provide values from a database object, you should implement the method <code>get{$objectProperty}UploadFileLocations()</code> to your database object class. This method must return an array of strings with the locations of the files.</p>"},{"location":"php/api/form_builder/form_fields/#process-files","title":"Process files","text":"<p>To process files in the database object action class, you must <code>rename</code> the file to the final destination. You get the temporary location, by calling the method <code>getLocation()</code> on the given <code>UploadFile</code> objects. After that, you call <code>setProcessed($location)</code> with <code>$location</code> contains the new file location. This method sets the <code>isProcessed</code> flag to true and saves the new location. For updating files, it is relevant, whether a given file is already processed or not. For this case, the <code>UploadFile</code> object has an method <code>isProcessed()</code> which indicates, whether a file is already processed or new uploaded.</p>"},{"location":"php/api/form_builder/form_fields/#userformfield","title":"<code>UserFormField</code>","text":"<p><code>UserFormField</code> is a form field to enter existing users. The class implements <code>IAutoCompleteFormField</code>, <code>IAutoFocusFormField</code>, <code>IImmutableFormField</code>, <code>IMultipleFormField</code>, and <code>INullableFormField</code>. While the user is presented the names of the specified users in the user interface, the field returns the ids of the users as data. The relevant <code>UserProfile</code> objects can be accessed via the <code>getUsers()</code> method.</p>"},{"location":"php/api/form_builder/form_fields/#userpasswordfield","title":"<code>UserPasswordField</code>","text":"<p>Only available since version 5.4.</p> <p><code>UserPasswordField</code> is a form field for users' to enter their current password. The class implements <code>IAttributeFormField</code>, <code>IAttributeFormField</code>, <code>IAutoCompleteFormField</code>, <code>IAutoFocusFormField</code>, and <code>IPlaceholderFormField</code></p>"},{"location":"php/api/form_builder/form_fields/#usergroupoptionformfield","title":"<code>UserGroupOptionFormField</code>","text":"<p><code>UserGroupOptionFormField</code> is an item list form field to set a list of user group options/permissions. The class implements <code>IPackagesFormField</code> and only user group options of the set packages are considered available. The default label of instances of this class is <code>wcf.form.field.userGroupOption</code> and their default id is <code>permissions</code>.</p>"},{"location":"php/api/form_builder/form_fields/#usernameformfield","title":"<code>UsernameFormField</code>","text":"<p><code>UsernameFormField</code> is used for entering one non-existing username. The class implements <code>IAttributeFormField</code>, <code>IImmutableFormField</code>, <code>IMaximumLengthFormField</code>, <code>IMinimumLengthFormField</code>, <code>INullableFormField</code>, and <code>IPlaceholderFormField</code>. As usernames have a system-wide restriction of a minimum length of 3 and a maximum length of 100 characters, these values are also used as the default value for the field\u2019s minimum and maximum length.</p>"},{"location":"php/api/form_builder/form_fields/#wysiwyg-form-container","title":"Wysiwyg form container","text":"<p>To integrate a wysiwyg editor into a form, you have to create a <code>WysiwygFormContainer</code> object. This container takes care of creating all necessary form nodes listed below for a wysiwyg editor.</p> <p>When creating the container object, its id has to be the id of the form field that will manage the actual text.</p> <p>The following methods are specific to this form container class:</p> <ul> <li><code>addSettingsNode(IFormChildNode $settingsNode)</code> and <code>addSettingsNodes(array $settingsNodes)</code> can be used to add nodes to the settings tab container.</li> <li><code>attachmentData($objectType, $parentObjectID)</code> can be used to set the data relevant for attachment support.   By default, not attachment data is set, thus attachments are not supported.</li> <li><code>getAttachmentField()</code>, <code>getPollContainer()</code>, <code>getSettingsContainer()</code>, <code>getSmiliesContainer()</code>, and <code>getWysiwygField()</code> can be used to get the different components of the wysiwyg form container once the form has been built.</li> <li><code>enablePreviewButton($enablePreviewButton)</code> can be used to set whether the preview button for the message is shown or not.   By default, the preview button is shown.   This method is only relevant before the form is built.   Afterwards, the preview button availability can not be changed.   Only available since WoltLab Suite Core 5.3.</li> <li><code>getObjectId()</code> returns the id of the edited object or <code>0</code> if no object is edited.</li> <li><code>getPreselect()</code>, <code>preselect($preselect)</code> can be used to set the value of the wysiwyg tab menu's <code>data-preselect</code> attribute used to determine which tab is preselected.   By default, the preselect is <code>'true'</code> which is used to pre-select the first tab.</li> <li><code>messageObjectType($messageObjectType)</code> can be used to set the message object type.</li> <li><code>pollObjectType($pollObjectType)</code> can be used to set the poll object type.   By default, no poll object type is set, thus the poll form field container is not available.</li> <li><code>supportMentions($supportMentions)</code> can be used to set if mentions are supported.   By default, mentions are not supported.   This method is only relevant before the form is built.   Afterwards, mention support can only be changed via the wysiwyg form field.</li> <li><code>supportSmilies($supportSmilies)</code> can be used to set if smilies are supported.   By default, smilies are supported.   This method is only relevant before the form is built.   Afterwards, smiley availability can only be changed via changing the availability of the smilies form container.</li> </ul>"},{"location":"php/api/form_builder/form_fields/#wysiwygattachmentformfield","title":"<code>WysiwygAttachmentFormField</code>","text":"<p><code>WysiwygAttachmentFormField</code> provides attachment support for a wysiwyg editor via a tab in the menu below the editor. This class should not be used directly but only via <code>WysiwygFormContainer</code>. The methods <code>attachmentHandler(AttachmentHandler $attachmentHandler)</code> and <code>getAttachmentHandler()</code> can be used to set and get the <code>AttachmentHandler</code> object that is used for uploaded attachments.</p>"},{"location":"php/api/form_builder/form_fields/#wysiwygpollformcontainer","title":"<code>WysiwygPollFormContainer</code>","text":"<p><code>WysiwygPollFormContainer</code> provides poll support for a wysiwyg editor via a tab in the menu below the editor. This class should not be used directly but only via <code>WysiwygFormContainer</code>. <code>WysiwygPollFormContainer</code> contains all form fields that are required to create polls and requires edited objects to implement <code>IPollContainer</code>.</p> <p>The following methods are specific to this form container class:</p> <ul> <li><code>getEndTimeField()</code> returns the form field to set the end time of the poll once the form has been built.</li> <li><code>getIsChangeableField()</code> returns the form field to set if poll votes can be changed once the form has been built.</li> <li><code>getIsPublicField()</code> returns the form field to set if poll results are public once the form has been built.</li> <li><code>getMaxVotesField()</code> returns the form field to set the maximum number of votes once the form has been built.</li> <li><code>getOptionsField()</code> returns the form field to set the poll options once the form has been built.</li> <li><code>getQuestionField()</code> returns the form field to set the poll question once the form has been built.</li> <li><code>getResultsRequireVoteField()</code> returns the form field to set if viewing the poll results requires voting once the form has been built.</li> <li><code>getSortByVotesField()</code> returns the form field to set if the results are sorted by votes once the form has been built.</li> </ul>"},{"location":"php/api/form_builder/form_fields/#wysiwygsmileyformcontainer","title":"<code>WysiwygSmileyFormContainer</code>","text":"<p><code>WysiwygSmileyFormContainer</code> provides smiley support for a wysiwyg editor via a tab in the menu below the editor. This class should not be used directly but only via <code>WysiwygFormContainer</code>. <code>WysiwygSmileyFormContainer</code> creates a sub-tab for each smiley category.</p>"},{"location":"php/api/form_builder/form_fields/#wysiwygsmileyformnode","title":"<code>WysiwygSmileyFormNode</code>","text":"<p><code>WysiwygSmileyFormNode</code> is contains the smilies of a specific category. This class should not be used directly but only via <code>WysiwygSmileyFormContainer</code>.</p>"},{"location":"php/api/form_builder/form_fields/#example","title":"Example","text":"<p>The following code creates a WYSIWYG editor component for a <code>message</code> object property. As smilies are supported by default and an attachment object type is given, the tab menu below the editor has two tabs: \u201cSmilies\u201d and \u201cAttachments\u201d. Additionally, mentions and quotes are supported.</p> <pre><code>WysiwygFormContainer::create('message')\n    -&gt;label('foo.bar.message')\n    -&gt;messageObjectType('com.example.foo.bar')\n    -&gt;attachmentData('com.example.foo.bar')\n    -&gt;supportMentions()\n    -&gt;supportQuotes()\n</code></pre>"},{"location":"php/api/form_builder/form_fields/#wysiwygformfield","title":"<code>WysiwygFormField</code>","text":"<p><code>WysiwygFormField</code> is used for wysiwyg editor form fields. This class should, in general, not be used directly but only via <code>WysiwygFormContainer</code>. The class implements <code>IAttributeFormField</code>, <code>IMaximumLengthFormField</code>, <code>IMinimumLengthFormField</code>, and <code>IObjectTypeFormNode</code> and requires an object type of the object type definition <code>com.woltlab.wcf.message</code>. The following methods are specific to this form field class:</p> <ul> <li><code>autosaveId($autosaveId)</code> and <code>getAutosaveId()</code> can be used enable automatically saving the current editor contents in the browser using the given id.   An empty string signals that autosaving is disabled.</li> <li><code>lastEditTime($lastEditTime)</code> and <code>getLastEditTime()</code> can be used to set the last time the contents have been edited and saved so that the JavaScript can determine if the contents stored in the browser are older or newer.   <code>0</code> signals that no last edit time has been set.</li> <li> <p><code>supportAttachments($supportAttachments)</code> and <code>supportsAttachments()</code> can be used to set and check if the form field supports attachments.</p> <p>It is not sufficient to simply signal attachment support via these methods for attachments to work. These methods are relevant internally to signal the Javascript code that the editor supports attachments. Actual attachment support is provided by <code>WysiwygAttachmentFormField</code>.</p> </li> <li> <p><code>supportMentions($supportMentions)</code> and <code>supportsMentions()</code> can be used to set and check if the form field supports mentions of other users.</p> </li> </ul> <p><code>WysiwygFormField</code> objects register a custom form field data processor to add the relevant simple ACL data array into the <code>$parameters</code> array directly using the object property as the array key.</p>"},{"location":"php/api/form_builder/form_fields/#twysiwygformnode","title":"<code>TWysiwygFormNode</code>","text":"<p>All form nodes that need to know the id of the <code>WysiwygFormField</code> field should use <code>TWysiwygFormNode</code>. This trait provides <code>getWysiwygId()</code> and <code>wysiwygId($wysiwygId)</code> to get and set the relevant wysiwyg editor id.</p>"},{"location":"php/api/form_builder/form_fields/#application-specific-form-fields","title":"Application-Specific Form Fields","text":""},{"location":"php/api/form_builder/form_fields/#woltlab-suite-forum","title":"WoltLab Suite Forum","text":""},{"location":"php/api/form_builder/form_fields/#multipleboardselectionformfield","title":"<code>MultipleBoardSelectionFormField</code>","text":"<p>Only available since version 5.5.</p> <p><code>MultipleBoardSelectionFormField</code> is used to select multiple forums. The class implements <code>IAttributeFormField</code>, <code>ICssClassFormField</code>, and <code>IImmutableFormField</code>.</p> <p>The field supports additional settings:</p> <ul> <li><code>boardNodeList(BoardNodeList $boardNodeList): self</code> and <code>getBoardNodeList(): BoardNodeList</code> are used to set and get the list of board nodes used to render the board selection.   <code>boardNodeList(BoardNodeList $boardNodeList): self</code> will automatically call <code>readNodeTree()</code> on the given board node list.</li> <li><code>categoriesSelectable(bool $categoriesSelectable = true): self</code> and <code>areCategoriesSelectable(): bool</code> are used to set and check if the categories in the board node list are selectable.   By default, categories are selectable.   This option is useful if only actual boards, in which threads can be posted, should be selectable but the categories must still be shown so that the overall forum structure is still properly shown.</li> <li><code>supportExternalLinks(bool $supportExternalLinks): self</code> and <code>supportsExternalLinks(): bool</code> are used to set and check if external links will be shown in the selection list.   By default, external links are shown.   Like in the example given before, in cases where only actual boards, in which threads can be posted, are relevant, this option allows to exclude external links.</li> </ul>"},{"location":"php/api/form_builder/form_fields/#single-use-form-fields","title":"Single-Use Form Fields","text":"<p>The following form fields are specific for certain forms and hardly reusable in other contexts.</p>"},{"location":"php/api/form_builder/form_fields/#bbcodeattributesformfield","title":"<code>BBCodeAttributesFormField</code>","text":"<p><code>BBCodeAttributesFormField</code> is a form field for setting the attributes of a BBCode.</p>"},{"location":"php/api/form_builder/form_fields/#devtoolsprojectexcludedpackagesformfield","title":"<code>DevtoolsProjectExcludedPackagesFormField</code>","text":"<p><code>DevtoolsProjectExcludedPackagesFormField</code> is a form field for setting the excluded packages of a devtools project.</p>"},{"location":"php/api/form_builder/form_fields/#devtoolsprojectinstructionsformfield","title":"<code>DevtoolsProjectInstructionsFormField</code>","text":"<p><code>DevtoolsProjectInstructionsFormField</code> is a form field for setting the installation and update instructions of a devtools project.</p>"},{"location":"php/api/form_builder/form_fields/#devtoolsprojectoptionalpackagesformfield","title":"<code>DevtoolsProjectOptionalPackagesFormField</code>","text":"<p><code>DevtoolsProjectOptionalPackagesFormField</code> is a form field for setting the optional packages of a devtools project.</p>"},{"location":"php/api/form_builder/form_fields/#devtoolsprojectrequiredpackagesformfield","title":"<code>DevtoolsProjectRequiredPackagesFormField</code>","text":"<p><code>DevtoolsProjectRequiredPackagesFormField</code> is a form field for setting the required packages of a devtools project.</p>"},{"location":"php/api/form_builder/overview/","title":"Form Builder","text":"<p>WoltLab Suite includes a powerful way of creating forms: Form Builder. Form builder allows you to easily define all the fields and their constraints and interdependencies within PHP with full IDE support. It will then automatically generate the necessary HTML with full interactivity to render all the fields and also validate the fields\u2019 contents upon submission.</p> <p>The migration guide for WoltLab Suite Core 5.2 provides some examples of how to migrate existing forms to form builder that can also help in understanding form builder if the old way of creating forms is familiar.</p>"},{"location":"php/api/form_builder/overview/#form-builder-components","title":"Form Builder Components","text":"<p>Form builder consists of several components that are presented on the following pages:</p> <ol> <li>Structure of form builder</li> <li>Form validation and form data</li> <li>Form node dependencies</li> </ol> <p>In general, form builder provides default implementation of interfaces by providing either abstract classes or traits. It is expected that the interfaces are always implemented using these abstract classes and traits! This way, if new methods are added to the interfaces, default implementations can be provided by the abstract classes and traits without causing backwards compatibility problems.</p>"},{"location":"php/api/form_builder/overview/#abstractformbuilderform","title":"<code>AbstractFormBuilderForm</code>","text":"<p>To make using form builder easier, <code>AbstractFormBuilderForm</code> extends <code>AbstractForm</code> and provides most of the code needed to set up a form (of course without specific fields, those have to be added by the concrete form class), like reading and validating form values and using a database object action to use the form data to create or update a database object.</p> <p>In addition to the existing methods inherited by <code>AbstractForm</code>, <code>AbstractFormBuilderForm</code> provides the following methods:</p> <ul> <li> <p><code>buildForm()</code> builds the form in the following steps:</p> </li> <li> <p>Call <code>AbtractFormBuilderForm::createForm()</code> to create the <code>IFormDocument</code> object and add the form fields.</p> </li> <li>Call <code>IFormDocument::build()</code> to build the form.</li> <li>Call <code>AbtractFormBuilderForm::finalizeForm()</code> to finalize the form like adding dependencies.</li> </ul> <p>Additionally, between steps 1 and 2 and after step 3, the method provides two events, <code>createForm</code> and <code>buildForm</code> to allow plugins to register event listeners to execute additional code at the right point in time. - <code>createForm()</code> creates the <code>FormDocument</code> object and sets the form mode.   Classes extending <code>AbstractFormBuilderForm</code> have to override this method (and call <code>parent::createForm()</code> as the first line in the overridden method) to add concrete form containers and form fields to the bare form document. - <code>finalizeForm()</code> is called after the form has been built and the complete form hierarchy has been established.   This method should be overridden to add dependencies, for example. - <code>setFormAction()</code> is called at the end of <code>readData()</code> and sets the form document\u2019s action based on the controller class name and whether an object is currently edited. - If an object is edited, at the beginning of <code>readData()</code>, <code>setFormObjectData()</code> is called which calls <code>IFormDocument::loadValuesFromObject()</code>.   If values need to be loaded from additional sources, this method should be used for that.</p> <p><code>AbstractFormBuilderForm</code> also provides the following (public) properties:</p> <ul> <li><code>$form</code> contains the <code>IFormDocument</code> object created in <code>createForm()</code>.</li> <li><code>$formAction</code> is either <code>create</code> (default) or <code>edit</code> and handles which method of the database object is called by default (<code>create</code> is called for <code>$formAction = 'create'</code> and <code>update</code> is called for <code>$formAction = 'edit'</code>) and is used to set the value of the <code>action</code> template variable.</li> <li><code>$formObject</code> contains the <code>IStorableObject</code> if the form is used to edit an existing object.   For forms used to create objects, <code>$formObject</code> is always <code>null</code>.   Edit forms have to manually identify the edited object based on the request data and set the value of <code>$formObject</code>. </li> <li><code>$objectActionName</code> can be used to set an alternative action to be executed by the database object action that deviates from the default action determined by the value of <code>$formAction</code>.</li> <li><code>$objectActionClass</code> is the name of the database object action class that is used to create or update the database object.</li> </ul>"},{"location":"php/api/form_builder/overview/#dialogformdocument","title":"<code>DialogFormDocument</code>","text":"<p>Form builder forms can also be used in dialogs. For such forms, <code>DialogFormDocument</code> should be used which provides the additional methods <code>cancelable($cancelable = true)</code> and <code>isCancelable()</code> to set and check if the dialog can be canceled. If a dialog form can be canceled, a cancel button is added.</p> <p>If the dialog form is fetched via an AJAX request, <code>IFormDocument::ajax()</code> has to be called. AJAX forms are registered with <code>WoltLabSuite/Core/Form/Builder/Manager</code> which also supports getting all of the data of a form via the <code>getData(formId)</code> function. The <code>getData()</code> function relies on all form fields creating and registering a <code>WoltLabSuite/Core/Form/Builder/Field/Field</code> object that provides the data of a specific field.</p> <p>To make it as easy as possible to work with AJAX forms in dialogs, <code>WoltLabSuite/Core/Form/Builder/Dialog</code> (abbreviated as <code>FormBuilderDialog</code> from now on) should generally be used instead of <code>WoltLabSuite/Core/Form/Builder/Manager</code> directly.  The constructor of <code>FormBuilderDialog</code> expects the following parameters:</p> <ul> <li><code>dialogId</code>: id of the dialog element</li> <li><code>className</code>: PHP class used to get the form dialog (and save the data if <code>options.submitActionName</code> is set)</li> <li><code>actionName</code>: name of the action/method of <code>className</code> that returns the dialog; the method is expected to return an array with <code>formId</code> containg the id of the returned form and <code>dialog</code> containing the rendered form dialog</li> <li><code>options</code>: additional options:</li> <li><code>actionParameters</code> (default: empty): additional parameters sent during AJAX requests</li> <li><code>destroyOnClose</code> (default: <code>false</code>): if <code>true</code>, whenever the dialog is closed, the form is destroyed so that a new form is fetched if the dialog is opened again</li> <li><code>dialog</code>: additional dialog options used as <code>options</code> during dialog setup</li> <li><code>onSubmit</code>: callback when the form is submitted (takes precedence over <code>submitActionName</code>)</li> <li><code>submitActionName</code> (default: not set): name of the action/method of <code>className</code> called when the form is submitted</li> </ul> <p>The three public functions of <code>FormBuilderDialog</code> are:</p> <ul> <li><code>destroy()</code> destroys the dialog, the form, and all of the form fields.</li> <li><code>getData()</code> returns a Promise that returns the form data.</li> <li><code>open()</code> opens the dialog.</li> </ul> <p>Example:</p> <pre><code>require(['WoltLabSuite/Core/Form/Builder/Dialog'], function(FormBuilderDialog) {\nvar dialog = new FormBuilderDialog(\n'testDialog',\n'wcf\\\\data\\\\test\\\\TestAction',\n'getDialog',\n{\ndestroyOnClose: true,\ndialog: {\ntitle: 'Test Dialog'\n},\nsubmitActionName: 'saveDialog'\n}\n);\n\nelById('testDialogButton').addEventListener('click', function() {\ndialog.open();\n});\n});\n</code></pre>"},{"location":"php/api/form_builder/structure/","title":"Structure of Form Builder","text":"<p>Forms built with form builder consist of three major structural elements listed from top to bottom:</p> <ol> <li>form document,</li> <li>form container,</li> <li>form field.</li> </ol> <p>The basis for all three elements are form nodes.</p> <p>The form builder API uses fluent interfaces heavily, meaning that unless a method is a getter, it generally returns the objects itself to support method chaining.</p>"},{"location":"php/api/form_builder/structure/#form-nodes","title":"Form Nodes","text":"<ul> <li><code>IFormNode</code> is the base interface that any node of a form has to implement.</li> <li><code>IFormChildNode</code> extends <code>IFormNode</code> for such elements of a form that can be a child node to a parent node.</li> <li><code>IFormParentNode</code> extends <code>IFormNode</code> for such elements of a form that can be a parent to child nodes.</li> <li><code>IFormElement</code> extends <code>IFormNode</code> for such elements of a form that can have a description and a label.</li> </ul>"},{"location":"php/api/form_builder/structure/#iformnode","title":"<code>IFormNode</code>","text":"<p><code>IFormNode</code> is the base interface that any node of a form has to implement and it requires the following methods:</p> <ul> <li><code>addClass($class)</code>, <code>addClasses(array $classes)</code>, <code>removeClass($class)</code>, <code>getClasses()</code>, and <code>hasClass($class)</code> add, remove, get, and check for CSS classes of the HTML element representing the form node.   If the form node consists of multiple (nested) HTML elements, the classes are generally added to the top element.   <code>static validateClass($class)</code> is used to check if a given CSS class is valid.   By default, a form node has no CSS classes.</li> <li><code>addDependency(IFormFieldDependency $dependency)</code>, <code>removeDependency($dependencyId)</code>, <code>getDependencies()</code>, and <code>hasDependency($dependencyId)</code> add, remove, get, and check for dependencies of this form node on other form fields.   <code>checkDependencies()</code> checks if all of the node\u2019s dependencies are met and returns a boolean value reflecting the check\u2019s result.   The form builder dependency documentation provides more detailed information about dependencies and how they work.   By default, a form node has no dependencies.</li> <li><code>attribute($name, $value = null)</code>, <code>removeAttribute($name)</code>, <code>getAttribute($name)</code>, <code>getAttributes()</code>, <code>hasAttribute($name)</code> add, remove, get, and check for attributes of the HTML element represting the form node.   The attributes are added to the same element that the CSS classes are added to.   <code>static validateAttribute($name)</code> is used to check if a given attribute is valid.   By default, a form node has no attributes.</li> <li><code>available($available = true)</code> and <code>isAvailable()</code> can be used to set and check if the node is available.   The availability functionality can be used to easily toggle form nodes based, for example, on options without having to create a condition to append the relevant.   This way of checking availability makes it easier to set up forms.    By default, every form node is available.</li> </ul> <p>The following aspects are important when working with availability:</p> <ul> <li>Unavailable fields produce no output, their value is not read, they are not validated and they are not checked for save values.</li> <li>Form fields are also able to mark themselves as unavailable, for example, a selection field without any options.</li> <li>Form containers are automatically unavailable if they contain no available children.</li> </ul> <p>Availability sets the static availability for form nodes that does not change during the lifetime of a form.   In contrast, dependencies represent a dynamic availability for form nodes that depends on the current value of certain form fields. - <code>cleanup()</code> is called after the whole form is not used anymore to reset other APIs if the form fields depends on them and they expect such a reset.   This method is not intended to clean up the form field\u2019s value as a new form document object is created to show a clean form. - <code>getDocument()</code> returns the <code>IFormDocument</code> object the node belongs to.   (As <code>IFormDocument</code> extends <code>IFormNode</code>, form document objects simply return themselves.) - <code>getHtml()</code> returns the HTML representation of the node.   <code>getHtmlVariables()</code> return template variables (in addition to the form node itself) to render the node\u2019s HTML representation. - <code>id($id)</code> and <code>getId()</code> set and get the id of the form node.   Every id has to be unique within a form.   <code>getPrefixedId()</code> returns the prefixed version of the node\u2019s id (see <code>IFormDocument::getPrefix()</code> and <code>IFormDocument::prefix()</code>).   <code>static validateId($id)</code> is used to check if a given id is valid. - <code>populate()</code> is called by <code>IFormDocument::build()</code> after all form nodes have been added.   This method should finilize the initialization of the form node after all parent-child relations of the form document have been established.   This method is needed because during the construction of a form node, it neither knows the form document it will belong to nor does it know its parent. - <code>validate()</code> checks, after the form is submitted, if the form node is valid.   A form node with children is valid if all of its child nodes are valid.   A form field is valid if its value is valid. - <code>static create($id)</code> is the factory method that has to be used to create new form nodes with the given id.</p> <p><code>TFormNode</code> provides a default implementation of most of these methods.</p>"},{"location":"php/api/form_builder/structure/#iformchildnode","title":"<code>IFormChildNode</code>","text":"<p><code>IFormChildNode</code> extends <code>IFormNode</code> for such elements of a form that can be a child node to a parent node and it requires the <code>parent(IFormParentNode $parentNode)</code> and <code>getParent()</code> methods used to set and get the node\u2019s parent node. <code>TFormChildNode</code> provides a default implementation of these two methods and also of <code>IFormNode::getDocument()</code>.</p>"},{"location":"php/api/form_builder/structure/#iformparentnode","title":"<code>IFormParentNode</code>","text":"<p><code>IFormParentNode</code> extends <code>IFormNode</code> for such elements of a form that can be a parent to child nodes. Additionally, the interface also extends <code>\\Countable</code> and <code>\\RecursiveIterator</code>. The interface requires the following methods:</p> <ul> <li><code>appendChild(IFormChildNode $child)</code>, <code>appendChildren(array $children)</code>, <code>insertAfter(IFormChildNode $child, $referenceNodeId)</code>, and <code>insertBefore(IFormChildNode $child, $referenceNodeId)</code> are used to insert new children either at the end or at specific positions.   <code>validateChild(IFormChildNode $child)</code> is used to check if a given child node can be added.   A child node cannot be added if it would cause an id to be used twice.</li> <li><code>children()</code> returns the direct children of a form node.</li> <li><code>getIterator()</code> return  a recursive iterator for a form node.</li> <li><code>getNodeById($nodeId)</code> returns the node with the given id by searching for it in the node\u2019s children and recursively in all of their children.   <code>contains($nodeId)</code> can be used to simply check if a node with the given id exists.</li> <li><code>hasValidationErrors()</code> checks if a form node or any of its children has a validation error (see <code>IFormField::getValidationErrors()</code>).</li> <li><code>readValues()</code> recursively calls <code>IFormParentNode::readValues()</code> and <code>IFormField::readValue()</code> on its children.</li> </ul>"},{"location":"php/api/form_builder/structure/#iformelement","title":"<code>IFormElement</code>","text":"<p><code>IFormElement</code> extends <code>IFormNode</code> for such elements of a form that can have a description and a label and it requires the following methods:</p> <ul> <li><code>label($languageItem = null, array $variables = [])</code> and <code>getLabel()</code> can be used to set and get the label of the form element.   <code>requiresLabel()</code> can be checked if the form element requires a label.   A label-less form element that requires a label will prevent the form from being rendered by throwing an exception.</li> <li><code>description($languageItem = null, array $variables = [])</code> and <code>getDescription()</code> can be used to set and get the description of the form element.</li> </ul>"},{"location":"php/api/form_builder/structure/#iobjecttypeformnode","title":"<code>IObjectTypeFormNode</code>","text":"<p><code>IObjectTypeFormField</code> has to be implemented by form nodes that rely on a object type of a specific object type definition in order to function. The implementing class has to implement the methods <code>objectType($objectType)</code>, <code>getObjectType()</code>, and <code>getObjectTypeDefinition()</code>. <code>TObjectTypeFormNode</code> provides a default implementation of these three methods.</p>"},{"location":"php/api/form_builder/structure/#customformnode","title":"<code>CustomFormNode</code>","text":"<p><code>CustomFormNode</code> is a form node whose contents can be set directly via <code>content($content)</code>.</p> <p>This class should generally not be relied on. Instead, <code>TemplateFormNode</code> should be used.</p>"},{"location":"php/api/form_builder/structure/#templateformnode","title":"<code>TemplateFormNode</code>","text":"<p><code>TemplateFormNode</code> is a form node whose contents are read from a template. <code>TemplateFormNode</code> has the following additional methods:</p> <ul> <li><code>application($application)</code> and <code>getApplicaton()</code> can be used to set and get the abbreviation of the application the shown template belongs to.   If no template has been set explicitly, <code>getApplicaton()</code> returns <code>wcf</code>.</li> <li><code>templateName($templateName)</code> and <code>getTemplateName()</code> can be used to set and get the name of the template containing the node contents.   If no template has been set and the node is rendered, an exception will be thrown.</li> <li><code>variables(array $variables)</code> and <code>getVariables()</code> can be used to set and get additional variables passed to the template.</li> </ul>"},{"location":"php/api/form_builder/structure/#form-document","title":"Form Document","text":"<p>A form document object represents the form as a whole and has to implement the <code>IFormDocument</code> interface. WoltLab Suite provides a default implementation with the <code>FormDocument</code> class. <code>IFormDocument</code> should not be implemented directly but instead <code>FormDocument</code> should be extended to avoid issues if the <code>IFormDocument</code> interface changes in the future.</p> <p><code>IFormDocument</code> extends <code>IFormParentNode</code> and requires the following additional methods:</p> <ul> <li><code>action($action)</code> and <code>getAction()</code> can be used set and get the <code>action</code> attribute of the <code>&lt;form&gt;</code> HTML element.</li> <li><code>addButton(IFormButton $button)</code> and <code>getButtons()</code> can be used add and get form buttons that are shown at the bottom of the form.    <code>addDefaultButton($addDefaultButton)</code> and <code>hasDefaultButton()</code> can be used to set and check if the form has the default button which is added by default unless specified otherwise.   Each implementing class may define its own default button.   <code>FormDocument</code> has a button with id <code>submitButton</code>, label <code>wcf.global.button.submit</code>, access key <code>s</code>, and CSS class <code>buttonPrimary</code> as its default button. </li> <li><code>ajax($ajax)</code> and <code>isAjax()</code> can be used to set and check if the form document is requested via an AJAX request or processes data via an AJAX request.   These methods are helpful for form fields that behave differently when providing data via AJAX.</li> <li><code>build()</code> has to be called once after all nodes have been added to this document to trigger <code>IFormNode::populate()</code>.</li> <li> <p><code>formMode($formMode)</code> and <code>getFormMode()</code> sets the form mode.   Possible form modes are:</p> </li> <li> <p><code>IFormDocument::FORM_MODE_CREATE</code> has to be used when the form is used to create a new object.</p> </li> <li><code>IFormDocument::FORM_MODE_UPDATE</code> has to be used when the form is used to edit an existing object.</li> <li><code>getData()</code> returns the array containing the form data and which is passed as the <code>$parameters</code> argument of the constructor of a database object action object.</li> <li><code>getDataHandler()</code> returns the data handler for this document that is used to process the field data into a parameters array for the constructor of a database object action object.</li> <li><code>getEnctype()</code> returns the encoding type of the form.   If the form contains a <code>IFileFormField</code>, <code>multipart/form-data</code> is returned, otherwise <code>null</code> is returned.</li> <li><code>loadValues(array $data, IStorableObject $object)</code> is used when editing an existing object to set the form field values by calling <code>IFormField::loadValue()</code> for all form fields.   Additionally, the form mode is set to <code>IFormDocument::FORM_MODE_UPDATE</code>.</li> <li>5.4+ <code>markRequiredFields(bool $markRequiredFields = true): self</code> and <code>marksRequiredFields(): bool</code> can be used to set and check whether fields that are required are marked (with an asterisk in the label) in the output.</li> <li><code>method($method)</code> and <code>getMethod()</code> can be used to set and get the <code>method</code> attribute of the <code>&lt;form&gt;</code> HTML element.   By default, the method is <code>post</code>.</li> <li><code>prefix($prefix)</code> and <code>getPrefix()</code> can be used to set and get a global form prefix that is prepended to form elements\u2019 names and ids to avoid conflicts with other forms.   By default, the prefix is an empty string.   If a prefix of <code>foo</code> is set, <code>getPrefix()</code> returns <code>foo_</code> (additional trailing underscore).</li> <li><code>requestData(array $requestData)</code>, <code>getRequestData($index = null)</code>, and <code>hasRequestData($index = null)</code> can be used to set, get and check for specific request data.   In most cases, the relevant request data is the <code>$_POST</code> array.   In default AJAX requests handled by database object actions, however, the request data generally is in <code>AbstractDatabaseObjectAction::$parameters</code>.   By default, <code>$_POST</code> is the request data.</li> </ul> <p>The last aspect is relevant for <code>DialogFormDocument</code> objects. <code>DialogFormDocument</code> is a specialized class for forms in dialogs that, in contrast to <code>FormDocument</code> do not require an <code>action</code> to be set. Additionally, <code>DialogFormDocument</code> provides the <code>cancelable($cancelable = true)</code> and <code>isCancelable()</code> methods used to determine if the dialog from can be canceled. By default, dialog forms are cancelable.</p>"},{"location":"php/api/form_builder/structure/#form-button","title":"Form Button","text":"<p>A form button object represents a button shown at the end of the form that, for example, submits the form. Every form button has to implement the <code>IFormButton</code> interface that extends <code>IFormChildNode</code> and <code>IFormElement</code>. <code>IFormButton</code> requires four methods to be implemented:</p> <ul> <li><code>accessKey($accessKey)</code> and <code>getAccessKey()</code> can be used to set and get the access key with which the form button can be activated.   By default, form buttons have no access key set.</li> <li><code>submit($submitButton)</code> and <code>isSubmit()</code> can be used to set and check if the form button is a submit button.   A submit button is an <code>input[type=submit]</code> element.   Otherwise, the button is a <code>button</code> element. </li> </ul>"},{"location":"php/api/form_builder/structure/#form-container","title":"Form Container","text":"<p>A form container object represents a container for other form containers or form field directly. Every form container has to implement the <code>IFormContainer</code> interface which requires the following method:</p> <ul> <li><code>loadValues(array $data, IStorableObject $object)</code> is called by <code>IFormDocument::loadValuesFromObject()</code> to inform the container that object data is loaded.   This method is not intended to generally call <code>IFormField::loadValues()</code> on its form field children as these methods are already called by <code>IFormDocument::loadValuesFromObject()</code>.   This method is intended for specialized form containers with more complex logic.</li> </ul> <p>There are multiple default container implementations:</p> <ol> <li><code>FormContainer</code> is the default implementation of <code>IFormContainer</code>.</li> <li><code>TabMenuFormContainer</code> represents the container of tab menu, while</li> <li><code>TabFormContainer</code> represents a tab of a tab menu and</li> <li><code>TabTabMenuFormContainer</code> represents a tab of a tab menu that itself contains a tab menu.</li> <li>The children of <code>RowFormContainer</code> are shown in a row and should use <code>col-*</code> classes.</li> <li>The children of <code>RowFormFieldContainer</code> are also shown in a row but does not show the labels and descriptions of the individual form fields.    Instead of the individual labels and descriptions, the container's label and description is shown and both span all of fields.</li> <li><code>SuffixFormFieldContainer</code> can be used for one form field with a second selection form field used as a suffix.</li> </ol> <p>The methods of the interfaces that <code>FormContainer</code> is implementing are well documented, but here is a short overview of the most important methods when setting up a form or extending a form with an event listener:</p> <ul> <li><code>appendChild(IFormChildNode $child)</code>, <code>appendChildren(array $children)</code>, and <code>insertBefore(IFormChildNode $child, $referenceNodeId)</code> are used to insert new children into the form container.</li> <li><code>description($languageItem = null, array $variables = [])</code> and <code>label($languageItem = null, array $variables = [])</code> are used to set the description and the label or title of the form container.</li> </ul>"},{"location":"php/api/form_builder/structure/#form-field","title":"Form Field","text":"<p>A form field object represents a concrete form field that allows entering data. Every form field has to implement the <code>IFormField</code> interface which extends <code>IFormChildNode</code> and <code>IFormElement</code>.</p> <p><code>IFormField</code> requires the following additional methods:</p> <ul> <li><code>addValidationError(IFormFieldValidationError $error)</code> and <code>getValidationErrors()</code> can be used to get and set validation errors of the form field (see form validation).</li> <li><code>addValidator(IFormFieldValidator $validator)</code>, <code>getValidators()</code>, <code>removeValidator($validatorId)</code>, and <code>hasValidator($validatorId)</code> can be used to get, set, remove, and check for validators for the form field (see form validation).</li> <li><code>getFieldHtml()</code> returns the field's HTML output without the surrounding <code>dl</code> structure.</li> <li><code>objectProperty($objectProperty)</code> and <code>getObjectProperty()</code> can be used to get and set the object property that the field represents.   When setting the object property is set to an empty string, the previously set object property is unset.   If no object property has been set, the field\u2019s (non-prefixed) id is returned.</li> </ul> <p>The object property allows having different fields (requiring different ids) that represent the same object property which is handy when available options of the field\u2019s value depend on another field.   Having object property allows to define different fields for each value of the other field and to use form field dependencies to only show the appropriate field. - <code>readValue()</code> reads the form field value from the request data after the form is submitted. - <code>required($required = true)</code> and <code>isRequired()</code> can be used to determine if the form field has to be filled out.   By default, form fields do not have to be filled out. - <code>value($value)</code> and <code>getSaveValue()</code> can be used to get and set the value of the form field to be used outside of the context of forms.   <code>getValue()</code>, in contrast, returns the internal representation of the form field\u2019s value.   In general, the internal representation is only relevant when validating the value in additional validators.   <code>loadValue(array $data, IStorableObject $object)</code> extracts the form field value from the given data array (and additional, non-editable data from the object if the field needs them).</p> <p><code>AbstractFormField</code> provides default implementations of many of the listed methods above and should be extended instead of implementing <code>IFormField</code> directly.</p> <p>An overview of the form fields provided by default can be found here.</p>"},{"location":"php/api/form_builder/structure/#form-field-interfaces-and-traits","title":"Form Field Interfaces and Traits","text":"<p>WoltLab Suite Core provides a variety of interfaces and matching traits with default implementations for several common features of form fields:</p>"},{"location":"php/api/form_builder/structure/#iattributeformfield","title":"<code>IAttributeFormField</code>","text":"<p>Only available since version 5.4.</p> <p><code>IAttributeFormField</code> has to be implemented by form fields for which attributes can be added to the actual form element (in addition to adding attributes to the surrounding element via the attribute-related methods of <code>IFormNode</code>). The implementing class has to implement the methods <code>fieldAttribute(string $name, string $value = null): self</code> and <code>getFieldAttribute(string $name): self</code>/<code>getFieldAttributes(): array</code>, which are used to add and get the attributes, respectively. Additionally, <code>hasFieldAttribute(string $name): bool</code> has to implemented to check if a certain attribute is present, <code>removeFieldAttribute(string $name): self</code> to remove an attribute, and <code>static validateFieldAttribute(string $name)</code> to check if the attribute is valid for this specific class. <code>TAttributeFormField</code> provides a default implementation of these methods and <code>TInputAttributeFormField</code> specializes the trait for <code>input</code>-based form fields. These two traits also ensure that if a specific interface that handles a specific attribute is implemented, like <code>IAutoCompleteFormField</code> handling <code>autocomplete</code>, this attribute cannot be set with this API. Instead, the dedicated API provided by the relevant interface has to be used.</p>"},{"location":"php/api/form_builder/structure/#iautocompleteformfield","title":"<code>IAutoCompleteFormField</code>","text":"<p>Only available since version 5.4.</p> <p><code>IAutoCompleteFormField</code> has to be implemented by form fields that support the <code>autocomplete</code> attribute. The implementing class has to implement the methods <code>autoComplete(?string $autoComplete): self</code> and <code>getAutoComplete(): ?string</code>, which are used to set and get the autocomplete value, respectively. <code>TAutoCompleteFormField</code> provides a default implementation of these two methods and <code>TTextAutoCompleteFormField</code> specializes the trait for text form fields. When using <code>TAutoCompleteFormField</code>, you have to implement the <code>getValidAutoCompleteTokens(): array</code> method which returns all valid <code>autocomplete</code> tokens.</p>"},{"location":"php/api/form_builder/structure/#iautofocusformfield","title":"<code>IAutoFocusFormField</code>","text":"<p><code>IAutoFocusFormField</code> has to be implemented by form fields that can be auto-focused. The implementing class has to implement the methods <code>autoFocus($autoFocus = true)</code> and <code>isAutoFocused()</code>. By default, form fields are not auto-focused. <code>TAutoFocusFormField</code> provides a default implementation of these two methods.</p>"},{"location":"php/api/form_builder/structure/#icssclassformfield","title":"<code>ICssClassFormField</code>","text":"<p>Only available since version 5.4.</p> <p><code>ICssClassFormField</code> has to be implemented by form fields for which CSS classes can be added to the actual form element (in addition to adding CSS classes to the surrounding element via the class-related methods of <code>IFormNode</code>). The implementing class has to implement the methods <code>addFieldClass(string $class): self</code>/<code>addFieldClasses(array $classes): self</code> and <code>getFieldClasses(): array</code>, which are used to add and get the CSS classes, respectively. Additionally, <code>hasFieldClass(string $class): bool</code> has to implemented to check if a certain CSS class is present and <code>removeFieldClass(string $class): self</code> to remove a CSS class. <code>TCssClassFormField</code> provides a default implementation of these methods.</p>"},{"location":"php/api/form_builder/structure/#ifileformfield","title":"<code>IFileFormField</code>","text":"<p><code>IFileFormField</code> has to be implemented by every form field that uploads files so that the <code>enctype</code> attribute of the form document is <code>multipart/form-data</code> (see <code>IFormDocument::getEnctype()</code>).</p>"},{"location":"php/api/form_builder/structure/#ifilterableselectionformfield","title":"<code>IFilterableSelectionFormField</code>","text":"<p><code>IFilterableSelectionFormField</code> extends <code>ISelectionFormField</code> by the possibilty for users when selecting the value(s) to filter the list of available options. The implementing class has to implement the methods <code>filterable($filterable = true)</code> and <code>isFilterable()</code>. <code>TFilterableSelectionFormField</code> provides a default implementation of these two methods.</p>"},{"location":"php/api/form_builder/structure/#ii18nformfield","title":"<code>II18nFormField</code>","text":"<p><code>II18nFormField</code> has to be implemented by form fields if the form field value can be entered separately for all available languages. The implementing class has to implement the following methods:</p> <ul> <li><code>i18n($i18n = true)</code> and <code>isI18n()</code> can be used to set whether a specific instance of the class actually supports multilingual input.</li> <li><code>i18nRequired($i18nRequired = true)</code> and <code>isI18nRequired()</code> can be used to set whether a specific instance of the class requires separate values for all languages.</li> <li><code>languageItemPattern($pattern)</code> and <code>getLanguageItemPattern()</code> can be used to set the pattern/regular expression for the language item used to save the multilingual values.</li> <li><code>hasI18nValues()</code> and <code>hasPlainValue()</code> check if the current value is a multilingual or monolingual value.</li> </ul> <p><code>TI18nFormField</code> provides a default implementation of these eight methods and additional default implementations of some of the <code>IFormField</code> methods. If multilingual input is enabled for a specific form field, classes using <code>TI18nFormField</code> register a custom form field data processor to add the array with multilingual input into the <code>$parameters</code> array directly using <code>{$objectProperty}_i18n</code> as the array key. If multilingual input is enabled but only a monolingual value is entered, the custom form field data processor does nothing and the form field\u2019s value is added by the <code>DefaultFormDataProcessor</code> into the <code>data</code> sub-array of the <code>$parameters</code> array.</p> <p><code>TI18nFormField</code> already provides a default implementation of <code>IFormField::validate()</code>.</p>"},{"location":"php/api/form_builder/structure/#iimmutableformfield","title":"<code>IImmutableFormField</code>","text":"<p><code>IImmutableFormField</code> has to be implemented by form fields that support being displayed but whose value cannot be changed. The implementing class has to implement the methods <code>immutable($immutable = true)</code> and <code>isImmutable()</code> that can be used to determine if the value of the form field is mutable or immutable. By default, form field are mutable.</p>"},{"location":"php/api/form_builder/structure/#iinputmodeformfield","title":"<code>IInputModeFormField</code>","text":"<p>Only available since version 5.4.</p> <p><code>IInputModeFormField</code> has to be implemented by form fields that support the <code>inputmode</code> attribute. The implementing class has to implement the methods <code>inputMode(?string $inputMode): self</code> and <code>getInputMode(): ?string</code>, which are used to set and get the input mode, respectively. <code>TInputModeFormField</code> provides a default implementation of these two methods.</p>"},{"location":"php/api/form_builder/structure/#imaximumformfield","title":"<code>IMaximumFormField</code>","text":"<p><code>IMaximumFormField</code> has to be implemented by form fields if the entered value must have a maximum value. The implementing class has to implement the methods <code>maximum($maximum = null)</code> and <code>getMaximum()</code>. A maximum of <code>null</code> signals that no maximum value has been set. <code>TMaximumFormField</code> provides a default implementation of these two methods.</p> <p>The implementing class has to validate the entered value against the maximum value manually.</p>"},{"location":"php/api/form_builder/structure/#imaximumlengthformfield","title":"<code>IMaximumLengthFormField</code>","text":"<p><code>IMaximumLengthFormField</code> has to be implemented by form fields if the entered value must have a maximum length. The implementing class has to implement the methods <code>maximumLength($maximumLength = null)</code>, <code>getMaximumLength()</code>, and <code>validateMaximumLength($text, Language $language = null)</code>. A maximum length of <code>null</code> signals that no maximum length has been set. <code>TMaximumLengthFormField</code> provides a default implementation of these two methods.</p> <p>The implementing class has to validate the entered value against the maximum value manually by calling <code>validateMaximumLength()</code>.</p>"},{"location":"php/api/form_builder/structure/#iminimumformfield","title":"<code>IMinimumFormField</code>","text":"<p><code>IMinimumFormField</code> has to be implemented by form fields if the entered value must have a minimum value. The implementing class has to implement the methods <code>minimum($minimum = null)</code> and <code>getMinimum()</code>. A minimum of <code>null</code> signals that no minimum value has been set. <code>TMinimumFormField</code> provides a default implementation of these three methods.</p> <p>The implementing class has to validate the entered value against the minimum value manually.</p>"},{"location":"php/api/form_builder/structure/#iminimumlengthformfield","title":"<code>IMinimumLengthFormField</code>","text":"<p><code>IMinimumLengthFormField</code> has to be implemented by form fields if the entered value must have a minimum length. The implementing class has to implement the methods <code>minimumLength($minimumLength = null)</code>, <code>getMinimumLength()</code>, and <code>validateMinimumLength($text, Language $language = null)</code>. A minimum length of <code>null</code> signals that no minimum length has been set. <code>TMinimumLengthFormField</code> provides a default implementation of these three methods.</p> <p>The implementing class has to validate the entered value against the minimum value manually by calling <code>validateMinimumLength()</code>.</p>"},{"location":"php/api/form_builder/structure/#imultipleformfield","title":"<code>IMultipleFormField</code>","text":"<p><code>IMinimumLengthFormField</code> has to be implemented by form fields that support selecting or setting multiple values. The implementing class has to implement the following methods:</p> <ul> <li><code>multiple($multiple = true)</code> and <code>allowsMultiple()</code> can be used to set whether a specific instance of the class actually should support multiple values.   By default, multiple values are not supported.</li> <li><code>minimumMultiples($minimum)</code> and <code>getMinimumMultiples()</code> can be used to set the minimum number of values that have to be selected/entered.   By default, there is no required minimum number of values.</li> <li><code>maximumMultiples($minimum)</code> and <code>getMaximumMultiples()</code> can be used to set the maximum number of values that have to be selected/entered.   By default, there is no maximum number of values.   <code>IMultipleFormField::NO_MAXIMUM_MULTIPLES</code> is returned if no maximum number of values has been set and it can also be used to unset a previously set maximum number of values.</li> </ul> <p><code>TMultipleFormField</code> provides a default implementation of these six methods and classes using <code>TMultipleFormField</code> register a custom form field data processor to add the <code>HtmlInputProcessor</code> object with the text into the <code>$parameters</code> array directly using <code>{$objectProperty}_htmlInputProcessor</code> as the array key.</p> <p>The implementing class has to validate the values against the minimum and maximum number of values manually.</p>"},{"location":"php/api/form_builder/structure/#inullableformfield","title":"<code>INullableFormField</code>","text":"<p><code>INullableFormField</code> has to be implemented by form fields that support <code>null</code> as their (empty) value. The implementing class has to implement the methods <code>nullable($nullable = true)</code> and <code>isNullable()</code>. <code>TNullableFormField</code> provides a default implementation of these two methods.</p> <p><code>null</code> should be returned by <code>IFormField::getSaveValue()</code> is the field is considered empty and the form field has been set as nullable.</p>"},{"location":"php/api/form_builder/structure/#ipackagesformfield","title":"<code>IPackagesFormField</code>","text":"<p><code>IPackagesFormField</code> has to be implemented by form fields that, in some way, considers packages whose ids may be passed to the field object. The implementing class has to implement the methods <code>packageIDs(array $packageIDs)</code> and <code>getPackageIDs()</code>. <code>TPackagesFormField</code> provides a default implementation of these two methods.</p>"},{"location":"php/api/form_builder/structure/#ipatternformfield","title":"<code>IPatternFormField</code>","text":"<p>Only available since version 5.4.</p> <p><code>IPatternFormField</code> has to be implemented by form fields that support the <code>pattern</code> attribute. The implementing class has to implement the methods <code>pattern(?string $pattern): self</code> and <code>getPattern(): ?string</code>, which are used to set and get the pattern, respectively. <code>TPatternFormField</code> provides a default implementation of these two methods.</p>"},{"location":"php/api/form_builder/structure/#iplaceholderformfield","title":"<code>IPlaceholderFormField</code>","text":"<p><code>IPlaceholderFormField</code> has to be implemented by form fields that support a placeholder value for empty fields. The implementing class has to implement the methods <code>placeholder($languageItem = null, array $variables = [])</code> and <code>getPlaceholder()</code>. <code>TPlaceholderFormField</code> provides a default implementation of these two methods.</p>"},{"location":"php/api/form_builder/structure/#iselectionformfield","title":"<code>ISelectionFormField</code>","text":"<p><code>ISelectionFormField</code> has to be implemented by form fields with a predefined set of possible values. The implementing class has to implement the getter and setter methods <code>options($options, $nestedOptions = false, $labelLanguageItems = true)</code> and <code>getOptions()</code> and additionally two methods related to nesting, i.e. whether the selectable options have a hierarchy: <code>supportsNestedOptions()</code> and <code>getNestedOptions()</code>. <code>TSelectionFormField</code> provides a default implementation of these four methods.</p>"},{"location":"php/api/form_builder/structure/#isuffixedformfield","title":"<code>ISuffixedFormField</code>","text":"<p><code>ISuffixedFormField</code> has to be implemented by form fields that support supports displaying a suffix behind the actual input field. The implementing class has to implement the methods <code>suffix($languageItem = null, array $variables = [])</code> and <code>getSuffix()</code>. <code>TSuffixedFormField</code> provides a default implementation of these two methods.</p>"},{"location":"php/api/form_builder/structure/#tdefaultidformfield","title":"<code>TDefaultIdFormField</code>","text":"<p>Form fields that have a default id have to use <code>TDefaultIdFormField</code> and have to implement the method <code>getDefaultId()</code>.</p>"},{"location":"php/api/form_builder/structure/#displaying-forms","title":"Displaying Forms","text":"<p>The only thing to do in a template to display the whole form including all of the necessary JavaScript is to put</p> <pre><code>{@$form-&gt;getHtml()}\n</code></pre> <p>into the template file at the relevant position.</p>"},{"location":"php/api/form_builder/validation_data/","title":"Form Validation and Form Data","text":""},{"location":"php/api/form_builder/validation_data/#form-validation","title":"Form Validation","text":"<p>Every form field class has to implement <code>IFormField::validate()</code> according to their internal logic of what constitutes a valid value. If a certain constraint for the value is not met, a form field validation error object is added to the form field. Form field validation error classes have to implement the interface <code>IFormFieldValidationError</code>.</p> <p>In addition to intrinsic validations like checking the length of the value of a text form field, in many cases, there are additional constraints specific to the form like ensuring that the text is not already used by a different object of the same database object class. Such additional validations can be added to (and removed from) the form field via implementations of the <code>IFormFieldValidator</code> interface.</p>"},{"location":"php/api/form_builder/validation_data/#iformfieldvalidationerror-formfieldvalidationerror","title":"<code>IFormFieldValidationError</code> / <code>FormFieldValidationError</code>","text":"<p><code>IFormFieldValidationError</code> requires the following methods:</p> <ul> <li><code>__construct($type, $languageItem = null, array $information = [])</code> creates a new validation error object for an error with the given type and message stored in the given language items.   The information array is used when generating the error message.</li> <li><code>getHtml()</code> returns the HTML element representing the error that is shown to the user.</li> <li><code>getMessage()</code> returns the error message based on the language item and information array given in the constructor.</li> <li><code>getInformation()</code> and <code>getType()</code> are getters for the first and third parameter of the constructor.</li> </ul> <p><code>FormFieldValidationError</code> is a default implementation of the interface that shows the error in an <code>small.innerError</code> HTML element below the form field.</p> <p>Form field validation errors are added to form fields via the <code>IFormField::addValidationError(IFormFieldValidationError $error)</code> method.</p>"},{"location":"php/api/form_builder/validation_data/#iformfieldvalidator-formfieldvalidator","title":"<code>IFormFieldValidator</code> / <code>FormFieldValidator</code>","text":"<p><code>IFormFieldValidator</code> requires the following methods:</p> <ul> <li><code>__construct($id, callable $validator)</code> creates a new validator with the given id that passes the validated form field to the given callable that does the actual validation.   <code>static validateId($id)</code> is used to check if the given id is valid.</li> <li><code>__invoke(IFormField $field)</code> is used when the form field is validated to execute the validator.</li> <li><code>getId()</code> returns the id of the validator.</li> </ul> <p><code>FormFieldValidator</code> is a default implementation of the interface.</p> <p>Form field validators are added to form fields via the <code>addValidator(IFormFieldValidator $validator)</code> method.</p>"},{"location":"php/api/form_builder/validation_data/#form-data","title":"Form Data","text":"<p>After a form is successfully validated, the data of the form fields (returned by <code>IFormDocument::getData()</code>) have to be extracted which is the job of the <code>IFormDataHandler</code> object returned by <code>IFormDocument::getDataHandler()</code>. Form data handlers themselves, however, are only iterating through all <code>IFormDataProcessor</code> instances that have been registered with the data handler.</p>"},{"location":"php/api/form_builder/validation_data/#iformdatahandler-formdatahandler","title":"<code>IFormDataHandler</code> / <code>FormDataHandler</code>","text":"<p><code>IFormDataHandler</code> requires the following methods:</p> <ul> <li><code>addProcessor(IFormDataProcessor $processor)</code> adds a new data processor to the data handler.</li> <li><code>getFormData(IFormDocument $document)</code> returns the data of the given form by applying all registered data handlers on the form.</li> <li><code>getObjectData(IFormDocument $document, IStorableObject $object)</code> returns the data of the given object which will be used to populate the form field values of the given form.</li> </ul> <p><code>FormDataHandler</code> is the default implementation of this interface and should also be extended instead of implementing the interface directly.</p>"},{"location":"php/api/form_builder/validation_data/#iformdataprocessor-defaultformdataprocessor","title":"<code>IFormDataProcessor</code> / <code>DefaultFormDataProcessor</code>","text":"<p><code>IFormDataProcessor</code> requires the following methods:</p> <ul> <li><code>processFormData(IFormDocument $document, array $parameters)</code> is called by <code>IFormDataHandler::getFormData()</code>.   The method processes the given parameters array and returns the processed version.</li> <li><code>processObjectData(IFormDocument $document, array $data, IStorableObject $object)</code> is called by <code>IFormDataHandler::getObjectData()</code>.   The method processes the given object data array and returns the processed version.</li> </ul> <p>When <code>FormDocument</code> creates its <code>FormDataHandler</code> instance, it automatically registers an <code>DefaultFormDataProcessor</code> object as the first data processor. <code>DefaultFormDataProcessor</code> puts the save value of all form fields that are available and have a save value into <code>$parameters['data']</code> using the form field\u2019s object property as the array key.</p> <p><code>IFormDataProcessor</code> should not be implemented directly. Instead, <code>AbstractFormDataProcessor</code> should be extended.</p> <p>All form data is put into the <code>data</code> sub-array so that the whole <code>$parameters</code> array can be passed to a database object action object that requires the actual database object data to be in the <code>data</code> sub-array.</p> <p>When adding a data processor to a form, make sure to add the data processor after the form has been built.</p>"},{"location":"php/api/form_builder/validation_data/#additional-data-processors","title":"Additional Data Processors","text":""},{"location":"php/api/form_builder/validation_data/#customformdataprocessor","title":"<code>CustomFormDataProcessor</code>","text":"<p>As mentioned above, the data in the <code>data</code> sub-array is intended to directly create or update the database object with. As these values are used in the database query directly, these values cannot contain arrays. Several form fields, however, store and return their data in form of arrays. Thus, this data cannot be returned by <code>IFormField::getSaveValue()</code> so that <code>IFormField::hasSaveValue()</code> returns <code>false</code> and the form field\u2019s data is not collected by the standard <code>DefaultFormDataProcessor</code> object.</p> <p>Instead, such form fields register a <code>CustomFormDataProcessor</code> in their <code>IFormField::populate()</code> method that inserts the form field value into the <code>$parameters</code> array directly. This way, the relevant database object action method has access to the data to save it appropriately.</p> <p>The constructor of <code>CustomFormDataProcessor</code> requires an id (that is primarily used in error messages during the validation of the second parameter) and callables for <code>IFormDataProcessor::processFormData()</code> and <code>IFormDataProcessor::processObjectData()</code> which are passed the same parameters as the <code>IFormDataProcessor</code> methods. Only one of the callables has to be given, the other one then defaults to simply returning the relevant array unchanged.</p>"},{"location":"php/api/form_builder/validation_data/#voidformdataprocessor","title":"<code>VoidFormDataProcessor</code>","text":"<p>Some form fields might only exist to toggle the visibility of other form fields (via dependencies) but the data of form field itself is irrelevant. As <code>DefaultFormDataProcessor</code> collects the data of all form fields, an additional data processor in the form of a <code>VoidFormDataProcessor</code> can be added whose constructor <code>__construct($property, $isDataProperty = true)</code> requires the name of the relevant object property/form id and whether the form field value is stored in the <code>data</code> sub-array or directory in the <code>$parameters</code> array. When the data processor is invoked, it checks whether the relevant entry in the <code>$parameters</code> array exists and voids it by removing it from the array.</p>"},{"location":"tutorial/series/overview/","title":"Tutorial Series","text":"<p>In this tutorial series, we will code a package that allows administrators to create a registry of people. In this context, \"people\" does not refer to users registered on the website but anybody living, dead or fictional.</p> <p>We will start this tutorial series by creating a base structure for the package and then continue by adding further features step by step using different APIs. Note that in the context of this example, not every added feature might make perfect sense but the goal of this tutorial is not to create a useful package but to introduce you to WoltLab Suite.</p> <ul> <li>Part 1: Base Structure</li> <li>Part 2: Event and Template Listeners</li> <li>Part 3: Person Page and Comments</li> <li>Part 4: Box and Box Conditions</li> <li>Part 5: Person Information</li> <li>Part 6: Activity Points and Activity Events</li> </ul>"},{"location":"tutorial/series/part_1/","title":"Tutorial Series Part 1: Base Structure","text":"<p>In the first part of this tutorial series, we will lay out what the basic version of package should be able to do and how to implement these functions.</p>"},{"location":"tutorial/series/part_1/#package-functionality","title":"Package Functionality","text":"<p>The package should provide the following possibilities/functions:</p> <ul> <li>Sortable list of all people in the ACP</li> <li>Ability to add, edit and delete people in the ACP</li> <li>Restrict the ability to add, edit and delete people (in short: manage people) in the ACP</li> <li>Sortable list of all people in the front end</li> </ul>"},{"location":"tutorial/series/part_1/#used-components","title":"Used Components","text":"<p>We will use the following package installation plugins:</p> <ul> <li>acpTemplate package installation plugin,</li> <li>acpMenu package installation plugin,</li> <li>database package installation plugin,</li> <li>file package installation plugin,</li> <li>language package installation plugin,</li> <li>menuItem package installation plugin,</li> <li>page package installation plugin,</li> <li>template package installation plugin,</li> <li>userGroupOption package installation plugin,</li> </ul> <p>use database objects, create pages and use templates.</p>"},{"location":"tutorial/series/part_1/#package-structure","title":"Package Structure","text":"<p>The package will have the following file structure:</p> <pre><code>\u251c\u2500\u2500 acpMenu.xml\n\u251c\u2500\u2500 acptemplates\n\u2502   \u251c\u2500\u2500 personAdd.tpl\n\u2502   \u2514\u2500\u2500 personList.tpl\n\u251c\u2500\u2500 files\n\u2502   \u251c\u2500\u2500 acp\n\u2502   \u2502   \u2514\u2500\u2500 database\n\u2502   \u2502       \u2514\u2500\u2500 install_com.woltlab.wcf.people.php\n\u2502   \u2514\u2500\u2500 lib\n\u2502       \u251c\u2500\u2500 acp\n\u2502       \u2502   \u251c\u2500\u2500 form\n\u2502       \u2502   \u2502   \u251c\u2500\u2500 PersonAddForm.class.php\n\u2502       \u2502   \u2502   \u2514\u2500\u2500 PersonEditForm.class.php\n\u2502       \u2502   \u2514\u2500\u2500 page\n\u2502       \u2502       \u2514\u2500\u2500 PersonListPage.class.php\n\u2502       \u251c\u2500\u2500 data\n\u2502       \u2502   \u2514\u2500\u2500 person\n\u2502       \u2502       \u251c\u2500\u2500 Person.class.php\n\u2502       \u2502       \u251c\u2500\u2500 PersonAction.class.php\n\u2502       \u2502       \u251c\u2500\u2500 PersonEditor.class.php\n\u2502       \u2502       \u2514\u2500\u2500 PersonList.class.php\n\u2502       \u2514\u2500\u2500 page\n\u2502           \u2514\u2500\u2500 PersonListPage.class.php\n\u251c\u2500\u2500 language\n\u2502   \u251c\u2500\u2500 de.xml\n\u2502   \u2514\u2500\u2500 en.xml\n\u251c\u2500\u2500 menuItem.xml\n\u251c\u2500\u2500 package.xml\n\u251c\u2500\u2500 page.xml\n\u251c\u2500\u2500 templates\n\u2502   \u2514\u2500\u2500 personList.tpl\n\u2514\u2500\u2500 userGroupOption.xml\n</code></pre>"},{"location":"tutorial/series/part_1/#person-modeling","title":"Person Modeling","text":""},{"location":"tutorial/series/part_1/#database-table","title":"Database Table","text":"<p>As the first step, we have to model the people we want to manage with this package. As this is only an introductory tutorial, we will keep things simple and only consider the first and last name of a person. Thus, the database table we will store the people in only contains three columns:</p> <ol> <li><code>personID</code> is the unique numeric identifier of each person created,</li> <li><code>firstName</code> contains the first name of the person,</li> <li><code>lastName</code> contains the last name of the person.</li> </ol> <p>The first file for our package is the <code>install_com.woltlab.wcf.people.php</code> file used to create such a database table during package installation:</p> files/acp/database/install_com.woltlab.wcf.people.php <pre><code>&lt;?php\n\nuse wcf\\system\\database\\table\\column\\NotNullVarchar255DatabaseTableColumn;\nuse wcf\\system\\database\\table\\column\\ObjectIdDatabaseTableColumn;\nuse wcf\\system\\database\\table\\DatabaseTable;\nuse wcf\\system\\database\\table\\index\\DatabaseTablePrimaryIndex;\n\nreturn [\n    DatabaseTable::create('wcf1_person')\n        -&gt;columns([\n            ObjectIdDatabaseTableColumn::create('personID'),\n            NotNullVarchar255DatabaseTableColumn::create('firstName'),\n            NotNullVarchar255DatabaseTableColumn::create('lastName'),\n        ])\n        -&gt;indices([\n            DatabaseTablePrimaryIndex::create()\n                -&gt;columns(['personID']),\n        ]),\n];\n</code></pre>"},{"location":"tutorial/series/part_1/#database-object","title":"Database Object","text":""},{"location":"tutorial/series/part_1/#person","title":"<code>Person</code>","text":"<p>In our PHP code, each person will be represented by an object of the following class:</p> files/lib/data/person/Person.class.php <pre><code>&lt;?php\n\nnamespace wcf\\data\\person;\n\nuse wcf\\data\\DatabaseObject;\nuse wcf\\system\\request\\IRouteController;\n\n/**\n * Represents a person.\n *\n * @author  Matthias Schmidt\n * @copyright   2001-2021 WoltLab GmbH\n * @license GNU Lesser General Public License &lt;http://opensource.org/licenses/lgpl-license.php&gt;\n * @package WoltLabSuite\\Core\\Data\\Person\n *\n * @property-read   int     $personID   unique id of the person\n * @property-read   string  $firstName  first name of the person\n * @property-read   string  $lastName   last name of the person\n */\nclass Person extends DatabaseObject implements IRouteController\n{\n    /**\n     * Returns the first and last name of the person if a person object is treated as a string.\n     *\n     * @return  string\n     */\n    public function __toString()\n    {\n        return $this-&gt;getTitle();\n    }\n\n    /**\n     * @inheritDoc\n     */\n    public function getTitle()\n    {\n        return $this-&gt;firstName . ' ' . $this-&gt;lastName;\n    }\n}\n</code></pre> <p>The important thing here is that <code>Person</code> extends <code>DatabaseObject</code>. Additionally, we implement the <code>IRouteController</code> interface, which allows us to use <code>Person</code> objects to create links, and we implement PHP's magic __toString() method for convenience.</p> <p>For every database object, you need to implement three additional classes: an action class, an editor class and a list class.</p>"},{"location":"tutorial/series/part_1/#personaction","title":"<code>PersonAction</code>","text":"files/lib/data/person/PersonAction.class.php <pre><code>&lt;?php\n\nnamespace wcf\\data\\person;\n\nuse wcf\\data\\AbstractDatabaseObjectAction;\n\n/**\n * Executes person-related actions.\n *\n * @author  Matthias Schmidt\n * @copyright   2001-2021 WoltLab GmbH\n * @license GNU Lesser General Public License &lt;http://opensource.org/licenses/lgpl-license.php&gt;\n * @package WoltLabSuite\\Core\\Data\\Person\n *\n * @method  Person      create()\n * @method  PersonEditor[]  getObjects()\n * @method  PersonEditor    getSingleObject()\n */\nclass PersonAction extends AbstractDatabaseObjectAction\n{\n    /**\n     * @inheritDoc\n     */\n    protected $permissionsDelete = ['admin.content.canManagePeople'];\n\n    /**\n     * @inheritDoc\n     */\n    protected $requireACP = ['delete'];\n}\n</code></pre> <p>This implementation of <code>AbstractDatabaseObjectAction</code> is very basic and only sets the <code>$permissionsDelete</code> and <code>$requireACP</code> properties. This is done so that later on, when implementing the people list for the ACP, we can delete people simply via AJAX. <code>$permissionsDelete</code> has to be set to the permission needed in order to delete a person. We will later use the userGroupOption package installation plugin to create the <code>admin.content.canManagePeople</code> permission. <code>$requireACP</code> restricts deletion of people to the ACP.</p>"},{"location":"tutorial/series/part_1/#personeditor","title":"<code>PersonEditor</code>","text":"files/lib/data/person/PersonEditor.class.php <pre><code>&lt;?php\n\nnamespace wcf\\data\\person;\n\nuse wcf\\data\\DatabaseObjectEditor;\n\n/**\n * Provides functions to edit people.\n *\n * @author  Matthias Schmidt\n * @copyright   2001-2021 WoltLab GmbH\n * @license GNU Lesser General Public License &lt;http://opensource.org/licenses/lgpl-license.php&gt;\n * @package WoltLabSuite\\Core\\Data\\Person\n *\n * @method static   Person  create(array $parameters = [])\n * @method      Person  getDecoratedObject()\n * @mixin       Person\n */\nclass PersonEditor extends DatabaseObjectEditor\n{\n    /**\n     * @inheritDoc\n     */\n    protected static $baseClass = Person::class;\n}\n</code></pre> <p>This implementation of <code>DatabaseObjectEditor</code> fulfills the minimum requirement for a database object editor: setting the static <code>$baseClass</code> property to the database object class name.</p>"},{"location":"tutorial/series/part_1/#personlist","title":"<code>PersonList</code>","text":"files/lib/data/person/PersonList.class.php <pre><code>&lt;?php\n\nnamespace wcf\\data\\person;\n\nuse wcf\\data\\DatabaseObjectList;\n\n/**\n * Represents a list of people.\n *\n * @author  Matthias Schmidt\n * @copyright   2001-2021 WoltLab GmbH\n * @license GNU Lesser General Public License &lt;http://opensource.org/licenses/lgpl-license.php&gt;\n * @package WoltLabSuite\\Core\\Data\\Person\n *\n * @method  Person      current()\n * @method  Person[]    getObjects()\n * @method  Person|null search($objectID)\n * @property    Person[]    $objects\n */\nclass PersonList extends DatabaseObjectList\n{\n}\n</code></pre> <p>Due to the default implementation of <code>DatabaseObjectList</code>, our <code>PersonList</code> class just needs to extend it and everything else is either automatically set by the code of <code>DatabaseObjectList</code> or, in the case of properties and methods, provided by that class.</p>"},{"location":"tutorial/series/part_1/#acp","title":"ACP","text":"<p>Next, we will take care of the controllers and views for the ACP. In total, we need three each:</p> <ol> <li>page to list people,</li> <li>form to add people, and</li> <li>form to edit people.</li> </ol> <p>Before we create the controllers and views, let us first create the menu items for the pages in the ACP menu.</p>"},{"location":"tutorial/series/part_1/#acp-menu","title":"ACP Menu","text":"<p>We need to create three menu items:</p> <ol> <li>a \u201cparent\u201d menu item on the second level of the ACP menu item tree,</li> <li>a third level menu item for the people list page, and</li> <li>a fourth level menu item for the form to add new people.</li> </ol> acpMenu.xml <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;data xmlns=\"http://www.woltlab.com\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.woltlab.com http://www.woltlab.com/XSD/5.4/acpMenu.xsd\"&gt;\n&lt;import&gt;\n&lt;acpmenuitem name=\"wcf.acp.menu.link.person\"&gt;\n&lt;parent&gt;wcf.acp.menu.link.content&lt;/parent&gt;\n&lt;/acpmenuitem&gt;\n&lt;acpmenuitem name=\"wcf.acp.menu.link.person.list\"&gt;\n&lt;controller&gt;wcf\\acp\\page\\PersonListPage&lt;/controller&gt;\n&lt;parent&gt;wcf.acp.menu.link.person&lt;/parent&gt;\n&lt;permissions&gt;admin.content.canManagePeople&lt;/permissions&gt;\n&lt;/acpmenuitem&gt;\n&lt;acpmenuitem name=\"wcf.acp.menu.link.person.add\"&gt;\n&lt;controller&gt;wcf\\acp\\form\\PersonAddForm&lt;/controller&gt;\n&lt;parent&gt;wcf.acp.menu.link.person.list&lt;/parent&gt;\n&lt;permissions&gt;admin.content.canManagePeople&lt;/permissions&gt;\n&lt;icon&gt;fa-plus&lt;/icon&gt;\n&lt;/acpmenuitem&gt;\n&lt;/import&gt;\n&lt;/data&gt;\n</code></pre> <p>We choose <code>wcf.acp.menu.link.content</code> as the parent menu item for the first menu item <code>wcf.acp.menu.link.person</code> because the people we are managing is just one form of content. The fourth level menu item <code>wcf.acp.menu.link.person.add</code> will only be shown as an icon and thus needs an additional element <code>icon</code> which takes a FontAwesome icon class as value.</p>"},{"location":"tutorial/series/part_1/#people-list","title":"People List","text":"<p>To list the people in the ACP, we need a <code>PersonListPage</code> class and a <code>personList</code> template.</p>"},{"location":"tutorial/series/part_1/#personlistpage","title":"<code>PersonListPage</code>","text":"files/lib/acp/page/PersonListPage.class.php <pre><code>&lt;?php\n\nnamespace wcf\\acp\\page;\n\nuse wcf\\data\\person\\PersonList;\nuse wcf\\page\\SortablePage;\n\n/**\n * Shows the list of people.\n *\n * @author  Matthias Schmidt\n * @copyright   2001-2021 WoltLab GmbH\n * @license GNU Lesser General Public License &lt;http://opensource.org/licenses/lgpl-license.php&gt;\n * @package WoltLabSuite\\Core\\Acp\\Page\n */\nclass PersonListPage extends SortablePage\n{\n    /**\n     * @inheritDoc\n     */\n    public $activeMenuItem = 'wcf.acp.menu.link.person.list';\n\n    /**\n     * @inheritDoc\n     */\n    public $neededPermissions = ['admin.content.canManagePeople'];\n\n    /**\n     * @inheritDoc\n     */\n    public $objectListClassName = PersonList::class;\n\n    /**\n     * @inheritDoc\n     */\n    public $validSortFields = ['personID', 'firstName', 'lastName'];\n}\n</code></pre> <p>As WoltLab Suite Core already provides a powerful default implementation of a sortable page, our work here is minimal:</p> <ol> <li>We need to set the active ACP menu item via the <code>$activeMenuItem</code>.</li> <li><code>$neededPermissions</code> contains a list of permissions of which the user needs to have at least one in order to see the person list.    We use the same permission for both the menu item and the page.</li> <li>The database object list class whose name is provided via <code>$objectListClassName</code> and that handles fetching the people from database is the <code>PersonList</code> class, which we have already created.</li> <li>To validate the sort field passed with the request, we set <code>$validSortFields</code> to the available database table columns.</li> </ol>"},{"location":"tutorial/series/part_1/#personlisttpl","title":"<code>personList.tpl</code>","text":"acptemplates/personList.tpl <pre><code>{include file='header' pageTitle='wcf.acp.person.list'}\n\n&lt;header class=\"contentHeader\"&gt;\n    &lt;div class=\"contentHeaderTitle\"&gt;\n        &lt;h1 class=\"contentTitle\"&gt;{lang}wcf.acp.person.list{/lang}&lt;/h1&gt;\n    &lt;/div&gt;\n\n    &lt;nav class=\"contentHeaderNavigation\"&gt;\n        &lt;ul&gt;\n            &lt;li&gt;&lt;a href=\"{link controller='PersonAdd'}{/link}\" class=\"button\"&gt;&lt;span class=\"icon icon16 fa-plus\"&gt;&lt;/span&gt; &lt;span&gt;{lang}wcf.acp.menu.link.person.add{/lang}&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;\n\n{event name='contentHeaderNavigation'}\n        &lt;/ul&gt;\n    &lt;/nav&gt;\n&lt;/header&gt;\n\n{hascontent}\n    &lt;div class=\"paginationTop\"&gt;\n{content}{pages print=true assign=pagesLinks controller=\"PersonList\" link=\"pageNo=%d&amp;sortField=$sortField&amp;sortOrder=$sortOrder\"}{/content}\n    &lt;/div&gt;\n{/hascontent}\n\n{if $objects|count}\n    &lt;div class=\"section tabularBox\"&gt;\n        &lt;table class=\"table jsObjectActionContainer\" data-object-action-class-name=\"wcf\\data\\person\\PersonAction\"&gt;\n            &lt;thead&gt;\n                &lt;tr&gt;\n                    &lt;th class=\"columnID columnPersonID{if $sortField == 'personID'} active {@$sortOrder}{/if}\" colspan=\"2\"&gt;&lt;a href=\"{link controller='PersonList'}pageNo={@$pageNo}&amp;sortField=personID&amp;sortOrder={if $sortField == 'personID' &amp;&amp; $sortOrder == 'ASC'}DESC{else}ASC{/if}{/link}\"&gt;{lang}wcf.global.objectID{/lang}&lt;/a&gt;&lt;/th&gt;\n                    &lt;th class=\"columnTitle columnFirstName{if $sortField == 'firstName'} active {@$sortOrder}{/if}\"&gt;&lt;a href=\"{link controller='PersonList'}pageNo={@$pageNo}&amp;sortField=firstName&amp;sortOrder={if $sortField == 'firstName' &amp;&amp; $sortOrder == 'ASC'}DESC{else}ASC{/if}{/link}\"&gt;{lang}wcf.person.firstName{/lang}&lt;/a&gt;&lt;/th&gt;\n                    &lt;th class=\"columnTitle columnLastName{if $sortField == 'lastName'} active {@$sortOrder}{/if}\"&gt;&lt;a href=\"{link controller='PersonList'}pageNo={@$pageNo}&amp;sortField=lastName&amp;sortOrder={if $sortField == 'lastName' &amp;&amp; $sortOrder == 'ASC'}DESC{else}ASC{/if}{/link}\"&gt;{lang}wcf.person.lastName{/lang}&lt;/a&gt;&lt;/th&gt;\n\n{event name='columnHeads'}\n                &lt;/tr&gt;\n            &lt;/thead&gt;\n\n            &lt;tbody class=\"jsReloadPageWhenEmpty\"&gt;\n{foreach from=$objects item=person}\n                    &lt;tr class=\"jsObjectActionObject\" data-object-id=\"{@$person-&gt;getObjectID()}\"&gt;\n                        &lt;td class=\"columnIcon\"&gt;\n                            &lt;a href=\"{link controller='PersonEdit' object=$person}{/link}\" title=\"{lang}wcf.global.button.edit{/lang}\" class=\"jsTooltip\"&gt;&lt;span class=\"icon icon16 fa-pencil\"&gt;&lt;/span&gt;&lt;/a&gt;\n{objectAction action=\"delete\" objectTitle=$person-&gt;getTitle()}\n\n{event name='rowButtons'}\n                        &lt;/td&gt;\n                        &lt;td class=\"columnID\"&gt;{#$person-&gt;personID}&lt;/td&gt;\n                        &lt;td class=\"columnTitle columnFirstName\"&gt;&lt;a href=\"{link controller='PersonEdit' object=$person}{/link}\"&gt;{$person-&gt;firstName}&lt;/a&gt;&lt;/td&gt;\n                        &lt;td class=\"columnTitle columnLastName\"&gt;&lt;a href=\"{link controller='PersonEdit' object=$person}{/link}\"&gt;{$person-&gt;lastName}&lt;/a&gt;&lt;/td&gt;\n\n{event name='columns'}\n                    &lt;/tr&gt;\n{/foreach}\n            &lt;/tbody&gt;\n        &lt;/table&gt;\n    &lt;/div&gt;\n\n    &lt;footer class=\"contentFooter\"&gt;\n{hascontent}\n            &lt;div class=\"paginationBottom\"&gt;\n{content}{@$pagesLinks}{/content}\n            &lt;/div&gt;\n{/hascontent}\n\n        &lt;nav class=\"contentFooterNavigation\"&gt;\n            &lt;ul&gt;\n                &lt;li&gt;&lt;a href=\"{link controller='PersonAdd'}{/link}\" class=\"button\"&gt;&lt;span class=\"icon icon16 fa-plus\"&gt;&lt;/span&gt; &lt;span&gt;{lang}wcf.acp.menu.link.person.add{/lang}&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;\n\n{event name='contentFooterNavigation'}\n            &lt;/ul&gt;\n        &lt;/nav&gt;\n    &lt;/footer&gt;\n{else}\n    &lt;p class=\"info\"&gt;{lang}wcf.global.noItems{/lang}&lt;/p&gt;\n{/if}\n\n{include file='footer'}\n</code></pre> <p>We will go piece by piece through the template code:</p> <ol> <li>We include the <code>header</code> template and set the page title <code>wcf.acp.person.list</code>.    You have to include this template for every page!</li> <li>We set the content header and additional provide a button to create a new person in the content header navigation.</li> <li>As not all people are listed on the same page if many people have been created, we need a pagination for which we use the <code>pages</code> template plugin.    The <code>{hascontent}{content}{/content}{/hascontent}</code> construct ensures the <code>.paginationTop</code> element is only shown if the <code>pages</code> template plugin has a return value, thus if a pagination is necessary.</li> <li>Now comes the main part of the page, the list of the people, which will only be displayed if any people exist.    Otherwise, an info box is displayed using the generic <code>wcf.global.noItems</code> language item.    The <code>$objects</code> template variable is automatically assigned by <code>wcf\\page\\MultipleLinkPage</code> and contains the <code>PersonList</code> object used to read the people from database.    The table itself consists of a <code>thead</code> and a <code>tbody</code> element and is extendable with more columns using the template events <code>columnHeads</code> and <code>columns</code>.    In general, every table should provide these events.    The default structure of a table is used here so that the first column of the content rows contains icons to edit and to delete the row (and provides another standard event <code>rowButtons</code>) and that the second column contains the ID of the person.    The table can be sorted by clicking on the head of each column.    The used variables <code>$sortField</code> and <code>$sortOrder</code> are automatically assigned to the template by <code>SortablePage</code>.</li> <li>The <code>.contentFooter</code> element is only shown if people exist as it basically repeats the <code>.contentHeaderNavigation</code> and <code>.paginationTop</code> element.</li> <li>The delete button for each person shown in the <code>.columnIcon</code> element relies on the global <code>WoltLabSuite/Core/Ui/Object/Action</code> module which only requires the <code>jsObjectActionContainer</code> CSS class in combination with the <code>data-object-action-class-name</code> attribute for the <code>table</code> element, the <code>jsObjectActionObject</code> CSS class for each person's <code>tr</code> element in combination with the <code>data-object-id</code> attribute, and lastly the delete button itself, which is created with the <code>objectAction</code> template plugin.</li> <li>The <code>.jsReloadPageWhenEmpty</code> CSS class on the <code>tbody</code> element ensures that once all persons on the page have been deleted, the page is reloaded.</li> <li>Lastly, the <code>footer</code> template is included that terminates the page.    You also have to include this template for every page!</li> </ol> <p>Now, we have finished the page to manage the people so that we can move on to the forms with which we actually create and edit the people.</p>"},{"location":"tutorial/series/part_1/#person-add-form","title":"Person Add Form","text":"<p>Like the person list, the form to add new people requires a controller class and a template.</p>"},{"location":"tutorial/series/part_1/#personaddform","title":"<code>PersonAddForm</code>","text":"files/lib/acp/form/PersonAddForm.class.php <pre><code>&lt;?php\n\nnamespace wcf\\acp\\form;\n\nuse wcf\\data\\person\\PersonAction;\nuse wcf\\form\\AbstractFormBuilderForm;\nuse wcf\\system\\form\\builder\\container\\FormContainer;\nuse wcf\\system\\form\\builder\\field\\TextFormField;\n\n/**\n * Shows the form to create a new person.\n *\n * @author  Matthias Schmidt\n * @copyright   2001-2021 WoltLab GmbH\n * @license GNU Lesser General Public License &lt;http://opensource.org/licenses/lgpl-license.php&gt;\n * @package WoltLabSuite\\Core\\Acp\\Form\n */\nclass PersonAddForm extends AbstractFormBuilderForm\n{\n    /**\n     * @inheritDoc\n     */\n    public $activeMenuItem = 'wcf.acp.menu.link.person.add';\n\n    /**\n     * @inheritDoc\n     */\n    public $formAction = 'create';\n\n    /**\n     * @inheritDoc\n     */\n    public $neededPermissions = ['admin.content.canManagePeople'];\n\n    /**\n     * @inheritDoc\n     */\n    public $objectActionClass = PersonAction::class;\n\n    /**\n     * @inheritDoc\n     */\n    public $objectEditLinkController = PersonEditForm::class;\n\n    /**\n     * @inheritDoc\n     */\n    protected function createForm()\n    {\n        parent::createForm();\n\n        $this-&gt;form-&gt;appendChild(\n            FormContainer::create('data')\n                -&gt;label('wcf.global.form.data')\n                -&gt;appendChildren([\n                    TextFormField::create('firstName')\n                        -&gt;label('wcf.person.firstName')\n                        -&gt;required()\n                        -&gt;autoFocus()\n                        -&gt;maximumLength(255),\n\n                    TextFormField::create('lastName')\n                        -&gt;label('wcf.person.lastName')\n                        -&gt;required()\n                        -&gt;maximumLength(255),\n                ])\n        );\n    }\n}\n</code></pre> <p>The properties here consist of three types: the \u201chousekeeping\u201d properties <code>$activeMenuItem</code> and <code>$neededPermissions</code>, which fulfill the same roles as for <code>PersonListPage</code>, and the <code>$objectEditLinkController</code> property, which is used to generate a link to edit the newly created person after submitting the form, and finally <code>$formAction</code> and <code>$objectActionClass</code> required by the PHP form builder API used to generate the form.</p> <p>Because of using form builder, we only have to set up the two form fields for entering the first and last name, respectively:</p> <ol> <li>Each field is a simple single-line text field, thus we use <code>TextFormField</code>.</li> <li>The parameter of the <code>create()</code> method expects the id of the field/name of the database object property, which is <code>firstName</code> and <code>lastName</code>, respectively, here.</li> <li>The language item of the label shown in the ouput above the input field is set via the <code>label()</code> method.</li> <li>As both fields have to be filled out, <code>required()</code> is called, and the maximum length is set via <code>maximumLength()</code>.</li> <li>Lastly, to make it easier to fill out the form more quickly, the first field is auto-focused by calling <code>autoFocus()</code>.</li> </ol>"},{"location":"tutorial/series/part_1/#personaddtpl","title":"<code>personAdd.tpl</code>","text":"acptemplates/personAdd.tpl <pre><code>{include file='header' pageTitle='wcf.acp.person.'|concat:$action}\n\n&lt;header class=\"contentHeader\"&gt;\n    &lt;div class=\"contentHeaderTitle\"&gt;\n        &lt;h1 class=\"contentTitle\"&gt;{lang}wcf.acp.person.{$action}{/lang}&lt;/h1&gt;\n    &lt;/div&gt;\n\n    &lt;nav class=\"contentHeaderNavigation\"&gt;\n        &lt;ul&gt;\n            &lt;li&gt;&lt;a href=\"{link controller='PersonList'}{/link}\" class=\"button\"&gt;&lt;span class=\"icon icon16 fa-list\"&gt;&lt;/span&gt; &lt;span&gt;{lang}wcf.acp.menu.link.person.list{/lang}&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;\n\n{event name='contentHeaderNavigation'}\n        &lt;/ul&gt;\n    &lt;/nav&gt;\n&lt;/header&gt;\n\n{@$form-&gt;getHtml()}\n\n{include file='footer'}\n</code></pre> <p>We will now only concentrate on the new parts compared to <code>personList.tpl</code>:</p> <ol> <li>We use the <code>$action</code> variable to distinguish between the languages items used for adding a person and for creating a person.</li> <li>Because of form builder, we only have to call <code>{@$form-&gt;getHtml()}</code> to generate all relevant output for the form.</li> </ol>"},{"location":"tutorial/series/part_1/#person-edit-form","title":"Person Edit Form","text":"<p>As mentioned before, for the form to edit existing people, we only need a new controller as the template has already been implemented in a way that it handles both, adding and editing.</p>"},{"location":"tutorial/series/part_1/#personeditform","title":"<code>PersonEditForm</code>","text":"files/lib/acp/form/PersonEditForm.class.php <pre><code>&lt;?php\n\nnamespace wcf\\acp\\form;\n\nuse wcf\\data\\person\\Person;\nuse wcf\\system\\exception\\IllegalLinkException;\n\n/**\n * Shows the form to edit an existing person.\n *\n * @author  Matthias Schmidt\n * @copyright   2001-2021 WoltLab GmbH\n * @license GNU Lesser General Public License &lt;http://opensource.org/licenses/lgpl-license.php&gt;\n * @package WoltLabSuite\\Core\\Acp\\Form\n */\nclass PersonEditForm extends PersonAddForm\n{\n    /**\n     * @inheritDoc\n     */\n    public $activeMenuItem = 'wcf.acp.menu.link.person';\n\n    /**\n     * @inheritDoc\n     */\n    public $formAction = 'update';\n\n    /**\n     * @inheritDoc\n     */\n    public function readParameters()\n    {\n        parent::readParameters();\n\n        if (isset($_REQUEST['id'])) {\n            $this-&gt;formObject = new Person($_REQUEST['id']);\n\n            if (!$this-&gt;formObject-&gt;getObjectID()) {\n                throw new IllegalLinkException();\n            }\n        }\n    }\n}\n</code></pre> <p>In general, edit forms extend the associated add form so that the code to read and to validate the input data is simply inherited.</p> <p>After setting a different active menu item, we have to change the value of <code>$formAction</code> because this form, in contrast to <code>PersonAddForm</code>, does not create but update existing persons.</p> <p>As we rely on form builder, the only thing necessary in this controller is to read and validate the edit object, i.e. the edited person, which is done in <code>readParameters()</code>.</p>"},{"location":"tutorial/series/part_1/#frontend","title":"Frontend","text":"<p>For the front end, that means the part with which the visitors of a website interact, we want to implement a simple sortable page that lists the people. This page should also be directly linked in the main menu.</p>"},{"location":"tutorial/series/part_1/#pagexml","title":"<code>page.xml</code>","text":"<p>First, let us register the page with the system because every front end page or form needs to be explicitly registered using the page package installation plugin:</p> page.xml <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;data xmlns=\"http://www.woltlab.com\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.woltlab.com http://www.woltlab.com/XSD/5.4/page.xsd\"&gt;\n&lt;import&gt;\n&lt;page identifier=\"com.woltlab.wcf.people.PersonList\"&gt;\n&lt;pageType&gt;system&lt;/pageType&gt;\n&lt;controller&gt;wcf\\page\\PersonListPage&lt;/controller&gt;\n&lt;name language=\"de\"&gt;Personen-Liste&lt;/name&gt;\n&lt;name language=\"en\"&gt;Person List&lt;/name&gt;\n\n&lt;content language=\"de\"&gt;\n&lt;title&gt;Personen&lt;/title&gt;\n&lt;/content&gt;\n&lt;content language=\"en\"&gt;\n&lt;title&gt;People&lt;/title&gt;\n&lt;/content&gt;\n&lt;/page&gt;\n&lt;/import&gt;\n&lt;/data&gt;\n</code></pre> <p>For more information about what each of the elements means, please refer to the page package installation plugin page.</p>"},{"location":"tutorial/series/part_1/#menuitemxml","title":"<code>menuItem.xml</code>","text":"<p>Next, we register the menu item using the menuItem package installation plugin:</p> menuItem.xml <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;data xmlns=\"http://www.woltlab.com\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.woltlab.com http://www.woltlab.com/XSD/5.4/menuItem.xsd\"&gt;\n&lt;import&gt;\n&lt;item identifier=\"com.woltlab.wcf.people.PersonList\"&gt;\n&lt;menu&gt;com.woltlab.wcf.MainMenu&lt;/menu&gt;\n&lt;title language=\"de\"&gt;Personen&lt;/title&gt;\n&lt;title language=\"en\"&gt;People&lt;/title&gt;\n&lt;page&gt;com.woltlab.wcf.people.PersonList&lt;/page&gt;\n&lt;/item&gt;\n&lt;/import&gt;\n&lt;/data&gt;\n</code></pre> <p>Here, the import parts are that we register the menu item for the main menu <code>com.woltlab.wcf.MainMenu</code> and link the menu item with the page <code>com.woltlab.wcf.people.PersonList</code>, which we just registered.</p>"},{"location":"tutorial/series/part_1/#people-list_1","title":"People List","text":"<p>As in the ACP, we need a controller and a template. You might notice that both the controller\u2019s (unqualified) class name and the template name are the same for the ACP and the front end. This is no problem because the qualified names of the classes differ and the files are stored in different directories and because the templates are installed by different package installation plugins and are also stored in different directories.</p>"},{"location":"tutorial/series/part_1/#personlistpage_1","title":"<code>PersonListPage</code>","text":"files/lib/page/PersonListPage.class.php <pre><code>&lt;?php\n\nnamespace wcf\\page;\n\nuse wcf\\data\\person\\PersonList;\n\n/**\n * Shows the list of people.\n *\n * @author  Matthias Schmidt\n * @copyright   2001-2021 WoltLab GmbH\n * @license GNU Lesser General Public License &lt;http://opensource.org/licenses/lgpl-license.php&gt;\n * @package WoltLabSuite\\Core\\Page\n */\nclass PersonListPage extends SortablePage\n{\n    /**\n     * @inheritDoc\n     */\n    public $defaultSortField = 'lastName';\n\n    /**\n     * @inheritDoc\n     */\n    public $objectListClassName = PersonList::class;\n\n    /**\n     * @inheritDoc\n     */\n    public $validSortFields = ['personID', 'firstName', 'lastName'];\n}\n</code></pre> <p>This class is almost identical to the ACP version. In the front end, we do not need to set the active menu item manually because the system determines the active menu item automatically based on the requested page. Furthermore, <code>$neededPermissions</code> has not been set because in the front end, users do not need any special permission to access the page. In the front end, we explicitly set the <code>$defaultSortField</code> so that the people listed on the page are sorted by their last name (in ascending order) by default.</p>"},{"location":"tutorial/series/part_1/#personlisttpl_1","title":"<code>personList.tpl</code>","text":"templates/personList.tpl <pre><code>{capture assign='contentTitle'}{lang}wcf.person.list{/lang} &lt;span class=\"badge\"&gt;{#$items}&lt;/span&gt;{/capture}\n\n{capture assign='headContent'}\n{if $pageNo &lt; $pages}\n        &lt;link rel=\"next\" href=\"{link controller='PersonList'}pageNo={@$pageNo+1}{/link}\"&gt;\n{/if}\n{if $pageNo &gt; 1}\n        &lt;link rel=\"prev\" href=\"{link controller='PersonList'}{if $pageNo &gt; 2}pageNo={@$pageNo-1}{/if}{/link}\"&gt;\n{/if}\n    &lt;link rel=\"canonical\" href=\"{link controller='PersonList'}{if $pageNo &gt; 1}pageNo={@$pageNo}{/if}{/link}\"&gt;\n{/capture}\n\n{capture assign='sidebarRight'}\n    &lt;section class=\"box\"&gt;\n        &lt;form method=\"post\" action=\"{link controller='PersonList'}{/link}\"&gt;\n            &lt;h2 class=\"boxTitle\"&gt;{lang}wcf.global.sorting{/lang}&lt;/h2&gt;\n\n            &lt;div class=\"boxContent\"&gt;\n                &lt;dl&gt;\n                    &lt;dt&gt;&lt;/dt&gt;\n                    &lt;dd&gt;\n                        &lt;select id=\"sortField\" name=\"sortField\"&gt;\n                            &lt;option value=\"firstName\"{if $sortField == 'firstName'} selected{/if}&gt;{lang}wcf.person.firstName{/lang}&lt;/option&gt;\n                            &lt;option value=\"lastName\"{if $sortField == 'lastName'} selected{/if}&gt;{lang}wcf.person.lastName{/lang}&lt;/option&gt;\n{event name='sortField'}\n                        &lt;/select&gt;\n                        &lt;select name=\"sortOrder\"&gt;\n                            &lt;option value=\"ASC\"{if $sortOrder == 'ASC'} selected{/if}&gt;{lang}wcf.global.sortOrder.ascending{/lang}&lt;/option&gt;\n                            &lt;option value=\"DESC\"{if $sortOrder == 'DESC'} selected{/if}&gt;{lang}wcf.global.sortOrder.descending{/lang}&lt;/option&gt;\n                        &lt;/select&gt;\n                    &lt;/dd&gt;\n                &lt;/dl&gt;\n\n                &lt;div class=\"formSubmit\"&gt;\n                    &lt;input type=\"submit\" value=\"{lang}wcf.global.button.submit{/lang}\" accesskey=\"s\"&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/form&gt;\n    &lt;/section&gt;\n{/capture}\n\n{include file='header'}\n\n{hascontent}\n    &lt;div class=\"paginationTop\"&gt;\n{content}\n{pages print=true assign=pagesLinks controller='PersonList' link=\"pageNo=%d&amp;sortField=$sortField&amp;sortOrder=$sortOrder\"}\n{/content}\n    &lt;/div&gt;\n{/hascontent}\n\n{if $items}\n    &lt;div class=\"section sectionContainerList\"&gt;\n        &lt;ol class=\"containerList personList\"&gt;\n{foreach from=$objects item=person}\n                &lt;li&gt;\n                    &lt;div class=\"box48\"&gt;\n                        &lt;span class=\"icon icon48 fa-user\"&gt;&lt;/span&gt;\n\n                        &lt;div class=\"details personInformation\"&gt;\n                            &lt;div class=\"containerHeadline\"&gt;\n                                &lt;h3&gt;{$person}&lt;/h3&gt;\n                            &lt;/div&gt;\n\n{hascontent}\n                                &lt;ul class=\"inlineList commaSeparated\"&gt;\n{content}{event name='personData'}{/content}\n                                &lt;/ul&gt;\n{/hascontent}\n\n{hascontent}\n                                &lt;dl class=\"plain inlineDataList small\"&gt;\n{content}{event name='personStatistics'}{/content}\n                                &lt;/dl&gt;\n{/hascontent}\n                        &lt;/div&gt;\n                    &lt;/div&gt;\n                &lt;/li&gt;\n{/foreach}\n        &lt;/ol&gt;\n    &lt;/div&gt;\n{else}\n    &lt;p class=\"info\"&gt;{lang}wcf.global.noItems{/lang}&lt;/p&gt;\n{/if}\n\n&lt;footer class=\"contentFooter\"&gt;\n{hascontent}\n        &lt;div class=\"paginationBottom\"&gt;\n{content}{@$pagesLinks}{/content}\n        &lt;/div&gt;\n{/hascontent}\n\n{hascontent}\n        &lt;nav class=\"contentFooterNavigation\"&gt;\n            &lt;ul&gt;\n{content}{event name='contentFooterNavigation'}{/content}\n            &lt;/ul&gt;\n        &lt;/nav&gt;\n{/hascontent}\n&lt;/footer&gt;\n\n{include file='footer'}\n</code></pre> <p>If you compare this template to the one used in the ACP, you will recognize similar elements like the <code>.paginationTop</code> element, the <code>p.info</code> element if no people exist, and the <code>.contentFooter</code> element. Furthermore, we include a template called <code>header</code> before actually showing any of the page contents and terminate the template by including the <code>footer</code> template.</p> <p>Now, let us take a closer look at the differences:</p> <ul> <li>We do not explicitly create a <code>.contentHeader</code> element but simply assign the title to the <code>contentTitle</code> variable.   The value of the assignment is simply the title of the page and a badge showing the number of listed people.   The <code>header</code> template that we include later will handle correctly displaying the content header on its own based on the <code>$contentTitle</code> variable.</li> <li>Next, we create additional element for the HTML document\u2019s <code>&lt;head&gt;</code> element.   In this case, we define the canonical link of the page and, because we are showing paginated content, add links to the previous and next page (if they exist).</li> <li>We want the page to be sortable but as we will not be using a table for listing the people like in the ACP, we are not able to place links to sort the people into the table head.   Instead, usually a box is created in the sidebar on the right-hand side that contains <code>select</code> elements to determine sort field and sort order.</li> <li>The main part of the page is the listing of the people.   We use a structure similar to the one used for displaying registered users.   Here, for each person, we simply display a FontAwesome icon representing a person and show the person\u2019s full name relying on <code>Person::__toString()</code>.   Additionally, like in the user list, we provide the initially empty <code>ul.inlineList.commaSeparated</code> and <code>dl.plain.inlineDataList.small</code> elements that can be filled by plugins using the templates events. </li> </ul>"},{"location":"tutorial/series/part_1/#usergroupoptionxml","title":"<code>userGroupOption.xml</code>","text":"<p>We have already used the <code>admin.content.canManagePeople</code> permissions several times, now we need to install it using the userGroupOption package installation plugin:</p> userGroupOption.xml <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;data xmlns=\"http://www.woltlab.com\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.woltlab.com http://www.woltlab.com/XSD/5.4/userGroupOption.xsd\"&gt;\n&lt;import&gt;\n&lt;options&gt;\n&lt;option name=\"admin.content.canManagePeople\"&gt;\n&lt;categoryname&gt;admin.content&lt;/categoryname&gt;\n&lt;optiontype&gt;boolean&lt;/optiontype&gt;\n&lt;defaultvalue&gt;0&lt;/defaultvalue&gt;\n&lt;admindefaultvalue&gt;1&lt;/admindefaultvalue&gt;\n&lt;usersonly&gt;1&lt;/usersonly&gt;\n&lt;/option&gt;\n&lt;/options&gt;\n&lt;/import&gt;\n&lt;/data&gt;\n</code></pre> <p>We use the existing <code>admin.content</code> user group option category for the permission as the people are \u201ccontent\u201d (similar the the ACP menu item). As the permission is for administrators only, we set <code>defaultvalue</code> to <code>0</code> and <code>admindefaultvalue</code> to <code>1</code>. This permission is only relevant for registered users so that it should not be visible when editing the guest user group. This is achieved by setting <code>usersonly</code> to <code>1</code>.</p>"},{"location":"tutorial/series/part_1/#packagexml","title":"<code>package.xml</code>","text":"<p>Lastly, we need to create the <code>package.xml</code> file. For more information about this kind of file, please refer to the <code>package.xml</code> page.</p> package.xml <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;package name=\"com.woltlab.wcf.people\" xmlns=\"http://www.woltlab.com\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.woltlab.com http://www.woltlab.com/XSD/5.4/package.xsd\"&gt;\n&lt;packageinformation&gt;\n&lt;packagename&gt;WoltLab Suite Core Tutorial: People&lt;/packagename&gt;\n&lt;packagedescription&gt;Adds a simple management system for people as part of a tutorial to create packages.&lt;/packagedescription&gt;\n&lt;version&gt;5.4.0&lt;/version&gt;\n&lt;date&gt;2022-01-17&lt;/date&gt;\n&lt;/packageinformation&gt;\n\n&lt;authorinformation&gt;\n&lt;author&gt;WoltLab GmbH&lt;/author&gt;\n&lt;authorurl&gt;http://www.woltlab.com&lt;/authorurl&gt;\n&lt;/authorinformation&gt;\n\n&lt;requiredpackages&gt;\n&lt;requiredpackage minversion=\"5.4.10\"&gt;com.woltlab.wcf&lt;/requiredpackage&gt;\n&lt;/requiredpackages&gt;\n\n&lt;excludedpackages&gt;\n&lt;excludedpackage version=\"6.0.0 Alpha 1\"&gt;com.woltlab.wcf&lt;/excludedpackage&gt;\n&lt;/excludedpackages&gt;\n\n&lt;instructions type=\"install\"&gt;\n&lt;instruction type=\"acpTemplate\" /&gt;\n&lt;instruction type=\"file\" /&gt;\n&lt;instruction type=\"database\"&gt;acp/database/install_com.woltlab.wcf.people.php&lt;/instruction&gt;\n&lt;instruction type=\"template\" /&gt;\n&lt;instruction type=\"language\" /&gt;\n\n&lt;instruction type=\"acpMenu\" /&gt;\n&lt;instruction type=\"page\" /&gt;\n&lt;instruction type=\"menuItem\" /&gt;\n&lt;instruction type=\"userGroupOption\" /&gt;\n&lt;/instructions&gt;\n&lt;/package&gt;\n</code></pre> <p>As this is a package for WoltLab Suite Core 3, we need to require it using <code>&lt;requiredpackage&gt;</code>. We require the latest version (when writing this tutorial) <code>5.4.0 Alpha 1</code>. Additionally, we disallow installation of the package in the next major version <code>6.0</code> by excluding the <code>6.0.0 Alpha 1</code> version.</p> <p>The most important part are to installation instructions. First, we install the ACP templates, files and templates, create the database table and import the language item. Afterwards, the ACP menu items and the permission are added. Now comes the part of the instructions where the order of the instructions is crucial: In <code>menuItem.xml</code>, we refer to the <code>com.woltlab.wcf.people.PersonList</code> page that is delivered by <code>page.xml</code>. As the menu item package installation plugin validates the given page and throws an exception if the page does not exist, we need to install the page before the menu item! </p> <p>This concludes the first part of our tutorial series after which you now have a working simple package with which you can manage people in the ACP and show the visitors of your website a simple list of all created people in the front end.</p> <p>The complete source code of this part can be found on GitHub.</p>"},{"location":"tutorial/series/part_2/","title":"Part 2: Event and Template Listeners","text":"<p>In the first part of this tutorial series, we have created the base structure of our people management package. In further parts, we will use the package of the first part as a basis to directly add new features. In order to explain how event listeners and template works, however, we will not directly adding a new feature to the package by altering it in this part, but we will assume that somebody else created the package and that we want to extend it the \u201ccorrect\u201d way by creating a plugin.</p> <p>The goal of the small plugin that will be created in this part is to add the birthday of the managed people. As in the first part, we will not bother with careful validation of the entered date but just make sure that it is a valid date.</p>"},{"location":"tutorial/series/part_2/#package-functionality","title":"Package Functionality","text":"<p>The package should provide the following possibilities/functions:</p> <ul> <li>List person\u2019s birthday (if set) in people list in the ACP</li> <li>Sort people list by birthday in the ACP</li> <li>Add or remove birthday when adding or editing person</li> <li>List person\u2019s birthday (if set) in people list in the front end</li> <li>Sort people list by birthday in the front end</li> </ul>"},{"location":"tutorial/series/part_2/#used-components","title":"Used Components","text":"<p>We will use the following package installation plugins:</p> <ul> <li>database package installation plugin,</li> <li>eventListener package installation plugin,</li> <li>file package installation plugin,</li> <li>language package installation plugin,</li> <li>template package installation plugin,</li> <li>templateListener package installation plugin.</li> </ul> <p>For more information about the event system, please refer to the dedicated page on events.</p>"},{"location":"tutorial/series/part_2/#package-structure","title":"Package Structure","text":"<p>The package will have the following file structure:</p> <pre><code>\u251c\u2500\u2500 eventListener.xml\n\u251c\u2500\u2500 files\n\u2502   \u251c\u2500\u2500 acp\n\u2502   \u2502   \u2514\u2500\u2500 database\n\u2502   \u2502       \u2514\u2500\u2500 install_com.woltlab.wcf.people.birthday.php\n\u2502   \u2514\u2500\u2500 lib\n\u2502       \u2514\u2500\u2500 system\n\u2502           \u2514\u2500\u2500 event\n\u2502               \u2514\u2500\u2500 listener\n\u2502                   \u251c\u2500\u2500 BirthdayPersonAddFormListener.class.php\n\u2502                   \u2514\u2500\u2500 BirthdaySortFieldPersonListPageListener.class.php\n\u251c\u2500\u2500 language\n\u2502   \u251c\u2500\u2500 de.xml\n\u2502   \u2514\u2500\u2500 en.xml\n\u251c\u2500\u2500 package.xml\n\u251c\u2500\u2500 templateListener.xml\n\u2514\u2500\u2500 templates\n    \u251c\u2500\u2500 __personListBirthday.tpl\n    \u2514\u2500\u2500 __personListBirthdaySortField.tpl\n</code></pre>"},{"location":"tutorial/series/part_2/#extending-person-model","title":"Extending Person Model","text":"<p>The existing model of a person only contains the person\u2019s first name and their last name (in additional to the id used to identify created people). To add the birthday to the model, we need to create an additional database table column using the <code>database</code> package installation plugin:</p> files/acp/database/install_com.woltlab.wcf.people.birthday.php <pre><code>&lt;?php\n\nuse wcf\\system\\database\\table\\column\\DateDatabaseTableColumn;\nuse wcf\\system\\database\\table\\PartialDatabaseTable;\n\nreturn [\nPartialDatabaseTable::create('wcf1_person')\n-&gt;columns([\nDateDatabaseTableColumn::create('birthday'),\n]),\n];\n</code></pre> <p>If we have a <code>Person</code> object, this new property can be accessed the same way as the <code>personID</code> property, the <code>firstName</code> property, or the <code>lastName</code> property from the base package: <code>$person-&gt;birthday</code>.</p>"},{"location":"tutorial/series/part_2/#setting-birthday-in-acp","title":"Setting Birthday in ACP","text":"<p>To set the birthday of a person, we only have to add another form field with an event listener:</p> files/lib/system/event/listener/BirthdayPersonAddFormListener.class.php <pre><code>&lt;?php\n\nnamespace wcf\\system\\event\\listener;\n\nuse wcf\\acp\\form\\PersonAddForm;\nuse wcf\\form\\AbstractFormBuilderForm;\nuse wcf\\system\\form\\builder\\container\\FormContainer;\nuse wcf\\system\\form\\builder\\field\\DateFormField;\n\n/**\n * Handles setting the birthday when adding and editing people.\n *\n * @author  Matthias Schmidt\n * @copyright   2001-2022 WoltLab GmbH\n * @license GNU Lesser General Public License &lt;http://opensource.org/licenses/lgpl-license.php&gt;\n * @package WoltLabSuite\\Core\\System\\Event\\Listener\n */\nfinal class BirthdayPersonAddFormListener extends AbstractEventListener\n{\n    /**\n     * @see AbstractFormBuilderForm::createForm()\n     */\n    protected function onCreateForm(PersonAddForm $form): void\n    {\n        $dataContainer = $form-&gt;form-&gt;getNodeById('data');\n        \\assert($dataContainer instanceof FormContainer);\n        $dataContainer-&gt;appendChild(\n            DateFormField::create('birthday')\n                -&gt;label('wcf.person.birthday')\n                -&gt;saveValueFormat('Y-m-d')\n                -&gt;nullable()\n        );\n    }\n}\n</code></pre> <p>registered via</p> <pre><code>&lt;eventlistener name=\"createForm@wcf\\acp\\form\\PersonAddForm\"&gt;\n&lt;environment&gt;admin&lt;/environment&gt;\n&lt;eventclassname&gt;wcf\\acp\\form\\PersonAddForm&lt;/eventclassname&gt;\n&lt;eventname&gt;createForm&lt;/eventname&gt;\n&lt;listenerclassname&gt;wcf\\system\\event\\listener\\BirthdayPersonAddFormListener&lt;/listenerclassname&gt;\n&lt;inherit&gt;1&lt;/inherit&gt;\n&lt;/eventlistener&gt;\n</code></pre> <p>in <code>eventListener.xml</code>, see below.</p> <p>As <code>BirthdayPersonAddFormListener</code> extends <code>AbstractEventListener</code> and as the name of relevant event is <code>createForm</code>, <code>AbstractEventListener</code> internally automatically calls <code>onCreateForm()</code> with the event object as the parameter. It is important to set <code>&lt;inherit&gt;1&lt;/inherit&gt;</code> so that the event listener is also executed for <code>PersonEditForm</code>, which extends <code>PersonAddForm</code>.</p> <p>The language item <code>wcf.person.birthday</code> used in the label is the only new one for this package:</p> language/de.xml <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;language xmlns=\"http://www.woltlab.com\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.woltlab.com http://www.woltlab.com/XSD/5.4/language.xsd\" languagecode=\"de\"&gt;\n&lt;category name=\"wcf.person\"&gt;\n&lt;item name=\"wcf.person.birthday\"&gt;&lt;![CDATA[Geburtstag]]&gt;&lt;/item&gt;\n&lt;/category&gt;\n&lt;/language&gt;\n</code></pre> language/en.xml <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;language xmlns=\"http://www.woltlab.com\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.woltlab.com http://www.woltlab.com/XSD/5.4/language.xsd\" languagecode=\"en\"&gt;\n&lt;category name=\"wcf.person\"&gt;\n&lt;item name=\"wcf.person.birthday\"&gt;&lt;![CDATA[Birthday]]&gt;&lt;/item&gt;\n&lt;/category&gt;\n&lt;/language&gt;\n</code></pre>"},{"location":"tutorial/series/part_2/#adding-birthday-table-column-in-acp","title":"Adding Birthday Table Column in ACP","text":"<p>To add a birthday column to the person list page in the ACP, we need three parts:</p> <ol> <li>an event listener that makes the <code>birthday</code> database table column a valid sort field,</li> <li>a template listener that adds the birthday column to the table\u2019s head, and</li> <li>a template listener that adds the birthday column to the table\u2019s rows.</li> </ol> <p>The first part is a very simple class:</p> files/lib/system/event/listener/BirthdaySortFieldPersonListPageListener.class.php <pre><code>&lt;?php\n\nnamespace wcf\\system\\event\\listener;\n\nuse wcf\\page\\SortablePage;\n\n/**\n * Makes people's birthday a valid sort field in the ACP and the front end.\n *\n * @author  Matthias Schmidt\n * @copyright   2001-2022 WoltLab GmbH\n * @license GNU Lesser General Public License &lt;http://opensource.org/licenses/lgpl-license.php&gt;\n * @package WoltLabSuite\\Core\\System\\Event\\Listener\n */\nfinal class BirthdaySortFieldPersonListPageListener extends AbstractEventListener\n{\n    /**\n     * @see SortablePage::validateSortField()\n     */\n    public function onValidateSortField(SortablePage $page): void\n    {\n        $page-&gt;validSortFields[] = 'birthday';\n    }\n}\n</code></pre> <p>We use <code>SortablePage</code> as a type hint instead of <code>wcf\\acp\\page\\PersonListPage</code> because we will be using the same event listener class in the front end to also allow sorting that list by birthday.</p> <p>As the relevant template codes are only one line each, we will simply put them directly in the <code>templateListener.xml</code> file that will be shown later on. The code for the table head is similar to the other <code>th</code> elements:</p> <pre><code>&lt;th class=\"columnDate columnBirthday{if $sortField == 'birthday'} active {$sortOrder}{/if}\"&gt;&lt;a href=\"{link controller='PersonList'}pageNo={@$pageNo}&amp;sortField=birthday&amp;sortOrder={if $sortField == 'birthday' &amp;&amp; $sortOrder == 'ASC'}DESC{else}ASC{/if}{/link}\"&gt;{lang}wcf.person.birthday{/lang}&lt;/a&gt;&lt;/th&gt;\n</code></pre> <p>For the table body\u2019s column, we need to make sure that the birthday is only show if it is actually set:</p> <pre><code>&lt;td class=\"columnDate columnBirthday\"&gt;{if $person-&gt;birthday}{@$person-&gt;birthday|strtotime|date}{/if}&lt;/td&gt;\n</code></pre>"},{"location":"tutorial/series/part_2/#adding-birthday-in-front-end","title":"Adding Birthday in Front End","text":"<p>In the front end, we also want to make the list sortable by birthday and show the birthday as part of each person\u2019s \u201cstatistics\u201d.</p> <p>To add the birthday as a valid sort field, we use <code>BirthdaySortFieldPersonListPageListener</code> just as in the ACP. In the front end, we will now use a template (<code>__personListBirthdaySortField.tpl</code>) instead of a directly putting the template code in the <code>templateListener.xml</code> file:</p> templates/__personListBirthdaySortField.tpl <pre><code>&lt;option value=\"birthday\"{if $sortField == 'birthday'} selected{/if}&gt;{lang}wcf.person.birthday{/lang}&lt;/option&gt;\n</code></pre> <p>You might have noticed the two underscores at the beginning of the template file. For templates that are included via template listeners, this is the naming convention we use.</p> <p>Putting the template code into a file has the advantage that in the administrator is able to edit the code directly via a custom template group, even though in this case this might not be very probable.</p> <p>To show the birthday, we use the following template code for the <code>personStatistics</code> template event, which again makes sure that the birthday is only shown if it is actually set:</p> templates/__personListBirthday.tpl <pre><code>{if $person-&gt;birthday}\n    &lt;dt&gt;{lang}wcf.person.birthday{/lang}&lt;/dt&gt;\n    &lt;dd&gt;{@$person-&gt;birthday|strtotime|date}&lt;/dd&gt;\n{/if}\n</code></pre>"},{"location":"tutorial/series/part_2/#templatelistenerxml","title":"<code>templateListener.xml</code>","text":"<p>The following code shows the <code>templateListener.xml</code> file used to install all mentioned template listeners:</p> templateListener.xml <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;data xmlns=\"http://www.woltlab.com\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.woltlab.com http://www.woltlab.com/tornado/5.4/templateListener.xsd\"&gt;\n&lt;import&gt;\n&lt;!-- admin --&gt;\n&lt;templatelistener name=\"personListBirthdayColumnHead\"&gt;\n&lt;eventname&gt;columnHeads&lt;/eventname&gt;\n&lt;environment&gt;admin&lt;/environment&gt;\n&lt;templatecode&gt;&lt;![CDATA[&lt;th class=\"columnDate columnBirthday{if $sortField == 'birthday'} active {@$sortOrder}{/if}\"&gt;&lt;a href=\"{link controller='PersonList'}pageNo={@$pageNo}&amp;sortField=birthday&amp;sortOrder={if $sortField == 'birthday' &amp;&amp; $sortOrder == 'ASC'}DESC{else}ASC{/if}{/link}\"&gt;{lang}wcf.person.birthday{/lang}&lt;/a&gt;&lt;/th&gt;]]&gt;&lt;/templatecode&gt;\n&lt;templatename&gt;personList&lt;/templatename&gt;\n&lt;/templatelistener&gt;\n&lt;templatelistener name=\"personListBirthdayColumn\"&gt;\n&lt;eventname&gt;columns&lt;/eventname&gt;\n&lt;environment&gt;admin&lt;/environment&gt;\n&lt;templatecode&gt;&lt;![CDATA[&lt;td class=\"columnDate columnBirthday\"&gt;{if $person-&gt;birthday}{@$person-&gt;birthday|strtotime|date}{/if}&lt;/td&gt;]]&gt;&lt;/templatecode&gt;\n&lt;templatename&gt;personList&lt;/templatename&gt;\n&lt;/templatelistener&gt;\n&lt;!-- /admin --&gt;\n\n&lt;!-- user --&gt;\n&lt;templatelistener name=\"personListBirthday\"&gt;\n&lt;eventname&gt;personStatistics&lt;/eventname&gt;\n&lt;environment&gt;user&lt;/environment&gt;\n&lt;templatecode&gt;&lt;![CDATA[{include file='__personListBirthday'}]]&gt;&lt;/templatecode&gt;\n&lt;templatename&gt;personList&lt;/templatename&gt;\n&lt;/templatelistener&gt;\n&lt;templatelistener name=\"personListBirthdaySortField\"&gt;\n&lt;eventname&gt;sortField&lt;/eventname&gt;\n&lt;environment&gt;user&lt;/environment&gt;\n&lt;templatecode&gt;&lt;![CDATA[{include file='__personListBirthdaySortField'}]]&gt;&lt;/templatecode&gt;\n&lt;templatename&gt;personList&lt;/templatename&gt;\n&lt;/templatelistener&gt;\n&lt;!-- /user --&gt;\n&lt;/import&gt;\n&lt;/data&gt;\n</code></pre> <p>In cases where a template is used, we simply use the <code>include</code> syntax to load the template.</p>"},{"location":"tutorial/series/part_2/#eventlistenerxml","title":"<code>eventListener.xml</code>","text":"<p>There are two event listeners that make <code>birthday</code> a valid sort field in the ACP and the front end, respectively, and the third event listener takes care of setting the birthday.</p> eventListener.xml <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;data xmlns=\"http://www.woltlab.com\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.woltlab.com http://www.woltlab.com/XSD/5.4/eventListener.xsd\"&gt;\n&lt;import&gt;\n&lt;!-- admin --&gt;\n&lt;eventlistener name=\"validateSortField@wcf\\acp\\page\\PersonListPage\"&gt;\n&lt;environment&gt;admin&lt;/environment&gt;\n&lt;eventclassname&gt;wcf\\acp\\page\\PersonListPage&lt;/eventclassname&gt;\n&lt;eventname&gt;validateSortField&lt;/eventname&gt;\n&lt;listenerclassname&gt;wcf\\system\\event\\listener\\BirthdaySortFieldPersonListPageListener&lt;/listenerclassname&gt;\n&lt;/eventlistener&gt;\n&lt;eventlistener name=\"createForm@wcf\\acp\\form\\PersonAddForm\"&gt;\n&lt;environment&gt;admin&lt;/environment&gt;\n&lt;eventclassname&gt;wcf\\acp\\form\\PersonAddForm&lt;/eventclassname&gt;\n&lt;eventname&gt;createForm&lt;/eventname&gt;\n&lt;listenerclassname&gt;wcf\\system\\event\\listener\\BirthdayPersonAddFormListener&lt;/listenerclassname&gt;\n&lt;inherit&gt;1&lt;/inherit&gt;\n&lt;/eventlistener&gt;\n&lt;!-- /admin --&gt;\n\n&lt;!-- user --&gt;\n&lt;eventlistener name=\"validateSortField@wcf\\page\\PersonListPage\"&gt;\n&lt;environment&gt;user&lt;/environment&gt;\n&lt;eventclassname&gt;wcf\\page\\PersonListPage&lt;/eventclassname&gt;\n&lt;eventname&gt;validateSortField&lt;/eventname&gt;\n&lt;listenerclassname&gt;wcf\\system\\event\\listener\\BirthdaySortFieldPersonListPageListener&lt;/listenerclassname&gt;\n&lt;/eventlistener&gt;\n&lt;!-- /user --&gt;\n&lt;/import&gt;\n&lt;/data&gt;\n</code></pre>"},{"location":"tutorial/series/part_2/#packagexml","title":"<code>package.xml</code>","text":"<p>The only relevant difference between the <code>package.xml</code> file of the base page from part 1 and the <code>package.xml</code> file of this package is that this package requires the base package <code>com.woltlab.wcf.people</code> (see <code>&lt;requiredpackages&gt;</code>):</p> package.xml <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;package name=\"com.woltlab.wcf.people.birthday\" xmlns=\"http://www.woltlab.com\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.woltlab.com http://www.woltlab.com/XSD/5.4/package.xsd\"&gt;\n&lt;packageinformation&gt;\n&lt;packagename&gt;WoltLab Suite Core Tutorial: People (Birthday)&lt;/packagename&gt;\n&lt;packagedescription&gt;Adds a birthday field to the people management system as part of a tutorial to create packages.&lt;/packagedescription&gt;\n&lt;version&gt;5.4.0&lt;/version&gt;\n&lt;date&gt;2022-01-17&lt;/date&gt;\n&lt;/packageinformation&gt;\n\n&lt;authorinformation&gt;\n&lt;author&gt;WoltLab GmbH&lt;/author&gt;\n&lt;authorurl&gt;http://www.woltlab.com&lt;/authorurl&gt;\n&lt;/authorinformation&gt;\n\n&lt;requiredpackages&gt;\n&lt;requiredpackage minversion=\"5.4.10\"&gt;com.woltlab.wcf&lt;/requiredpackage&gt;\n&lt;requiredpackage minversion=\"5.4.0\"&gt;com.woltlab.wcf.people&lt;/requiredpackage&gt;\n&lt;/requiredpackages&gt;\n\n&lt;excludedpackages&gt;\n&lt;excludedpackage version=\"6.0.0 Alpha 1\"&gt;com.woltlab.wcf&lt;/excludedpackage&gt;\n&lt;/excludedpackages&gt;\n\n&lt;instructions type=\"install\"&gt;\n&lt;instruction type=\"file\" /&gt;\n&lt;instruction type=\"database\"&gt;acp/database/install_com.woltlab.wcf.people.birthday.php&lt;/instruction&gt;\n&lt;instruction type=\"template\" /&gt;\n&lt;instruction type=\"language\" /&gt;\n\n&lt;instruction type=\"eventListener\" /&gt;\n&lt;instruction type=\"templateListener\" /&gt;\n&lt;/instructions&gt;\n&lt;/package&gt;\n</code></pre> <p>This concludes the second part of our tutorial series after which you now have extended the base package using event listeners and template listeners that allow you to enter the birthday of the people.</p> <p>The complete source code of this part can be found on GitHub.</p>"},{"location":"tutorial/series/part_3/","title":"Part 3: Person Page and Comments","text":"<p>In this part of our tutorial series, we will add a new front end page to our package that is dedicated to each person and shows their personal details. To make good use of this new page and introduce a new API of WoltLab Suite, we will add the opportunity for users to comment on the person using WoltLab Suite\u2019s reusable comment functionality.</p>"},{"location":"tutorial/series/part_3/#package-functionality","title":"Package Functionality","text":"<p>In addition to the existing functions from part 1, the package will provide the following possibilities/functions after this part of the tutorial:</p> <ul> <li>Details page for each person linked in the front end person list</li> <li>Comment on people on their respective page (can be disabled per person)</li> <li>User online location for person details page with name and link to person details page</li> <li>Create menu items linking to specific person details pages</li> </ul>"},{"location":"tutorial/series/part_3/#used-components","title":"Used Components","text":"<p>In addition to the components used in part 1, we will use the objectType package installation plugin, use the comment API, create a runtime cache, and create a page handler.</p>"},{"location":"tutorial/series/part_3/#package-structure","title":"Package Structure","text":"<p>The complete package will have the following file structure (including the files from part 1):</p> <pre><code>\u251c\u2500\u2500 acpMenu.xml\n\u251c\u2500\u2500 acptemplates\n\u2502   \u251c\u2500\u2500 personAdd.tpl\n\u2502   \u2514\u2500\u2500 personList.tpl\n\u251c\u2500\u2500 files\n\u2502   \u251c\u2500\u2500 acp\n\u2502   \u2502   \u2514\u2500\u2500 database\n\u2502   \u2502       \u2514\u2500\u2500 install_com.woltlab.wcf.people.php\n\u2502   \u2514\u2500\u2500 lib\n\u2502       \u251c\u2500\u2500 acp\n\u2502       \u2502   \u251c\u2500\u2500 form\n\u2502       \u2502   \u2502   \u251c\u2500\u2500 PersonAddForm.class.php\n\u2502       \u2502   \u2502   \u2514\u2500\u2500 PersonEditForm.class.php\n\u2502       \u2502   \u2514\u2500\u2500 page\n\u2502       \u2502       \u2514\u2500\u2500 PersonListPage.class.php\n\u2502       \u251c\u2500\u2500 data\n\u2502       \u2502   \u2514\u2500\u2500 person\n\u2502       \u2502       \u251c\u2500\u2500 Person.class.php\n\u2502       \u2502       \u251c\u2500\u2500 PersonAction.class.php\n\u2502       \u2502       \u251c\u2500\u2500 PersonEditor.class.php\n\u2502       \u2502       \u2514\u2500\u2500 PersonList.class.php\n\u2502       \u251c\u2500\u2500 page\n\u2502       \u2502   \u251c\u2500\u2500 PersonListPage.class.php\n\u2502       \u2502   \u2514\u2500\u2500 PersonPage.class.php\n\u2502       \u2514\u2500\u2500 system\n\u2502           \u251c\u2500\u2500 cache\n\u2502           \u2502   \u2514\u2500\u2500 runtime\n\u2502           \u2502       \u2514\u2500\u2500 PersonRuntimeCache.class.php\n\u2502           \u251c\u2500\u2500 comment\n\u2502           \u2502   \u2514\u2500\u2500 manager\n\u2502           \u2502       \u2514\u2500\u2500 PersonCommentManager.class.php\n\u2502           \u2514\u2500\u2500 page\n\u2502               \u2514\u2500\u2500 handler\n\u2502                   \u2514\u2500\u2500 PersonPageHandler.class.php\n\u251c\u2500\u2500 language\n\u2502   \u251c\u2500\u2500 de.xml\n\u2502   \u2514\u2500\u2500 en.xml\n\u251c\u2500\u2500 menuItem.xml\n\u251c\u2500\u2500 objectType.xml\n\u251c\u2500\u2500 package.xml\n\u251c\u2500\u2500 page.xml\n\u251c\u2500\u2500 templates\n\u2502   \u251c\u2500\u2500 person.tpl\n\u2502   \u2514\u2500\u2500 personList.tpl\n\u2514\u2500\u2500 userGroupOption.xml\n</code></pre> <p>We will not mention every code change between the first part and this part, as we only want to focus on the important, new parts of the code. For example, there is a new <code>Person::getLink()</code> method and new language items have been added. For all changes, please refer to the source code on GitHub.</p>"},{"location":"tutorial/series/part_3/#runtime-cache","title":"Runtime Cache","text":"<p>To reduce the number of database queries when different APIs require person objects, we implement a runtime cache for people:</p> files/lib/system/cache/runtime/PersonRuntimeCache.class.php <pre><code>&lt;?php\n\nnamespace wcf\\system\\cache\\runtime;\n\nuse wcf\\data\\person\\Person;\nuse wcf\\data\\person\\PersonList;\n\n/**\n * Runtime cache implementation for people.\n *\n * @author  Matthias Schmidt\n * @copyright   2001-2022 WoltLab GmbH\n * @license GNU Lesser General Public License &lt;http://opensource.org/licenses/lgpl-license.php&gt;\n * @package WoltLabSuite\\Core\\System\\Cache\\Runtime\n *\n * @method  Person[]    getCachedObjects()\n * @method  Person      getObject($objectID)\n * @method  Person[]    getObjects(array $objectIDs)\n */\nfinal class PersonRuntimeCache extends AbstractRuntimeCache\n{\n    /**\n     * @inheritDoc\n     */\n    protected $listClassName = PersonList::class;\n}\n</code></pre>"},{"location":"tutorial/series/part_3/#comments","title":"Comments","text":"<p>To allow users to comment on people, we need to tell the system that people support comments. This is done by registering a <code>com.woltlab.wcf.comment.commentableContent</code> object type whose processor implements ICommentManager:</p> objectType.xml <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;data xmlns=\"http://www.woltlab.com\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.woltlab.com http://www.woltlab.com/XSD/5.4/objectType.xsd\"&gt;\n&lt;import&gt;\n&lt;type&gt;\n&lt;name&gt;com.woltlab.wcf.person.personComment&lt;/name&gt;\n&lt;definitionname&gt;com.woltlab.wcf.comment.commentableContent&lt;/definitionname&gt;\n&lt;classname&gt;wcf\\system\\comment\\manager\\PersonCommentManager&lt;/classname&gt;\n&lt;/type&gt;\n&lt;/import&gt;\n&lt;/data&gt;\n</code></pre> <p>The <code>PersonCommentManager</code> class extended <code>ICommentManager</code>\u2019s default implementation AbstractCommentManager:</p> files/lib/system/comment/manager/PersonCommentManager.class.php <pre><code>&lt;?php\n\nnamespace wcf\\system\\comment\\manager;\n\nuse wcf\\data\\person\\Person;\nuse wcf\\data\\person\\PersonEditor;\nuse wcf\\system\\cache\\runtime\\PersonRuntimeCache;\nuse wcf\\system\\WCF;\n\n/**\n * Comment manager implementation for people.\n *\n * @author  Matthias Schmidt\n * @copyright   2001-2022 WoltLab GmbH\n * @license GNU Lesser General Public License &lt;http://opensource.org/licenses/lgpl-license.php&gt;\n * @package WoltLabSuite\\Core\\System\\Comment\\Manager\n */\nfinal class PersonCommentManager extends AbstractCommentManager\n{\n    /**\n     * @inheritDoc\n     */\n    protected $permissionAdd = 'user.person.canAddComment';\n\n    /**\n     * @inheritDoc\n     */\n    protected $permissionAddWithoutModeration = 'user.person.canAddCommentWithoutModeration';\n\n    /**\n     * @inheritDoc\n     */\n    protected $permissionCanModerate = 'mod.person.canModerateComment';\n\n    /**\n     * @inheritDoc\n     */\n    protected $permissionDelete = 'user.person.canDeleteComment';\n\n    /**\n     * @inheritDoc\n     */\n    protected $permissionEdit = 'user.person.canEditComment';\n\n    /**\n     * @inheritDoc\n     */\n    protected $permissionModDelete = 'mod.person.canDeleteComment';\n\n    /**\n     * @inheritDoc\n     */\n    protected $permissionModEdit = 'mod.person.canEditComment';\n\n    /**\n     * @inheritDoc\n     */\n    public function getLink($objectTypeID, $objectID)\n    {\n        return PersonRuntimeCache::getInstance()-&gt;getObject($objectID)-&gt;getLink();\n    }\n\n    /**\n     * @inheritDoc\n     */\n    public function isAccessible($objectID, $validateWritePermission = false)\n    {\n        return PersonRuntimeCache::getInstance()-&gt;getObject($objectID) !== null;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    public function getTitle($objectTypeID, $objectID, $isResponse = false)\n    {\n        if ($isResponse) {\n            return WCF::getLanguage()-&gt;get('wcf.person.commentResponse');\n        }\n\n        return WCF::getLanguage()-&gt;getDynamicVariable('wcf.person.comment');\n    }\n\n    /**\n     * @inheritDoc\n     */\n    public function updateCounter($objectID, $value)\n    {\n        (new PersonEditor(new Person($objectID)))-&gt;updateCounters(['comments' =&gt; $value]);\n    }\n}\n</code></pre> <ul> <li>First, the system is told the names of the permissions via the <code>$permission*</code> properties.   More information about comment permissions can be found here.</li> <li>The <code>getLink()</code> method returns the link to the person with the passed comment id.   As in <code>isAccessible()</code>, <code>PersonRuntimeCache</code> is used to potentially save database queries.</li> <li>The <code>isAccessible()</code> method checks if the active user can access the relevant person.   As we do not have any special restrictions for accessing people, we only need to check if the person exists.</li> <li>The <code>getTitle()</code> method returns the title used for comments and responses, which is just a generic language item in this case.</li> <li>The <code>updateCounter()</code> updates the comments\u2019 counter of the person.   We have added a new <code>comments</code> database table column to the <code>wcf1_person</code> database table in order to keep track on the number of comments.</li> </ul> <p>Additionally, we have added a new <code>enableComments</code> database table column to the <code>wcf1_person</code> database table whose value can be set when creating or editing a person in the ACP. With this option, comments on individual people can be disabled.</p> <p>Liking comments is already built-in and only requires some extra code in the <code>PersonPage</code> class for showing the likes of pre-loaded comments.</p>"},{"location":"tutorial/series/part_3/#person-page","title":"Person Page","text":""},{"location":"tutorial/series/part_3/#personpage","title":"<code>PersonPage</code>","text":"files/lib/page/PersonPage.class.php <pre><code>&lt;?php\n\nnamespace wcf\\page;\n\nuse wcf\\data\\comment\\StructuredCommentList;\nuse wcf\\data\\person\\Person;\nuse wcf\\system\\comment\\CommentHandler;\nuse wcf\\system\\comment\\manager\\PersonCommentManager;\nuse wcf\\system\\exception\\IllegalLinkException;\nuse wcf\\system\\WCF;\n\n/**\n * Shows the details of a certain person.\n *\n * @author  Matthias Schmidt\n * @copyright   2001-2021 WoltLab GmbH\n * @license GNU Lesser General Public License &lt;http://opensource.org/licenses/lgpl-license.php&gt;\n * @package WoltLabSuite\\Core\\Page\n */\nclass PersonPage extends AbstractPage\n{\n    /**\n     * list of comments\n     * @var StructuredCommentList\n     */\n    public $commentList;\n\n    /**\n     * person comment manager object\n     * @var PersonCommentManager\n     */\n    public $commentManager;\n\n    /**\n     * id of the person comment object type\n     * @var int\n     */\n    public $commentObjectTypeID = 0;\n\n    /**\n     * shown person\n     * @var Person\n     */\n    public $person;\n\n    /**\n     * id of the shown person\n     * @var int\n     */\n    public $personID = 0;\n\n    /**\n     * @inheritDoc\n     */\n    public function assignVariables()\n    {\n        parent::assignVariables();\n\n        WCF::getTPL()-&gt;assign([\n            'commentCanAdd' =&gt; WCF::getSession()-&gt;getPermission('user.person.canAddComment'),\n            'commentList' =&gt; $this-&gt;commentList,\n            'commentObjectTypeID' =&gt; $this-&gt;commentObjectTypeID,\n            'lastCommentTime' =&gt; $this-&gt;commentList ? $this-&gt;commentList-&gt;getMinCommentTime() : 0,\n            'likeData' =&gt; MODULE_LIKE &amp;&amp; $this-&gt;commentList ? $this-&gt;commentList-&gt;getLikeData() : [],\n            'person' =&gt; $this-&gt;person,\n        ]);\n    }\n\n    /**\n     * @inheritDoc\n     */\n    public function readData()\n    {\n        parent::readData();\n\n        if ($this-&gt;person-&gt;enableComments) {\n            $this-&gt;commentObjectTypeID = CommentHandler::getInstance()-&gt;getObjectTypeID(\n                'com.woltlab.wcf.person.personComment'\n            );\n            $this-&gt;commentManager = CommentHandler::getInstance()-&gt;getObjectType(\n                $this-&gt;commentObjectTypeID\n            )-&gt;getProcessor();\n            $this-&gt;commentList = CommentHandler::getInstance()-&gt;getCommentList(\n                $this-&gt;commentManager,\n                $this-&gt;commentObjectTypeID,\n                $this-&gt;person-&gt;personID\n            );\n        }\n    }\n\n    /**\n     * @inheritDoc\n     */\n    public function readParameters()\n    {\n        parent::readParameters();\n\n        if (isset($_REQUEST['id'])) {\n            $this-&gt;personID = \\intval($_REQUEST['id']);\n        }\n        $this-&gt;person = new Person($this-&gt;personID);\n        if (!$this-&gt;person-&gt;personID) {\n            throw new IllegalLinkException();\n        }\n    }\n}\n</code></pre> <p>The <code>PersonPage</code> class is similar to the <code>PersonEditForm</code> in the ACP in that it reads the id of the requested person from the request data and validates the id in <code>readParameters()</code>. The rest of the code only handles fetching the list of comments on the requested person. In <code>readData()</code>, this list is fetched using <code>CommentHandler::getCommentList()</code> if comments are enabled for the person. The <code>assignVariables()</code> method assigns some additional template variables like <code>$commentCanAdd</code>, which is <code>1</code> if the active person can add comments and is <code>0</code> otherwise, <code>$lastCommentTime</code>, which contains the UNIX timestamp of the last comment, and <code>$likeData</code>, which contains data related to the likes for the disabled comments.</p>"},{"location":"tutorial/series/part_3/#persontpl","title":"<code>person.tpl</code>","text":"templates/person.tpl <pre><code>{capture assign='pageTitle'}{$person} - {lang}wcf.person.list{/lang}{/capture}\n\n{capture assign='contentTitle'}{$person}{/capture}\n\n{include file='header'}\n\n{if $person-&gt;enableComments}\n    {if $commentList|count || $commentCanAdd}\n        &lt;section id=\"comments\" class=\"section sectionContainerList\"&gt;\n            &lt;header class=\"sectionHeader\"&gt;\n                &lt;h2 class=\"sectionTitle\"&gt;\n                    {lang}wcf.person.comments{/lang}\n                    {if $person-&gt;comments}&lt;span class=\"badge\"&gt;{#$person-&gt;comments}&lt;/span&gt;{/if}\n                &lt;/h2&gt;\n            &lt;/header&gt;\n\n            {include file='__commentJavaScript' commentContainerID='personCommentList'}\n\n            &lt;div class=\"personComments\"&gt;\n                &lt;ul id=\"personCommentList\" class=\"commentList containerList\" {*\n                    *}data-can-add=\"{if $commentCanAdd}true{else}false{/if}\" {*\n                    *}data-object-id=\"{@$person-&gt;personID}\" {*\n                    *}data-object-type-id=\"{@$commentObjectTypeID}\" {*\n                    *}data-comments=\"{if $person-&gt;comments}{@$commentList-&gt;countObjects()}{else}0{/if}\" {*\n                    *}data-last-comment-time=\"{@$lastCommentTime}\" {*\n                *}&gt;\n                    {include file='commentListAddComment' wysiwygSelector='personCommentListAddComment'}\n                    {include file='commentList'}\n                &lt;/ul&gt;\n            &lt;/div&gt;\n        &lt;/section&gt;\n    {/if}\n{/if}\n\n&lt;footer class=\"contentFooter\"&gt;\n    {hascontent}\n        &lt;nav class=\"contentFooterNavigation\"&gt;\n            &lt;ul&gt;\n                {content}{event name='contentFooterNavigation'}{/content}\n            &lt;/ul&gt;\n        &lt;/nav&gt;\n    {/hascontent}\n&lt;/footer&gt;\n\n{include file='footer'}\n</code></pre> <p>For now, the <code>person</code> template is still very empty and only shows the comments in the content area. The template code shown for comments is very generic and used in this form in many locations as it only sets the header of the comment list and the container <code>ul#personCommentList</code> element for the comments shown by <code>commentList</code> template. The <code>ul#personCommentList</code> elements has five additional <code>data-</code> attributes required by the JavaScript API for comments for loading more comments or creating new ones. The <code>commentListAddComment</code> template adds the WYSIWYG support. The attribute <code>wysiwygSelector</code> should be the id of the comment list <code>personCommentList</code> with an additional <code>AddComment</code> suffix.</p>"},{"location":"tutorial/series/part_3/#pagexml","title":"<code>page.xml</code>","text":"page.xml <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;data xmlns=\"http://www.woltlab.com\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.woltlab.com http://www.woltlab.com/XSD/5.4/page.xsd\"&gt;\n&lt;import&gt;\n&lt;page identifier=\"com.woltlab.wcf.people.PersonList\"&gt;\n&lt;pageType&gt;system&lt;/pageType&gt;\n&lt;controller&gt;wcf\\page\\PersonListPage&lt;/controller&gt;\n&lt;name language=\"de\"&gt;Personen-Liste&lt;/name&gt;\n&lt;name language=\"en\"&gt;Person List&lt;/name&gt;\n\n&lt;content language=\"de\"&gt;\n&lt;title&gt;Personen&lt;/title&gt;\n&lt;/content&gt;\n&lt;content language=\"en\"&gt;\n&lt;title&gt;People&lt;/title&gt;\n&lt;/content&gt;\n&lt;/page&gt;\n&lt;page identifier=\"com.woltlab.wcf.people.Person\"&gt;\n&lt;pageType&gt;system&lt;/pageType&gt;\n&lt;controller&gt;wcf\\page\\PersonPage&lt;/controller&gt;\n&lt;handler&gt;wcf\\system\\page\\handler\\PersonPageHandler&lt;/handler&gt;\n&lt;name language=\"de\"&gt;Person&lt;/name&gt;\n&lt;name language=\"en\"&gt;Person&lt;/name&gt;\n&lt;requireObjectID&gt;1&lt;/requireObjectID&gt;\n&lt;parent&gt;com.woltlab.wcf.people.PersonList&lt;/parent&gt;\n&lt;/page&gt;\n&lt;/import&gt;\n&lt;/data&gt;\n</code></pre> <p>The <code>page.xml</code> file has been extended for the new person page with identifier <code>com.woltlab.wcf.people.Person</code>. Compared to the pre-existing <code>com.woltlab.wcf.people.PersonList</code> page, there are four differences:</p> <ol> <li>It has a <code>&lt;handler&gt;</code> element with a class name as value.    This aspect will be discussed in more detail in the next section.</li> <li>There are no <code>&lt;content&gt;</code> elements because, both, the title and the content of the page are dynamically generated in the template.</li> <li>The <code>&lt;requireObjectID&gt;</code> tells the system that this page requires an object id to properly work, in this case a valid person id.</li> <li>This page has a <code>&lt;parent&gt;</code> page, the person list page.    In general, the details page for any type of object that is listed on a different page has the list page as its parent.</li> </ol>"},{"location":"tutorial/series/part_3/#personpagehandler","title":"<code>PersonPageHandler</code>","text":"files/lib/system/page/handler/PersonPageHandler.class.php <pre><code>&lt;?php\n\nnamespace wcf\\system\\page\\handler;\n\nuse wcf\\data\\page\\Page;\nuse wcf\\data\\person\\PersonList;\nuse wcf\\data\\user\\online\\UserOnline;\nuse wcf\\system\\cache\\runtime\\PersonRuntimeCache;\nuse wcf\\system\\database\\util\\PreparedStatementConditionBuilder;\nuse wcf\\system\\WCF;\n\n/**\n * Page handler implementation for person page.\n *\n * @author  Matthias Schmidt\n * @copyright   2001-2022 WoltLab GmbH\n * @license GNU Lesser General Public License &lt;http://opensource.org/licenses/lgpl-license.php&gt;\n * @package WoltLabSuite\\Core\\System\\Page\\Handler\n */\nfinal class PersonPageHandler extends AbstractLookupPageHandler implements IOnlineLocationPageHandler\n{\n    use TOnlineLocationPageHandler;\n\n    /**\n     * @inheritDoc\n     */\n    public function getLink($objectID)\n    {\n        return PersonRuntimeCache::getInstance()-&gt;getObject($objectID)-&gt;getLink();\n    }\n\n    /**\n     * Returns the textual description if a user is currently online viewing this page.\n     *\n     * @see IOnlineLocationPageHandler::getOnlineLocation()\n     *\n     * @param   Page        $page       visited page\n     * @param   UserOnline  $user       user online object with request data\n     * @return  string\n     */\n    public function getOnlineLocation(Page $page, UserOnline $user)\n    {\n        if ($user-&gt;pageObjectID === null) {\n            return '';\n        }\n\n        $person = PersonRuntimeCache::getInstance()-&gt;getObject($user-&gt;pageObjectID);\n        if ($person === null) {\n            return '';\n        }\n\n        return WCF::getLanguage()-&gt;getDynamicVariable('wcf.page.onlineLocation.' . $page-&gt;identifier, ['person' =&gt; $person]);\n    }\n\n    /**\n     * @inheritDoc\n     */\n    public function isValid($objectID = null)\n    {\n        return PersonRuntimeCache::getInstance()-&gt;getObject($objectID) !== null;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    public function lookup($searchString)\n    {\n        $conditionBuilder = new PreparedStatementConditionBuilder(false, 'OR');\n        $conditionBuilder-&gt;add('person.firstName LIKE ?', ['%' . $searchString . '%']);\n        $conditionBuilder-&gt;add('person.lastName LIKE ?', ['%' . $searchString . '%']);\n\n        $personList = new PersonList();\n        $personList-&gt;getConditionBuilder()-&gt;add($conditionBuilder, $conditionBuilder-&gt;getParameters());\n        $personList-&gt;readObjects();\n\n        $results = [];\n        foreach ($personList as $person) {\n            $results[] = [\n                'image' =&gt; 'fa-user',\n                'link' =&gt; $person-&gt;getLink(),\n                'objectID' =&gt; $person-&gt;personID,\n                'title' =&gt; $person-&gt;getTitle(),\n            ];\n        }\n\n        return $results;\n    }\n\n    /**\n     * Prepares fetching all necessary data for the textual description if a user is currently online\n     * viewing this page.\n     *\n     * @see IOnlineLocationPageHandler::prepareOnlineLocation()\n     *\n     * @param   Page        $page       visited page\n     * @param   UserOnline  $user       user online object with request data\n     */\n    public function prepareOnlineLocation(Page $page, UserOnline $user)\n    {\n        if ($user-&gt;pageObjectID !== null) {\n            PersonRuntimeCache::getInstance()-&gt;cacheObjectID($user-&gt;pageObjectID);\n        }\n    }\n}\n</code></pre> <p>Like any page handler, the <code>PersonPageHandler</code> class has to implement the IMenuPageHandler interface, which should be done by extending the AbstractMenuPageHandler class. As we want  administrators to link to specific people in menus, for example, we have to also implement the ILookupPageHandler interface by extending the AbstractLookupPageHandler class.</p> <p>For the <code>ILookupPageHandler</code> interface, we need to implement three methods:</p> <ol> <li><code>getLink($objectID)</code> returns the link to the person page with the given id.    In this case, we simply delegate this method call to the <code>Person</code> object returned by <code>PersonRuntimeCache::getObject()</code>.</li> <li><code>isValid($objectID)</code> returns <code>true</code> if the person with the given id exists, otherwise <code>false</code>.    Here, we use <code>PersonRuntimeCache::getObject()</code> again and check if the return value is <code>null</code>, which is the case for non-existing people.</li> <li><code>lookup($searchString)</code> is used when setting up an internal link and when searching for the linked person.    This method simply searches the first and last name of the people and returns an array with the person data.    While the <code>link</code>, the <code>objectID</code>, and the <code>title</code> element are self-explanatory, the <code>image</code> element can either contain an HTML <code>&lt;img&gt;</code> tag, which is displayed next to the search result (WoltLab Suite uses an image tag for users showing their avatar, for example), or a FontAwesome icon class (starting with <code>fa-</code>).</li> </ol> <p>Additionally, the class also implements IOnlineLocationPageHandler which is used to determine the online location of users. To ensure upwards-compatibility if the <code>IOnlineLocationPageHandler</code> interface changes, the TOnlineLocationPageHandler trait is used. The <code>IOnlineLocationPageHandler</code> interface requires two methods to be implemented:</p> <ol> <li><code>getOnlineLocation(Page $page, UserOnline $user)</code> returns the textual description of the online location.    The language item for the user online locations should use the pattern <code>wcf.page.onlineLocation.{page identifier}</code>.</li> <li><code>prepareOnlineLocation(Page $page, UserOnline $user)</code> is called for each user online before the <code>getOnlineLocation()</code> calls.    In this case, calling <code>prepareOnlineLocation()</code> first enables us to add all relevant person ids to the person runtime cache so that for all <code>getOnlineLocation()</code> calls combined, only one database query is necessary to fetch all person objects.</li> </ol> <p>This concludes the third part of our tutorial series after which each person has a dedicated page on which people can comment on the person.</p> <p>The complete source code of this part can be found on GitHub.</p>"},{"location":"tutorial/series/part_4/","title":"Part 4: Box and Box Conditions","text":"<p>In this part of our tutorial series, we add support for creating boxes listing people.</p>"},{"location":"tutorial/series/part_4/#package-functionality","title":"Package Functionality","text":"<p>In addition to the existing functions from part 3, the package will provide the following functionality after this part of the tutorial:</p> <ul> <li>Creating boxes dynamically listing people</li> <li>Filtering the people listed in boxes using conditions</li> </ul>"},{"location":"tutorial/series/part_4/#used-components","title":"Used Components","text":"<p>In addition to the components used in previous parts, we will use the <code>objectTypeDefinition</code> package installation plugin and use the box and condition APIs.</p> <p>To pre-install a specific person list box, we refer to the documentation of the <code>box</code> package installation plugin.</p>"},{"location":"tutorial/series/part_4/#package-structure","title":"Package Structure","text":"<p>The complete package will have the following file structure (excluding unchanged files from part 3):</p> <pre><code>\u251c\u2500\u2500 files\n\u2502   \u2514\u2500\u2500 lib\n\u2502       \u2514\u2500\u2500 system\n\u2502           \u251c\u2500\u2500 box\n\u2502           \u2502   \u2514\u2500\u2500 PersonListBoxController.class.php\n\u2502           \u2514\u2500\u2500 condition\n\u2502               \u2514\u2500\u2500 person\n\u2502                   \u251c\u2500\u2500 PersonFirstNameTextPropertyCondition.class.php\n\u2502                   \u2514\u2500\u2500 PersonLastNameTextPropertyCondition.class.php\n\u251c\u2500\u2500 language\n\u2502   \u251c\u2500\u2500 de.xml\n\u2502   \u2514\u2500\u2500 en.xml\n\u251c\u2500\u2500 objectType.xml\n\u251c\u2500\u2500 objectTypeDefinition.xml\n\u2514\u2500\u2500 templates\n    \u2514\u2500\u2500 boxPersonList.tpl\n</code></pre> <p>For all changes, please refer to the source code on GitHub.</p>"},{"location":"tutorial/series/part_4/#box-controller","title":"Box Controller","text":"<p>In addition to static boxes with fixed contents, administrators are able to create dynamic boxes with contents from the database. In our case here, we want administrators to be able to create boxes listing people. To do so, we first have to register a new object type for this person list box controller for the object type definition <code>com.woltlab.wcf.boxController</code>:</p> <pre><code>&lt;type&gt;\n&lt;name&gt;com.woltlab.wcf.personList&lt;/name&gt;\n&lt;definitionname&gt;com.woltlab.wcf.boxController&lt;/definitionname&gt;\n&lt;classname&gt;wcf\\system\\box\\PersonListBoxController&lt;/classname&gt;\n&lt;/type&gt;\n</code></pre> <p>The <code>com.woltlab.wcf.boxController</code> object type definition requires the provided class to implement <code>wcf\\system\\box\\IBoxController</code>:</p> files/lib/system/box/PersonListBoxController.class.php <pre><code>&lt;?php\n\nnamespace wcf\\system\\box;\n\nuse wcf\\data\\person\\PersonList;\nuse wcf\\system\\WCF;\n\n/**\n * Dynamic box controller implementation for a list of persons.\n *\n * @author  Matthias Schmidt\n * @copyright   2001-2022 WoltLab GmbH\n * @license GNU Lesser General Public License &lt;http://opensource.org/licenses/lgpl-license.php&gt;\n * @package WoltLabSuite\\Core\\System\\Box\n */\nfinal class PersonListBoxController extends AbstractDatabaseObjectListBoxController\n{\n    /**\n     * @inheritDoc\n     */\n    protected $conditionDefinition = 'com.woltlab.wcf.box.personList.condition';\n\n    /**\n     * @inheritDoc\n     */\n    public $defaultLimit = 5;\n\n    /**\n     * @inheritDoc\n     */\n    protected $sortFieldLanguageItemPrefix = 'wcf.person';\n\n    /**\n     * @inheritDoc\n     */\n    protected static $supportedPositions = [\n        'sidebarLeft',\n        'sidebarRight',\n    ];\n\n    /**\n     * @inheritDoc\n     */\n    public $validSortFields = [\n        'firstName',\n        'lastName',\n        'comments',\n    ];\n\n    /**\n     * @inheritDoc\n     */\n    protected function getObjectList()\n    {\n        return new PersonList();\n    }\n\n    /**\n     * @inheritDoc\n     */\n    protected function getTemplate()\n    {\n        return WCF::getTPL()-&gt;fetch('boxPersonList', 'wcf', [\n            'boxPersonList' =&gt; $this-&gt;objectList,\n            'boxSortField' =&gt; $this-&gt;sortField,\n            'boxPosition' =&gt; $this-&gt;box-&gt;position,\n        ], true);\n    }\n}\n</code></pre> <p>By extending <code>AbstractDatabaseObjectListBoxController</code>, we only have to provide minimal data ourself and rely mostly on the default implementation provided by <code>AbstractDatabaseObjectListBoxController</code>:</p> <ol> <li>As we will support conditions for the listed people, we have to set the relevant condition definition via <code>$conditionDefinition</code>.</li> <li><code>AbstractDatabaseObjectListBoxController</code> already supports restricting the number of listed objects.    To do so, you only have to specify the default number of listed objects via <code>$defaultLimit</code>.</li> <li><code>AbstractDatabaseObjectListBoxController</code> also supports setting the sort order of the listed objects.    You have to provide the supported sort fields via <code>$validSortFields</code> and specify the prefix used for the language items of the sort fields via <code>$sortFieldLanguageItemPrefix</code> so that for every <code>$validSortField</code> in <code>$validSortFields</code>, the language item <code>{$sortFieldLanguageItemPrefix}.{$validSortField}</code> must exist.</li> <li>The box system supports different positions.    Each box controller specifies the positions it supports via <code>$supportedPositions</code>.    To keep the implementation simple here as different positions might require different output in the template, we restrict ourselves to sidebars.</li> <li><code>getObjectList()</code> returns an instance of <code>DatabaseObjectList</code> that is used to read the listed objects.    <code>getObjectList()</code> itself must not call <code>readObjects()</code>, as <code>AbstractDatabaseObjectListBoxController</code> takes care of calling the method after adding the conditions and setting the sort order.</li> <li><code>getTemplate()</code> returns the contents of the box relying on the <code>boxPersonList</code> template here:</li> </ol> templates/boxPersonList.tpl <pre><code>&lt;ul class=\"sidebarItemList\"&gt;\n{foreach from=$boxPersonList item=boxPerson}\n        &lt;li class=\"box24\"&gt;\n            &lt;span class=\"icon icon24 fa-user\"&gt;&lt;/span&gt;\n\n            &lt;div class=\"sidebarItemTitle\"&gt;\n                &lt;h3&gt;{anchor object=$boxPerson}&lt;/h3&gt;\n{capture assign='__boxPersonDescription'}{lang __optional=true}wcf.person.boxList.description.{$boxSortField}{/lang}{/capture}\n{if $__boxPersonDescription}\n                    &lt;small&gt;{@$__boxPersonDescription}&lt;/small&gt;\n{/if}\n            &lt;/div&gt;\n        &lt;/li&gt;\n{/foreach}\n&lt;/ul&gt;\n</code></pre> <p>The template relies on a <code>.sidebarItemList</code> element, which is generally used for sidebar listings.    (If different box positions were supported, we either have to generate different output by considering the value of <code>$boxPosition</code> in the template or by using different templates in <code>getTemplate()</code>.)    One specific piece of code is the <code>$__boxPersonDescription</code> variable, which supports an optional description below the person's name relying on the optional language item <code>wcf.person.boxList.description.{$boxSortField}</code>.    We only add one such language item when sorting the people by comments:    In such a case, the number of comments will be shown.    (When sorting by first and last name, there are no additional useful information that could be shown here, though the plugin from part 2 adding support for birthdays might also show the birthday when sorting by first or last name.)</p> <p>Lastly, we also provide the language item <code>wcf.acp.box.boxController.com.woltlab.wcf.personList</code>, which is used in the list of available box controllers.</p>"},{"location":"tutorial/series/part_4/#conditions","title":"Conditions","text":"<p>The condition system can be used to generally filter a list of objects. In our case, the box system supports conditions to filter the objects shown in a specific box. Admittedly, our current person implementation only contains minimal data so that filtering might not make the most sense here but it will still show how to use the condition system for boxes. We will support filtering the people by their first and last name so that, for example, a box can be created listing all people with a specific first name.</p> <p>The first step for condition support is to register a object type definition for the relevant conditions requiring the <code>IObjectListCondition</code> interface:</p> objectTypeDefinition.xml <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;data xmlns=\"http://www.woltlab.com\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.woltlab.com http://www.woltlab.com/XSD/5.4/objectTypeDefinition.xsd\"&gt;\n&lt;import&gt;\n&lt;definition&gt;\n&lt;name&gt;com.woltlab.wcf.box.personList.condition&lt;/name&gt;\n&lt;interfacename&gt;wcf\\system\\condition\\IObjectListCondition&lt;/interfacename&gt;\n&lt;/definition&gt;\n&lt;/import&gt;\n&lt;/data&gt;\n</code></pre> <p>Next, we register the specific conditions for filtering by the first and last name using this object type condition:</p> <pre><code>&lt;type&gt;\n&lt;name&gt;com.woltlab.wcf.people.firstName&lt;/name&gt;\n&lt;definitionname&gt;com.woltlab.wcf.box.personList.condition&lt;/definitionname&gt;\n&lt;classname&gt;wcf\\system\\condition\\person\\PersonFirstNameTextPropertyCondition&lt;/classname&gt;\n&lt;/type&gt;\n&lt;type&gt;\n&lt;name&gt;com.woltlab.wcf.people.lastName&lt;/name&gt;\n&lt;definitionname&gt;com.woltlab.wcf.box.personList.condition&lt;/definitionname&gt;\n&lt;classname&gt;wcf\\system\\condition\\person\\PersonLastNameTextPropertyCondition&lt;/classname&gt;\n&lt;/type&gt;\n</code></pre> <p><code>PersonFirstNameTextPropertyCondition</code> and <code>PersonLastNameTextPropertyCondition</code> only differ minimally so that we only focus on <code>PersonFirstNameTextPropertyCondition</code> here, which relies on the default implementation <code>AbstractObjectTextPropertyCondition</code> and only requires specifying different object properties:</p> files/lib/system/condition/person/PersonFirstNameTextPropertyCondition.class.php <pre><code>&lt;?php\n\nnamespace wcf\\system\\condition\\person;\n\nuse wcf\\data\\person\\Person;\nuse wcf\\system\\condition\\AbstractObjectTextPropertyCondition;\n\n/**\n * Condition implementation for the first name of a person.\n *\n * @author  Matthias Schmidt\n * @copyright   2001-2022 WoltLab GmbH\n * @license WoltLab License &lt;http://www.woltlab.com/license-agreement.html&gt;\n * @package WoltLabSuite\\Core\\System\\Condition\n */\nfinal class PersonFirstNameTextPropertyCondition extends AbstractObjectTextPropertyCondition\n{\n    /**\n     * @inheritDoc\n     */\n    protected $className = Person::class;\n\n    /**\n     * @inheritDoc\n     */\n    protected $description = 'wcf.person.condition.firstName.description';\n\n    /**\n     * @inheritDoc\n     */\n    protected $fieldName = 'personFirstName';\n\n    /**\n     * @inheritDoc\n     */\n    protected $label = 'wcf.person.firstName';\n\n    /**\n     * @inheritDoc\n     */\n    protected $propertyName = 'firstName';\n\n    /**\n     * @inheritDoc\n     */\n    protected $supportsMultipleValues = true;\n}\n</code></pre> <ol> <li><code>$className</code> contains the class name of the relevant database object from which the class name of the database object list is derived and <code>$propertyName</code> is the name of the database object's property that contains the value used for filtering.</li> <li>By setting <code>$supportsMultipleValues</code> to <code>true</code>, multiple comma-separated values can be specified so that, for example, a box can also only list people with either of two specific first names.</li> <li><code>$description</code> (optional), <code>$fieldName</code>, and <code>$label</code> are used in the output of the form field.</li> </ol> <p>(The implementation here is specific for <code>AbstractObjectTextPropertyCondition</code>. The <code>wcf\\system\\condition</code> namespace also contains several other default condition implementations.)</p>"},{"location":"tutorial/series/part_5/","title":"Part 5: Person Information","text":"<p>This part of our tutorial series lays the foundation for future parts in which we will be using additional APIs, which we have not used in this series yet. To make use of those APIs, we need content generated by users in the frontend.</p>"},{"location":"tutorial/series/part_5/#package-functionality","title":"Package Functionality","text":"<p>In addition to the existing functions from part 4, the package will provide the following functionality after this part of the tutorial:</p> <ul> <li>Users are able to add information on the people in the frontend.</li> <li>Users are able to edit and delete the pieces of information they added.</li> <li>Moderators are able to edit and delete all pieces of information.</li> </ul>"},{"location":"tutorial/series/part_5/#used-components","title":"Used Components","text":"<p>In addition to the components used in previous parts, we will use the form builder API to create forms shown in dialogs instead of dedicated pages and we will, for the first time, add TypeScript code.</p>"},{"location":"tutorial/series/part_5/#package-structure","title":"Package Structure","text":"<p>The package will have the following file structure excluding unchanged files from previous parts:</p> <pre><code>\u251c\u2500\u2500 files\n\u2502   \u251c\u2500\u2500 acp\n\u2502   \u2502   \u2514\u2500\u2500 database\n\u2502   \u2502       \u2514\u2500\u2500 install_com.woltlab.wcf.people.php\n\u2502   \u251c\u2500\u2500 js\n\u2502   \u2502   \u2514\u2500\u2500 WoltLabSuite\n\u2502   \u2502       \u2514\u2500\u2500 Core\n\u2502   \u2502           \u2514\u2500\u2500 Controller\n\u2502   \u2502               \u2514\u2500\u2500 Person.js\n\u2502   \u2514\u2500\u2500 lib\n\u2502       \u251c\u2500\u2500 data\n\u2502       \u2502   \u2514\u2500\u2500 person\n\u2502       \u2502       \u251c\u2500\u2500 Person.class.php\n\u2502       \u2502       \u2514\u2500\u2500 information\n\u2502       \u2502           \u251c\u2500\u2500 PersonInformation.class.php\n\u2502       \u2502           \u251c\u2500\u2500 PersonInformationAction.class.php\n\u2502       \u2502           \u251c\u2500\u2500 PersonInformationEditor.class.php\n\u2502       \u2502           \u2514\u2500\u2500 PersonInformationList.class.php\n\u2502       \u2514\u2500\u2500 system\n\u2502           \u2514\u2500\u2500 worker\n\u2502               \u2514\u2500\u2500 PersonRebuildDataWorker.class.php\n\u251c\u2500\u2500 language\n\u2502   \u251c\u2500\u2500 de.xml\n\u2502   \u2514\u2500\u2500 en.xml\n\u251c\u2500\u2500 objectType.xml\n\u251c\u2500\u2500 templates\n\u2502   \u251c\u2500\u2500 person.tpl\n\u2502   \u2514\u2500\u2500 personList.tpl\n\u251c\u2500\u2500 ts\n\u2502   \u2514\u2500\u2500 WoltLabSuite\n\u2502       \u2514\u2500\u2500 Core\n\u2502           \u2514\u2500\u2500 Controller\n\u2502               \u2514\u2500\u2500 Person.ts\n\u2514\u2500\u2500 userGroupOption.xml\n</code></pre> <p>For all changes, please refer to the source code on GitHub.</p>"},{"location":"tutorial/series/part_5/#miscellaneous","title":"Miscellaneous","text":"<p>Before we focus on the main aspects of this part, we mention some minor aspects that will be used later on:</p> <ul> <li>Several new user group options and the relevant language items have been added related to creating, editing, and deleting information:<ul> <li><code>mod.person.canEditInformation</code> and <code>mod.person.canDeleteInformation</code> are moderative permissions to edit and delete any piece of information, regardless of who created it.</li> <li><code>user.person.canAddInformation</code> is the permission for users to add new pieces of information.</li> <li><code>user.person.canEditInformation</code> and <code>user.person.canDeleteInformation</code> are the user permissions to edit and the piece of information they created.</li> </ul> </li> <li>The actual information text will be entered via a WYSIWYG editor, which requires an object type of the definition <code>com.woltlab.wcf.message</code>: <code>com.woltlab.wcf.people.information</code>.</li> <li><code>personList.tpl</code> has been adjusted to show the number of pieces of information in the person statistics section.</li> <li>We have not updated the person list box to also support sorting by the number of pieces of information added for each person.</li> </ul>"},{"location":"tutorial/series/part_5/#person-information-model","title":"Person Information Model","text":"<p>The PHP file with the database layout has been updated as follows:</p> files/acp/database/install_com.woltlab.wcf.people.php <pre><code>&lt;?php\n\nuse wcf\\system\\database\\table\\column\\DefaultTrueBooleanDatabaseTableColumn;\nuse wcf\\system\\database\\table\\column\\IntDatabaseTableColumn;\nuse wcf\\system\\database\\table\\column\\NotNullInt10DatabaseTableColumn;\nuse wcf\\system\\database\\table\\column\\NotNullVarchar255DatabaseTableColumn;\nuse wcf\\system\\database\\table\\column\\ObjectIdDatabaseTableColumn;\nuse wcf\\system\\database\\table\\column\\SmallintDatabaseTableColumn;\nuse wcf\\system\\database\\table\\column\\TextDatabaseTableColumn;\nuse wcf\\system\\database\\table\\column\\VarcharDatabaseTableColumn;\nuse wcf\\system\\database\\table\\DatabaseTable;\nuse wcf\\system\\database\\table\\index\\DatabaseTableForeignKey;\nuse wcf\\system\\database\\table\\index\\DatabaseTablePrimaryIndex;\n\nreturn [\n    DatabaseTable::create('wcf1_person')\n        -&gt;columns([\n            ObjectIdDatabaseTableColumn::create('personID'),\n            NotNullVarchar255DatabaseTableColumn::create('firstName'),\n            NotNullVarchar255DatabaseTableColumn::create('lastName'),\n            NotNullInt10DatabaseTableColumn::create('informationCount')\n                -&gt;defaultValue(0),\n            SmallintDatabaseTableColumn::create('comments')\n                -&gt;length(5)\n                -&gt;notNull()\n                -&gt;defaultValue(0),\n            DefaultTrueBooleanDatabaseTableColumn::create('enableComments'),\n        ])\n        -&gt;indices([\n            DatabaseTablePrimaryIndex::create()\n                -&gt;columns(['personID']),\n        ]),\n\n    DatabaseTable::create('wcf1_person_information')\n        -&gt;columns([\n            ObjectIdDatabaseTableColumn::create('informationID'),\n            NotNullInt10DatabaseTableColumn::create('personID'),\n            TextDatabaseTableColumn::create('information'),\n            IntDatabaseTableColumn::create('userID')\n                -&gt;length(10),\n            NotNullVarchar255DatabaseTableColumn::create('username'),\n            VarcharDatabaseTableColumn::create('ipAddress')\n                -&gt;length(39)\n                -&gt;notNull(true)\n                -&gt;defaultValue(''),\n            NotNullInt10DatabaseTableColumn::create('time'),\n        ])\n        -&gt;indices([\n            DatabaseTablePrimaryIndex::create()\n                -&gt;columns(['informationID']),\n        ])\n        -&gt;foreignKeys([\n            DatabaseTableForeignKey::create()\n                -&gt;columns(['personID'])\n                -&gt;referencedTable('wcf1_person')\n                -&gt;referencedColumns(['personID'])\n                -&gt;onDelete('CASCADE'),\n            DatabaseTableForeignKey::create()\n                -&gt;columns(['userID'])\n                -&gt;referencedTable('wcf1_user')\n                -&gt;referencedColumns(['userID'])\n                -&gt;onDelete('SET NULL'),\n        ]),\n];\n</code></pre> <ul> <li>The number of pieces of information per person is tracked via the new <code>informationCount</code> column.</li> <li>The <code>wcf1_person_information</code> table has been added for the <code>PersonInformation</code> model.   The meaning of the different columns is explained in the property documentation part of <code>PersonInformation</code>'s documentation (see below).   The two foreign keys ensure that if a person is deleted, all of their information is also deleted, and that if a user is deleted, the <code>userID</code> column is set to <code>NULL</code>.</li> </ul> files/lib/data/person/information/PersonInformation.class.php <pre><code>&lt;?php\n\nnamespace wcf\\data\\person\\information;\n\nuse wcf\\data\\DatabaseObject;\nuse wcf\\data\\person\\Person;\nuse wcf\\data\\user\\UserProfile;\nuse wcf\\system\\cache\\runtime\\PersonRuntimeCache;\nuse wcf\\system\\cache\\runtime\\UserProfileRuntimeCache;\nuse wcf\\system\\html\\output\\HtmlOutputProcessor;\nuse wcf\\system\\WCF;\n\n/**\n * Represents a piece of information for a person.\n *\n * @author  Matthias Schmidt\n * @copyright   2001-2021 WoltLab GmbH\n * @license GNU Lesser General Public License &lt;http://opensource.org/licenses/lgpl-license.php&gt;\n * @package WoltLabSuite\\Core\\Data\\Person\\Information\n *\n * @property-read   int         $informationID  unique id of the information\n * @property-read   int         $personID       id of the person the information belongs to\n * @property-read   string      $information    information text\n * @property-read   int|null    $userID         id of the user who added the information or `null` if the user no longer exists\n * @property-read   string      $username       name of the user who added the information\n * @property-read   int         $time           timestamp at which the information was created\n */\nclass PersonInformation extends DatabaseObject\n{\n    /**\n     * Returns `true` if the active user can delete this piece of information and `false` otherwise.\n     */\n    public function canDelete(): bool\n    {\n        if (\n            WCF::getUser()-&gt;userID\n            &amp;&amp; WCF::getUser()-&gt;userID == $this-&gt;userID\n            &amp;&amp; WCF::getSession()-&gt;getPermission('user.person.canDeleteInformation')\n        ) {\n            return true;\n        }\n\n        return WCF::getSession()-&gt;getPermission('mod.person.canDeleteInformation');\n    }\n\n    /**\n     * Returns `true` if the active user can edit this piece of information and `false` otherwise.\n     */\n    public function canEdit(): bool\n    {\n        if (\n            WCF::getUser()-&gt;userID\n            &amp;&amp; WCF::getUser()-&gt;userID == $this-&gt;userID\n            &amp;&amp; WCF::getSession()-&gt;getPermission('user.person.canEditInformation')\n        ) {\n            return true;\n        }\n\n        return WCF::getSession()-&gt;getPermission('mod.person.canEditInformation');\n    }\n\n    /**\n     * Returns the formatted information.\n     */\n    public function getFormattedInformation(): string\n    {\n        $processor = new HtmlOutputProcessor();\n        $processor-&gt;process(\n            $this-&gt;information,\n            'com.woltlab.wcf.people.information',\n            $this-&gt;informationID\n        );\n\n        return $processor-&gt;getHtml();\n    }\n\n    /**\n     * Returns the person the information belongs to.\n     */\n    public function getPerson(): Person\n    {\n        return PersonRuntimeCache::getInstance()-&gt;getObject($this-&gt;personID);\n    }\n\n    /**\n     * Returns the user profile of the user who added the information.\n     */\n    public function getUserProfile(): UserProfile\n    {\n        if ($this-&gt;userID) {\n            return UserProfileRuntimeCache::getInstance()-&gt;getObject($this-&gt;userID);\n        } else {\n            return UserProfile::getGuestUserProfile($this-&gt;username);\n        }\n    }\n}\n</code></pre> <p><code>PersonInformation</code> provides two methods, <code>canDelete()</code> and <code>canEdit()</code>, to check whether the active user can delete or edit a specific piece of information. In both cases, it is checked if the current user has created the relevant piece of information to check the user-specific permissions or to fall back to the moderator-specific permissions.</p> <p>There also two getter methods for the person, the piece of information belongs to (<code>getPerson()</code>), and for the user profile of the user who created the information (<code>getUserProfile()</code>). In both cases, we use runtime caches, though in <code>getUserProfile()</code>, we also have to consider the case of the user who created the information being deleted, i.e. <code>userID</code> being <code>null</code>. For such a case, we also save the name of the user who created the information in <code>username</code>, so that we can return a guest user profile object in this case. The most interesting method is <code>getFormattedInformation()</code>, which returns the HTML code of the information text meant for output. To generate such an output, <code>HtmlOutputProcessor::process()</code> is used and here is where we first use the associated message object type <code>com.woltlab.wcf.people.information</code> mentioned before.</p> <p>While <code>PersonInformationEditor</code> is simply the default implementation and thus not explicitly shown here, <code>PersonInformationList::readObjects()</code> caches the relevant ids of the associated people and users who created the pieces of information using runtime caches:</p> files/lib/data/person/information/PersonInformationList.class.php <pre><code>&lt;?php\n\nnamespace wcf\\data\\person\\information;\n\nuse wcf\\data\\DatabaseObjectList;\nuse wcf\\system\\cache\\runtime\\PersonRuntimeCache;\nuse wcf\\system\\cache\\runtime\\UserProfileRuntimeCache;\n\n/**\n * Represents a list of person information.\n *\n * @author  Matthias Schmidt\n * @copyright   2001-2021 WoltLab GmbH\n * @license GNU Lesser General Public License &lt;http://opensource.org/licenses/lgpl-license.php&gt;\n * @package WoltLabSuite\\Core\\Data\\PersonInformation\n *\n * @method      PersonInformation       current()\n * @method      PersonInformation[]     getObjects()\n * @method      PersonInformation|null  search($objectID)\n * @property    PersonInformation[]     $objects\n */\nclass PersonInformationList extends DatabaseObjectList\n{\n    public function readObjects()\n    {\n        parent::readObjects();\n\n        UserProfileRuntimeCache::getInstance()-&gt;cacheObjectIDs(\\array_unique(\\array_filter(\\array_column(\n            $this-&gt;objects,\n            'userID'\n        ))));\n        PersonRuntimeCache::getInstance()-&gt;cacheObjectIDs(\\array_unique(\\array_column(\n            $this-&gt;objects,\n            'personID'\n        )));\n    }\n}\n</code></pre>"},{"location":"tutorial/series/part_5/#listing-and-deleting-person-information","title":"Listing and Deleting Person Information","text":"<p>The <code>person.tpl</code> template has been updated to include a block for listing the information at the beginning:</p> templates/person.tpl <pre><code>{capture assign='pageTitle'}{$person} - {lang}wcf.person.list{/lang}{/capture}\n\n{capture assign='contentTitle'}{$person}{/capture}\n\n{include file='header'}\n\n{if $person-&gt;informationCount || $__wcf-&gt;session-&gt;getPermission('user.person.canAddInformation')}\n    &lt;section class=\"section sectionContainerList\"&gt;\n        &lt;header class=\"sectionHeader\"&gt;\n            &lt;h2 class=\"sectionTitle\"&gt;\n{lang}wcf.person.information.list{/lang}\n{if $person-&gt;informationCount}\n                    &lt;span class=\"badge\"&gt;{#$person-&gt;informationCount}&lt;/span&gt;\n{/if}\n            &lt;/h2&gt;\n        &lt;/header&gt;\n\n        &lt;ul class=\"commentList containerList personInformationList jsObjectActionContainer\" {*\n            *}data-object-action-class-name=\"wcf\\data\\person\\information\\PersonInformationAction\"{*\n        *}&gt;\n{if $__wcf-&gt;session-&gt;getPermission('user.person.canAddInformation')}\n                &lt;li class=\"containerListButtonGroup\"&gt;\n                    &lt;ul class=\"buttonGroup\"&gt;\n                        &lt;li&gt;\n                            &lt;a href=\"#\" class=\"button\" id=\"personInformationAddButton\"&gt;\n                                &lt;span class=\"icon icon16 fa-plus\"&gt;&lt;/span&gt;\n                                &lt;span&gt;{lang}wcf.person.information.add{/lang}&lt;/span&gt;\n                            &lt;/a&gt;\n                        &lt;/li&gt;\n                    &lt;/ul&gt;\n                &lt;/li&gt;\n{/if}\n\n{foreach from=$person-&gt;getInformation() item=$information}\n                &lt;li class=\"comment personInformation jsObjectActionObject\" data-object-id=\"{@$information-&gt;getObjectID()}\"&gt;\n                    &lt;div class=\"box48{if $__wcf-&gt;getUserProfileHandler()-&gt;isIgnoredUser($information-&gt;userID, 2)} ignoredUserContent{/if}\"&gt;\n{user object=$information-&gt;getUserProfile() type='avatar48' ariaHidden='true' tabindex='-1'}\n\n                        &lt;div class=\"commentContentContainer\"&gt;\n                            &lt;div class=\"commentContent\"&gt;\n                                &lt;div class=\"containerHeadline\"&gt;\n                                    &lt;h3&gt;\n{if $information-&gt;userID}\n{user object=$information-&gt;getUserProfile()}\n{else}\n                                            &lt;span&gt;{$information-&gt;username}&lt;/span&gt;\n{/if}\n\n                                        &lt;small class=\"separatorLeft\"&gt;{@$information-&gt;time|time}&lt;/small&gt;\n                                    &lt;/h3&gt;\n                                &lt;/div&gt;\n\n                                &lt;div class=\"htmlContent userMessage\" id=\"personInformation{@$information-&gt;getObjectID()}\"&gt;\n{@$information-&gt;getFormattedInformation()}\n                                &lt;/div&gt;\n\n                                &lt;nav class=\"jsMobileNavigation buttonGroupNavigation\"&gt;\n                                    &lt;ul class=\"buttonList iconList\"&gt;\n{if $information-&gt;canEdit()}\n                                            &lt;li class=\"jsOnly\"&gt;\n                                                &lt;a href=\"#\" title=\"{lang}wcf.global.button.edit{/lang}\" class=\"jsEditInformation jsTooltip\"&gt;\n                                                    &lt;span class=\"icon icon16 fa-pencil\"&gt;&lt;/span&gt;\n                                                    &lt;span class=\"invisible\"&gt;{lang}wcf.global.button.edit{/lang}&lt;/span&gt;\n                                                &lt;/a&gt;\n                                            &lt;/li&gt;\n{/if}\n{if $information-&gt;canDelete()}\n                                            &lt;li class=\"jsOnly\"&gt;\n                                                &lt;a href=\"#\" title=\"{lang}wcf.global.button.delete{/lang}\" class=\"jsObjectAction jsTooltip\" data-object-action=\"delete\" data-confirm-message=\"{lang}wcf.person.information.delete.confirmMessage{/lang}\"&gt;\n                                                    &lt;span class=\"icon icon16 fa-times\"&gt;&lt;/span&gt;\n                                                    &lt;span class=\"invisible\"&gt;{lang}wcf.global.button.edit{/lang}&lt;/span&gt;\n                                                &lt;/a&gt;\n                                            &lt;/li&gt;\n{/if}\n\n{event name='informationOptions'}\n                                    &lt;/ul&gt;\n                                &lt;/nav&gt;\n                            &lt;/div&gt;\n                        &lt;/div&gt;\n                    &lt;/div&gt;\n                &lt;/li&gt;\n{/foreach}\n        &lt;/ul&gt;\n    &lt;/section&gt;\n{/if}\n\n{if $person-&gt;enableComments}\n{if $commentList|count || $commentCanAdd}\n        &lt;section id=\"comments\" class=\"section sectionContainerList\"&gt;\n            &lt;header class=\"sectionHeader\"&gt;\n                &lt;h2 class=\"sectionTitle\"&gt;\n{lang}wcf.person.comments{/lang}\n{if $person-&gt;comments}&lt;span class=\"badge\"&gt;{#$person-&gt;comments}&lt;/span&gt;{/if}\n                &lt;/h2&gt;\n            &lt;/header&gt;\n\n{include file='__commentJavaScript' commentContainerID='personCommentList'}\n\n            &lt;div class=\"personComments\"&gt;\n                &lt;ul id=\"personCommentList\" class=\"commentList containerList\" {*\n                    *}data-can-add=\"{if $commentCanAdd}true{else}false{/if}\" {*\n                    *}data-object-id=\"{@$person-&gt;personID}\" {*\n                    *}data-object-type-id=\"{@$commentObjectTypeID}\" {*\n                    *}data-comments=\"{if $person-&gt;comments}{@$commentList-&gt;countObjects()}{else}0{/if}\" {*\n                    *}data-last-comment-time=\"{@$lastCommentTime}\" {*\n                *}&gt;\n{include file='commentListAddComment' wysiwygSelector='personCommentListAddComment'}\n{include file='commentList'}\n                &lt;/ul&gt;\n            &lt;/div&gt;\n        &lt;/section&gt;\n{/if}\n{/if}\n\n&lt;footer class=\"contentFooter\"&gt;\n{hascontent}\n        &lt;nav class=\"contentFooterNavigation\"&gt;\n            &lt;ul&gt;\n{content}{event name='contentFooterNavigation'}{/content}\n            &lt;/ul&gt;\n        &lt;/nav&gt;\n{/hascontent}\n&lt;/footer&gt;\n\n&lt;script data-relocate=\"true\"&gt;\n    require(['Language', 'WoltLabSuite/Core/Controller/Person'], (Language, ControllerPerson) =&gt; {\n        Language.addObject({\n            'wcf.person.information.add': '{jslang}wcf.person.information.add{/jslang}',\n            'wcf.person.information.add.success': '{jslang}wcf.person.information.add.success{/jslang}',\n            'wcf.person.information.edit': '{jslang}wcf.person.information.edit{/jslang}',\n            'wcf.person.information.edit.success': '{jslang}wcf.person.information.edit.success{/jslang}',\n        });\n\n        ControllerPerson.init({@$person-&gt;personID}, {\n            canAddInformation: {if $__wcf-&gt;session-&gt;getPermission('user.person.canAddInformation')}true{else}false{/if},\n        });\n    });\n&lt;/script&gt;\n\n{include file='footer'}\n</code></pre> <p>To keep things simple here, we reuse the structure and CSS classes used for comments. Additionally, we always list all pieces of information. If there are many pieces of information, a nicer solution would be a pagination or loading more pieces of information with JavaScript.</p> <p>First, we note the <code>jsObjectActionContainer</code> class in combination with the <code>data-object-action-class-name</code> attribute, which are needed for the delete button for each piece of information, as explained here. In <code>PersonInformationAction</code>, we have overridden the default implementations of <code>validateDelete()</code> and <code>delete()</code> which are called after clicking on a delete button. In <code>validateDelete()</code>, we call <code>PersonInformation::canDelete()</code> on all pieces of information to be deleted for proper permission validation, and in <code>delete()</code>, we update the <code>informationCount</code> values of the people the deleted pieces of information belong to (see below).</p> <p>The button to add a new piece of information, <code>#personInformationAddButton</code>, and the buttons to edit existing pieces of information, <code>.jsEditInformation</code>, are controlled with JavaScript code initialized at the very end of the template.</p> <p>Lastly, in <code>create()</code> we provide default values for the <code>time</code>, <code>userID</code>, <code>username</code>, and <code>ipAddress</code> for cases like here when creating a new piece of information, where do not explicitly provide this data. Additionally, we extract the information text from the <code>information_htmlInputProcessor</code> parameter provided by the associated WYSIWYG form field and update the number of pieces of information created for the relevant person.</p>"},{"location":"tutorial/series/part_5/#creating-and-editing-person-information","title":"Creating and Editing Person Information","text":"<p>To create new pieces of information or editing existing ones, we do not add new form controllers but instead use dialogs generated by the form builder API so that the user does not have to leave the person page.</p> <p>When clicking on the add button or on any of the edit buttons, a dialog opens with the relevant form:</p> ts/WoltLabSuite/Core/Controller/Person.ts <pre><code>/**\n * Provides the JavaScript code for the person page.\n *\n * @author  Matthias Schmidt\n * @copyright  2001-2021 WoltLab GmbH\n * @license  GNU Lesser General Public License &lt;http://opensource.org/licenses/lgpl-license.php&gt;\n * @module  WoltLabSuite/Core/Controller/Person\n */\n\nimport FormBuilderDialog from \"WoltLabSuite/Core/Form/Builder/Dialog\";\nimport * as Language from \"WoltLabSuite/Core/Language\";\nimport * as UiNotification from \"WoltLabSuite/Core/Ui/Notification\";\n\nlet addDialog: FormBuilderDialog;\nconst editDialogs = new Map&lt;string, FormBuilderDialog&gt;();\n\ninterface EditReturnValues {\nformattedInformation: string;\ninformationID: number;\n}\n\ninterface Options {\ncanAddInformation: true;\n}\n\n/**\n * Opens the edit dialog after clicking on the edit button for a piece of information.\n */\nfunction editInformation(event: Event): void {\nevent.preventDefault();\n\nconst currentTarget = event.currentTarget as HTMLElement;\nconst information = currentTarget.closest(\".jsObjectActionObject\") as HTMLElement;\nconst informationId = information.dataset.objectId!;\n\nif (!editDialogs.has(informationId)) {\neditDialogs.set(\ninformationId,\nnew FormBuilderDialog(\n`personInformationEditDialog${informationId}`,\n\"wcf\\\\data\\\\person\\\\information\\\\PersonInformationAction\",\n\"getEditDialog\",\n{\nactionParameters: {\ninformationID: informationId,\n},\ndialog: {\ntitle: Language.get(\"wcf.person.information.edit\"),\n},\nsubmitActionName: \"submitEditDialog\",\nsuccessCallback(returnValues: EditReturnValues) {\ndocument.getElementById(`personInformation${returnValues.informationID}`)!.innerHTML =\nreturnValues.formattedInformation;\n\nUiNotification.show(Language.get(\"wcf.person.information.edit.success\"));\n},\n},\n),\n);\n}\n\neditDialogs.get(informationId)!.open();\n}\n\n/**\n * Initializes the JavaScript code for the person page.\n */\nexport function init(personId: number, options: Options): void {\nif (options.canAddInformation) {\n// Initialize the dialog to add new information.\naddDialog = new FormBuilderDialog(\n\"personInformationAddDialog\",\n\"wcf\\\\data\\\\person\\\\information\\\\PersonInformationAction\",\n\"getAddDialog\",\n{\nactionParameters: {\npersonID: personId,\n},\ndialog: {\ntitle: Language.get(\"wcf.person.information.add\"),\n},\nsubmitActionName: \"submitAddDialog\",\nsuccessCallback() {\nUiNotification.show(Language.get(\"wcf.person.information.add.success\"), () =&gt; window.location.reload());\n},\n},\n);\n\ndocument.getElementById(\"personInformationAddButton\")!.addEventListener(\"click\", (event) =&gt; {\nevent.preventDefault();\n\naddDialog.open();\n});\n}\n\ndocument\n.querySelectorAll(\".jsEditInformation\")\n.forEach((el) =&gt; el.addEventListener(\"click\", (ev) =&gt; editInformation(ev)));\n}\n</code></pre> <p>We use the <code>WoltLabSuite/Core/Form/Builder/Dialog</code> module, which takes care of the internal handling with regard to these dialogs. We only have to provide some data during for initializing these objects and call the <code>open()</code> function after a button has been clicked.</p> <p>Explanation of the initialization arguments for <code>WoltLabSuite/Core/Form/Builder/Dialog</code> used here:</p> <ul> <li>The first argument is the id of the dialog used to identify it.</li> <li>The second argument is the PHP class name which provides the contents of the dialog's form and handles the data after the form is submitted.</li> <li>The third argument is the name of the method in the referenced PHP class in the previous argument that returns the dialog form.</li> <li>The fourth argument contains additional options:<ul> <li><code>actionParameters</code> are additional parameters send during each AJAX request.   Here, we either pass the id of the person for who a new piece of information is added or the id of the edited piece of information.</li> <li><code>dialog</code> contains the options for the dialog, see the <code>DialogOptions</code> interface.   Here, we only provide the title of the dialog.</li> <li><code>submitActionName</code> is the name of the method in the referenced PHP class that is called with the form data after submitting the form.</li> <li><code>successCallback</code> is called after the submit AJAX request was successful.   After adding a new piece of information, we reload the page, and after editing an existing piece of information, we update the existing information text with the updated text.   (Dynamically inserting a newly added piece of information instead of reloading the page would also be possible, of course, but for this tutorial series, we kept things simple.)</li> </ul> </li> </ul> <p>Next, we focus on <code>PersonInformationAction</code>, which actually provides the contents of these dialogs and creates and edits the information:</p> files/lib/data/person/information/PersonInformationAction.class.php <pre><code>&lt;?php\n\nnamespace wcf\\data\\person\\information;\n\nuse wcf\\data\\AbstractDatabaseObjectAction;\nuse wcf\\data\\person\\PersonAction;\nuse wcf\\data\\person\\PersonEditor;\nuse wcf\\system\\cache\\runtime\\PersonRuntimeCache;\nuse wcf\\system\\event\\EventHandler;\nuse wcf\\system\\exception\\IllegalLinkException;\nuse wcf\\system\\exception\\PermissionDeniedException;\nuse wcf\\system\\exception\\UserInputException;\nuse wcf\\system\\form\\builder\\container\\wysiwyg\\WysiwygFormContainer;\nuse wcf\\system\\form\\builder\\DialogFormDocument;\nuse wcf\\system\\html\\input\\HtmlInputProcessor;\nuse wcf\\system\\WCF;\nuse wcf\\util\\UserUtil;\n\n/**\n * Executes person information-related actions.\n *\n * @author  Matthias Schmidt\n * @copyright   2001-2021 WoltLab GmbH\n * @license GNU Lesser General Public License &lt;http://opensource.org/licenses/lgpl-license.php&gt;\n * @package WoltLabSuite\\Core\\Data\\Person\\Information\n *\n * @method  PersonInformationEditor[]   getObjects()\n * @method  PersonInformationEditor     getSingleObject()\n */\nclass PersonInformationAction extends AbstractDatabaseObjectAction\n{\n    /**\n     * @var DialogFormDocument\n     */\n    public $dialog;\n\n    /**\n     * @var PersonInformation\n     */\n    public $information;\n\n    /**\n     * @return  PersonInformation\n     */\n    public function create()\n    {\n        if (!isset($this-&gt;parameters['data']['time'])) {\n            $this-&gt;parameters['data']['time'] = TIME_NOW;\n        }\n        if (!isset($this-&gt;parameters['data']['userID'])) {\n            $this-&gt;parameters['data']['userID'] = WCF::getUser()-&gt;userID;\n            $this-&gt;parameters['data']['username'] = WCF::getUser()-&gt;username;\n        }\n\n        if (LOG_IP_ADDRESS) {\n            if (!isset($this-&gt;parameters['data']['ipAddress'])) {\n                $this-&gt;parameters['data']['ipAddress'] = UserUtil::getIpAddress();\n            }\n        } else {\n            unset($this-&gt;parameters['data']['ipAddress']);\n        }\n\n        if (!empty($this-&gt;parameters['information_htmlInputProcessor'])) {\n            /** @var HtmlInputProcessor $htmlInputProcessor */\n            $htmlInputProcessor = $this-&gt;parameters['information_htmlInputProcessor'];\n            $this-&gt;parameters['data']['information'] = $htmlInputProcessor-&gt;getHtml();\n        }\n\n        /** @var PersonInformation $information */\n        $information = parent::create();\n\n        (new PersonAction([$information-&gt;personID], 'update', [\n            'counters' =&gt; [\n                'informationCount' =&gt; 1,\n            ],\n        ]))-&gt;executeAction();\n\n        return $information;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    public function update()\n    {\n        if (!empty($this-&gt;parameters['information_htmlInputProcessor'])) {\n            /** @var HtmlInputProcessor $htmlInputProcessor */\n            $htmlInputProcessor = $this-&gt;parameters['information_htmlInputProcessor'];\n            $this-&gt;parameters['data']['information'] = $htmlInputProcessor-&gt;getHtml();\n        }\n\n        parent::update();\n    }\n\n    /**\n     * @inheritDoc\n     */\n    public function validateDelete()\n    {\n        if (empty($this-&gt;objects)) {\n            $this-&gt;readObjects();\n\n            if (empty($this-&gt;objects)) {\n                throw new UserInputException('objectIDs');\n            }\n        }\n\n        foreach ($this-&gt;getObjects() as $informationEditor) {\n            if (!$informationEditor-&gt;canDelete()) {\n                throw new PermissionDeniedException();\n            }\n        }\n    }\n\n    /**\n     * @inheritDoc\n     */\n    public function delete()\n    {\n        $deleteCount = parent::delete();\n\n        if (!$deleteCount) {\n            return $deleteCount;\n        }\n\n        $counterUpdates = [];\n        foreach ($this-&gt;getObjects() as $informationEditor) {\n            if (!isset($counterUpdates[$informationEditor-&gt;personID])) {\n                $counterUpdates[$informationEditor-&gt;personID] = 0;\n            }\n\n            $counterUpdates[$informationEditor-&gt;personID]--;\n        }\n\n        WCF::getDB()-&gt;beginTransaction();\n        foreach ($counterUpdates as $personID =&gt; $counterUpdate) {\n            (new PersonEditor(PersonRuntimeCache::getInstance()-&gt;getObject($personID)))-&gt;updateCounters([\n                'informationCount' =&gt; $counterUpdate,\n            ]);\n        }\n        WCF::getDB()-&gt;commitTransaction();\n\n        return $deleteCount;\n    }\n\n    /**\n     * Validates the `getAddDialog` action.\n     */\n    public function validateGetAddDialog(): void\n    {\n        WCF::getSession()-&gt;checkPermissions(['user.person.canAddInformation']);\n\n        $this-&gt;readInteger('personID');\n        if (PersonRuntimeCache::getInstance()-&gt;getObject($this-&gt;parameters['personID']) === null) {\n            throw new UserInputException('personID');\n        }\n    }\n\n    /**\n     * Returns the data to show the dialog to add a new piece of information on a person.\n     *\n     * @return  string[]\n     */\n    public function getAddDialog(): array\n    {\n        $this-&gt;buildDialog();\n\n        return [\n            'dialog' =&gt; $this-&gt;dialog-&gt;getHtml(),\n            'formId' =&gt; $this-&gt;dialog-&gt;getId(),\n        ];\n    }\n\n    /**\n     * Validates the `submitAddDialog` action.\n     */\n    public function validateSubmitAddDialog(): void\n    {\n        $this-&gt;validateGetAddDialog();\n\n        $this-&gt;buildDialog();\n        $this-&gt;dialog-&gt;requestData($_POST['parameters']['data'] ?? []);\n        $this-&gt;dialog-&gt;readValues();\n        $this-&gt;dialog-&gt;validate();\n    }\n\n    /**\n     * Creates a new piece of information on a person after submitting the dialog.\n     *\n     * @return  string[]\n     */\n    public function submitAddDialog(): array\n    {\n        // If there are any validation errors, show the form again.\n        if ($this-&gt;dialog-&gt;hasValidationErrors()) {\n            return [\n                'dialog' =&gt; $this-&gt;dialog-&gt;getHtml(),\n                'formId' =&gt; $this-&gt;dialog-&gt;getId(),\n            ];\n        }\n\n        (new static([], 'create', \\array_merge($this-&gt;dialog-&gt;getData(), [\n            'data' =&gt; [\n                'personID' =&gt; $this-&gt;parameters['personID'],\n            ],\n        ])))-&gt;executeAction();\n\n        return [];\n    }\n\n    /**\n     * Validates the `getEditDialog` action.\n     */\n    public function validateGetEditDialog(): void\n    {\n        WCF::getSession()-&gt;checkPermissions(['user.person.canAddInformation']);\n\n        $this-&gt;readInteger('informationID');\n        $this-&gt;information = new PersonInformation($this-&gt;parameters['informationID']);\n        if (!$this-&gt;information-&gt;getObjectID()) {\n            throw new UserInputException('informationID');\n        }\n        if (!$this-&gt;information-&gt;canEdit()) {\n            throw new IllegalLinkException();\n        }\n    }\n\n    /**\n     * Returns the data to show the dialog to edit a piece of information on a person.\n     *\n     * @return  string[]\n     */\n    public function getEditDialog(): array\n    {\n        $this-&gt;buildDialog();\n        $this-&gt;dialog-&gt;updatedObject($this-&gt;information);\n\n        return [\n            'dialog' =&gt; $this-&gt;dialog-&gt;getHtml(),\n            'formId' =&gt; $this-&gt;dialog-&gt;getId(),\n        ];\n    }\n\n    /**\n     * Validates the `submitEditDialog` action.\n     */\n    public function validateSubmitEditDialog(): void\n    {\n        $this-&gt;validateGetEditDialog();\n\n        $this-&gt;buildDialog();\n        $this-&gt;dialog-&gt;updatedObject($this-&gt;information, false);\n        $this-&gt;dialog-&gt;requestData($_POST['parameters']['data'] ?? []);\n        $this-&gt;dialog-&gt;readValues();\n        $this-&gt;dialog-&gt;validate();\n    }\n\n    /**\n     * Updates a piece of information on a person after submitting the edit dialog.\n     *\n     * @return  string[]\n     */\n    public function submitEditDialog(): array\n    {\n        // If there are any validation errors, show the form again.\n        if ($this-&gt;dialog-&gt;hasValidationErrors()) {\n            return [\n                'dialog' =&gt; $this-&gt;dialog-&gt;getHtml(),\n                'formId' =&gt; $this-&gt;dialog-&gt;getId(),\n            ];\n        }\n\n        (new static([$this-&gt;information], 'update', $this-&gt;dialog-&gt;getData()))-&gt;executeAction();\n\n        // Reload the information with the updated data.\n        $information = new PersonInformation($this-&gt;information-&gt;getObjectID());\n\n        return [\n            'formattedInformation' =&gt; $information-&gt;getFormattedInformation(),\n            'informationID' =&gt; $this-&gt;information-&gt;getObjectID(),\n        ];\n    }\n\n    /**\n     * Builds the dialog to create or edit person information.\n     */\n    protected function buildDialog(): void\n    {\n        if ($this-&gt;dialog !== null) {\n            return;\n        }\n\n        $this-&gt;dialog = DialogFormDocument::create('personInformationAddDialog')\n            -&gt;appendChild(\n                WysiwygFormContainer::create('information')\n                    -&gt;messageObjectType('com.woltlab.wcf.people.information')\n                    -&gt;required()\n            );\n\n        EventHandler::getInstance()-&gt;fireAction($this, 'buildDialog');\n\n        $this-&gt;dialog-&gt;build();\n    }\n}\n</code></pre> <p>When setting up the <code>WoltLabSuite/Core/Form/Builder/Dialog</code> object for adding new pieces of information, we specified <code>getAddDialog</code> and <code>submitAddDialog</code> as the names of the dialog getter and submit handler. In addition to these two methods, the matching validation methods <code>validateGetAddDialog()</code> and <code>validateGetAddDialog()</code> are also added. As the forms for adding and editing pieces of information have the same structure, this form is created in <code>buildDialog()</code> using a <code>DialogFormDocument</code> object, which is intended for forms in dialogs. We fire an event in <code>buildDialog()</code> so that plugins are able to easily extend the dialog with additional data.</p> <p><code>validateGetAddDialog()</code> checks if the user has the permission to create new pieces of information and if a valid id for the person, the information will belong to, is given.  The method configured in the <code>WoltLabSuite/Core/Form/Builder/Dialog</code> object returning the dialog is expected to return two values: the id of the form (<code>formId</code>) and the contents of form shown in the dialog (<code>dialog</code>). This data is returned by <code>getAddDialog</code> using the dialog build previously by <code>buildDialog()</code>.</p> <p>After the form is submitted, <code>validateSubmitAddDialog()</code> has to do the same basic validation as <code>validateGetAddDialog()</code> so that <code>validateGetAddDialog()</code> is simply called. Additionally, the form data is read and validated. In <code>submitAddDialog()</code>, we first check if there have been any validation errors: If any error occured during validation, we return the same data as in <code>getAddDialog()</code> so that the dialog is shown again with the erroneous fields marked as such. Otherwise, if the validation succeeded, the form data is used to create the new piece of information. In addition to the form data, we manually add the id of the person to whom the information belongs to. Lastly, we could return some data that we could access in the JavaScript callback function after successfully submitting the dialog. As we will simply be reloading the page, no such data is returned. An alternative to reloading to the page would be dynamically inserting the new piece of information in the list so that we would have to return the rendered list item for the new piece of information.</p> <p>The process for getting and submitting the dialog to edit existing pieces of information is similar to the process for adding new pieces of information. Instead of the id of the person, however, we now pass the id of the edited piece of information and in <code>submitEditDialog()</code>, we update the edited information instead of creating a new one like in <code>submitAddDialog()</code>. After editing a piece of information, we do not reload the page but dynamically update the text of the information in the TypeScript code so that we return the updated rendered information text and id of the edited pieced of information in <code>submitAddDialog()</code>.</p>"},{"location":"tutorial/series/part_5/#rebuild-data-worker","title":"Rebuild Data Worker","text":"<p>To ensure the integrity of the person data, <code>PersonRebuildDataWorker</code> updates the <code>informationCount</code> counter:</p> files/lib/system/worker/PersonRebuildDataWorker.class.php <pre><code>&lt;?php\n\nnamespace wcf\\system\\worker;\n\nuse wcf\\data\\person\\PersonList;\nuse wcf\\system\\WCF;\n\n/**\n * Worker implementation for updating people.\n *\n * @author  Matthias Schmidt\n * @copyright   2001-2022 WoltLab GmbH\n * @license GNU Lesser General Public License &lt;http://opensource.org/licenses/lgpl-license.php&gt;\n * @package WoltLabSuite\\Core\\System\\Worker\n *\n * @method  PersonList  getObjectList()\n */\nfinal class PersonRebuildDataWorker extends AbstractRebuildDataWorker\n{\n    /**\n     * @inheritDoc\n     */\n    protected $limit = 500;\n\n    /**\n     * @inheritDoc\n     */\n    protected $objectListClassName = PersonList::class;\n\n    /**\n     * @inheritDoc\n     */\n    protected function initObjectList()\n    {\n        parent::initObjectList();\n\n        $this-&gt;objectList-&gt;sqlOrderBy = 'person.personID';\n    }\n\n    /**\n     * @inheritDoc\n     */\n    public function execute()\n    {\n        parent::execute();\n\n        if (!\\count($this-&gt;objectList)) {\n            return;\n        }\n\n        $sql = \"UPDATE  wcf1_person person\n                SET     informationCount = (\n                            SELECT  COUNT(*)\n                            FROM    wcf1_person_information person_information\n                            WHERE   person_information.personID = person.personID\n                        )\n                WHERE   person.personID = ?\";\n        $statement = WCF::getDB()-&gt;prepare($sql);\n\n        WCF::getDB()-&gt;beginTransaction();\n        foreach ($this-&gt;getObjectList() as $person) {\n            $statement-&gt;execute([$person-&gt;personID]);\n        }\n        WCF::getDB()-&gt;commitTransaction();\n    }\n}\n</code></pre>"},{"location":"tutorial/series/part_5/#username-and-ip-address-event-listeners","title":"Username and IP Address Event Listeners","text":"<p>As we store the name of the user who create a new piece of information and store their IP address, we have to add event listeners to properly handle the following scenarios:</p> <ol> <li>If the user is renamed, the value of <code>username</code> stored with the person information has to be updated, which can be achieved by a simple event listener that only has to specify the name of relevant database table if <code>AbstractUserActionRenameListener</code> is extended:</li> </ol> files/lib/system/event/listener/PersonUserActionRenameListener.class.php <pre><code>&lt;?php\n\nnamespace wcf\\system\\event\\listener;\n\n/**\n * Updates person information during user renaming.\n *\n * @author  Matthias Schmidt\n * @copyright   2001-2022 WoltLab GmbH\n * @license GNU Lesser General Public License &lt;http://opensource.org/licenses/lgpl-license.php&gt;\n * @package WoltLabSuite\\Core\\System\\Event\\Listener\n */\nfinal class PersonUserActionRenameListener extends AbstractUserActionRenameListener\n{\n    /**\n     * @inheritDoc\n     */\n    protected $databaseTables = [\n        'wcf{WCF_N}_person_information',\n    ];\n}\n</code></pre> <ol> <li>If users are merged, all pieces of information need to be assigned to the target user of the merging.   Again, we only have to specify the name of relevant database table if <code>AbstractUserMergeListener</code> is extended:</li> </ol> files/lib/system/event/listener/PersonUserMergeListener.class.php <pre><code>&lt;?php\n\nnamespace wcf\\system\\event\\listener;\n\n/**\n * Updates person information during user merging.\n *\n * @author  Matthias Schmidt\n * @copyright   2001-2022 WoltLab GmbH\n * @license GNU Lesser General Public License &lt;http://opensource.org/licenses/lgpl-license.php&gt;\n * @package WoltLabSuite\\Core\\System\\Event\\Listener\n */\nfinal class PersonUserMergeListener extends AbstractUserMergeListener\n{\n    /**\n     * @inheritDoc\n     */\n    protected $databaseTables = [\n        'wcf{WCF_N}_person_information',\n    ];\n}\n</code></pre> <ol> <li>If the option to prune stored ip addresses after a certain period of time is enabled, we also have to prune them in the person information database table.   Here we also only have to specify the name of the relevant database table and provide the mapping from the <code>ipAddress</code> column to the <code>time</code> column:</li> </ol> files/lib/system/event/listener/PersonPruneIpAddressesCronjobListener.class.php <pre><code>&lt;?php\n\nnamespace wcf\\system\\event\\listener;\n\nuse wcf\\system\\cronjob\\PruneIpAddressesCronjob;\n\n/**\n * Prunes old ip addresses.\n *\n * @author  Matthias Schmidt\n * @copyright   2001-2022 WoltLab GmbH\n * @license GNU Lesser General Public License &lt;http://opensource.org/licenses/lgpl-license.php&gt;\n * @package WoltLabSuite\\Core\\System\\Event\\Listener\n */\nfinal class PersonPruneIpAddressesCronjobListener extends AbstractEventListener\n{\n    protected function onExecute(PruneIpAddressesCronjob $cronjob): void\n    {\n        $cronjob-&gt;columns['wcf' . WCF_N . '_person_information']['ipAddress'] = 'time';\n    }\n}\n</code></pre> <ol> <li>The ip addresses in the person information database table also have to be considered for the user data export which can also be done with minimal effort by providing the name of the relevant database table:</li> </ol> files/lib/system/event/listener/PersonUserExportGdprListener.class.php <pre><code>&lt;?php\n\nnamespace wcf\\system\\event\\listener;\n\nuse wcf\\acp\\action\\UserExportGdprAction;\n\n/**\n * Adds the ip addresses stored with the person information during user data export.\n *\n * @author  Matthias Schmidt\n * @copyright   2001-2022 WoltLab GmbH\n * @license GNU Lesser General Public License &lt;http://opensource.org/licenses/lgpl-license.php&gt;\n * @package WoltLabSuite\\Core\\System\\Event\\Listener\n */\nfinal class PersonUserExportGdprListener extends AbstractEventListener\n{\n    protected function onExport(UserExportGdprAction $action): void\n    {\n        $action-&gt;ipAddresses['com.woltlab.wcf.people'] = ['wcf' . WCF_N . '_person_information'];\n    }\n}\n</code></pre> <p>Lastly, we present the updated <code>eventListener.xml</code> file with new entries for all of these event listeners:</p> eventListener.xml <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;data xmlns=\"http://www.woltlab.com\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.woltlab.com http://www.woltlab.com/XSD/5.4/eventListener.xsd\"&gt;\n&lt;import&gt;\n&lt;eventlistener name=\"rename@wcf\\data\\user\\UserAction\"&gt;\n&lt;eventclassname&gt;wcf\\data\\user\\UserAction&lt;/eventclassname&gt;\n&lt;eventname&gt;rename&lt;/eventname&gt;\n&lt;listenerclassname&gt;wcf\\system\\event\\listener\\PersonUserActionRenameListener&lt;/listenerclassname&gt;\n&lt;environment&gt;all&lt;/environment&gt;\n&lt;/eventlistener&gt;\n&lt;eventlistener name=\"save@wcf\\acp\\form\\UserMergeForm\"&gt;\n&lt;eventclassname&gt;wcf\\acp\\form\\UserMergeForm&lt;/eventclassname&gt;\n&lt;eventname&gt;save&lt;/eventname&gt;\n&lt;listenerclassname&gt;wcf\\system\\event\\listener\\PersonUserMergeListener&lt;/listenerclassname&gt;\n&lt;environment&gt;admin&lt;/environment&gt;\n&lt;/eventlistener&gt;\n&lt;eventlistener name=\"execute@wcf\\system\\cronjob\\PruneIpAddressesCronjob\"&gt;\n&lt;eventclassname&gt;wcf\\system\\cronjob\\PruneIpAddressesCronjob&lt;/eventclassname&gt;\n&lt;eventname&gt;execute&lt;/eventname&gt;\n&lt;listenerclassname&gt;wcf\\system\\event\\listener\\PersonPruneIpAddressesCronjobListener&lt;/listenerclassname&gt;\n&lt;environment&gt;all&lt;/environment&gt;\n&lt;/eventlistener&gt;\n&lt;eventlistener name=\"export@wcf\\acp\\action\\UserExportGdprAction\"&gt;\n&lt;eventclassname&gt;wcf\\acp\\action\\UserExportGdprAction&lt;/eventclassname&gt;\n&lt;eventname&gt;export&lt;/eventname&gt;\n&lt;listenerclassname&gt;wcf\\system\\event\\listener\\PersonUserExportGdprListener&lt;/listenerclassname&gt;\n&lt;environment&gt;admin&lt;/environment&gt;\n&lt;/eventlistener&gt;\n&lt;/import&gt;\n&lt;/data&gt;\n</code></pre>"},{"location":"tutorial/series/part_6/","title":"Part 6: Activity Points and Activity Events","text":"<p>In this part of our tutorial series, we use the person information added in the previous part to award activity points to users adding new pieces of information and to also create activity events for these pieces of information.</p>"},{"location":"tutorial/series/part_6/#package-functionality","title":"Package Functionality","text":"<p>In addition to the existing functions from part 5, the package will provide the following functionality after this part of the tutorial:</p> <ul> <li>Users are awarded activity points for adding new pieces of information for people.</li> <li>If users add new pieces of information for people, activity events are added which are then shown in the list of recent activities.</li> </ul>"},{"location":"tutorial/series/part_6/#used-components","title":"Used Components","text":"<p>In addition to the components used in previous parts, we will use the user activity points API and the user activity events API.</p>"},{"location":"tutorial/series/part_6/#package-structure","title":"Package Structure","text":"<p>The package will have the following file structure excluding unchanged files from previous parts:</p> <pre><code>\u251c\u2500\u2500 files\n\u2502   \u2514\u2500\u2500 lib\n\u2502       \u251c\u2500\u2500 data\n\u2502       \u2502   \u2514\u2500\u2500 person\n\u2502       \u2502       \u251c\u2500\u2500 PersonAction.class.php\n\u2502       \u2502       \u2514\u2500\u2500 information\n\u2502       \u2502           \u251c\u2500\u2500 PersonInformation.class.php\n\u2502       \u2502           \u2514\u2500\u2500 PersonInformationAction.class.php\n\u2502       \u2514\u2500\u2500 system\n\u2502           \u251c\u2500\u2500 user\n\u2502           \u2502   \u2514\u2500\u2500 activity\n\u2502           \u2502       \u2514\u2500\u2500 event\n\u2502           \u2502           \u2514\u2500\u2500 PersonInformationUserActivityEvent.class.php\n\u2502           \u2514\u2500\u2500 worker\n\u2502               \u251c\u2500\u2500 PersonInformationRebuildDataWorker.class.php\n\u2502               \u2514\u2500\u2500 PersonRebuildDataWorker.class.php\n\u251c\u2500\u2500 eventListener.xml\n\u251c\u2500\u2500 language\n\u2502   \u251c\u2500\u2500 de.xml\n\u2502   \u2514\u2500\u2500 en.xml\n\u2514\u2500\u2500 objectType.xml\n</code></pre> <p>For all changes, please refer to the source code on GitHub.</p>"},{"location":"tutorial/series/part_6/#user-activity-points","title":"User Activity Points","text":"<p>The first step to support activity points is to register an object type for the <code>com.woltlab.wcf.user.activityPointEvent</code> object type definition for created person information and specify the default number of points awarded per piece of information:</p> objectType.xml<pre><code>&lt;type&gt;\n&lt;name&gt;com.woltlab.wcf.people.information&lt;/name&gt;\n&lt;definitionname&gt;com.woltlab.wcf.user.activityPointEvent&lt;/definitionname&gt;\n&lt;points&gt;2&lt;/points&gt;\n&lt;/type&gt;\n</code></pre> <p>Additionally, the phrase <code>wcf.user.activityPoint.objectType.com.woltlab.wcf.people.information</code> (in general: <code>wcf.user.activityPoint.objectType.{objectType}</code>) has to be added.</p> <p>The activity points are awarded when new pieces are created via <code>PersonInformation::create()</code> using <code>UserActivityPointHandler::fireEvent()</code> and removed in <code>PersonInformation::create()</code> via <code>UserActivityPointHandler::removeEvents()</code> if pieces of information are deleted.</p> <p>Lastly, we have to add two components for updating data: First, we register a new rebuild data worker</p> objectType.xml<pre><code>&lt;type&gt;\n&lt;name&gt;com.woltlab.wcf.people.information&lt;/name&gt;\n&lt;definitionname&gt;com.woltlab.wcf.rebuildData&lt;/definitionname&gt;\n&lt;classname&gt;wcf\\system\\worker\\PersonInformationRebuildDataWorker&lt;/classname&gt;\n&lt;/type&gt;\n</code></pre> files/lib/system/worker/PersonInformationRebuildDataWorker.class.php <pre><code>&lt;?php\n\nnamespace wcf\\system\\worker;\n\nuse wcf\\data\\person\\information\\PersonInformationList;\nuse wcf\\system\\user\\activity\\point\\UserActivityPointHandler;\n\n/**\n * Worker implementation for updating person information.\n *\n * @author  Matthias Schmidt\n * @copyright   2001-2022 WoltLab GmbH\n * @license GNU Lesser General Public License &lt;http://opensource.org/licenses/lgpl-license.php&gt;\n * @package WoltLabSuite\\Core\\System\\Worker\n *\n * @method  PersonInformationList   getObjectList()\n */\nfinal class PersonInformationRebuildDataWorker extends AbstractRebuildDataWorker\n{\n    /**\n     * @inheritDoc\n     */\n    protected $objectListClassName = PersonInformationList::class;\n\n    /**\n     * @inheritDoc\n     */\n    protected $limit = 500;\n\n    /**\n     * @inheritDoc\n     */\n    protected function initObjectList()\n    {\n        parent::initObjectList();\n\n        $this-&gt;objectList-&gt;sqlOrderBy = 'person_information.personID';\n    }\n\n    /**\n     * @inheritDoc\n     */\n    public function execute()\n    {\n        parent::execute();\n\n        if (!$this-&gt;loopCount) {\n            UserActivityPointHandler::getInstance()-&gt;reset('com.woltlab.wcf.people.information');\n        }\n\n        if (!\\count($this-&gt;objectList)) {\n            return;\n        }\n\n        $itemsToUser = [];\n        foreach ($this-&gt;getObjectList() as $personInformation) {\n            if ($personInformation-&gt;userID) {\n                if (!isset($itemsToUser[$personInformation-&gt;userID])) {\n                    $itemsToUser[$personInformation-&gt;userID] = 0;\n                }\n\n                $itemsToUser[$personInformation-&gt;userID]++;\n            }\n        }\n\n        UserActivityPointHandler::getInstance()-&gt;fireEvents(\n            'com.woltlab.wcf.people.information',\n            $itemsToUser,\n            false\n        );\n    }\n}\n</code></pre> <p>which updates the number of instances for which any user received person information activity points. (This data worker also requires the phrases <code>wcf.acp.rebuildData.com.woltlab.wcf.people.information</code> and <code>wcf.acp.rebuildData.com.woltlab.wcf.people.information.description</code>).</p> <p>Second, we add an event listener for <code>UserActivityPointItemsRebuildDataWorker</code> to update the total user activity points awarded for person information:</p> eventListener.xml<pre><code>&lt;eventlistener name=\"execute@wcf\\system\\worker\\UserActivityPointItemsRebuildDataWorker\"&gt;\n&lt;eventclassname&gt;wcf\\system\\worker\\UserActivityPointItemsRebuildDataWorker&lt;/eventclassname&gt;\n&lt;eventname&gt;execute&lt;/eventname&gt;\n&lt;listenerclassname&gt;wcf\\system\\event\\listener\\PersonUserActivityPointItemsRebuildDataWorkerListener&lt;/listenerclassname&gt;\n&lt;environment&gt;admin&lt;/environment&gt;\n&lt;/eventlistener&gt;\n</code></pre> files/lib/system/event/listener/PersonUserActivityPointItemsRebuildDataWorkerListener.class.php <pre><code>&lt;?php\n\nnamespace wcf\\system\\event\\listener;\n\nuse wcf\\system\\database\\util\\PreparedStatementConditionBuilder;\nuse wcf\\system\\user\\activity\\point\\UserActivityPointHandler;\nuse wcf\\system\\WCF;\nuse wcf\\system\\worker\\UserActivityPointItemsRebuildDataWorker;\n\n/**\n * Updates the user activity point items counter for person information.\n *\n * @author  Matthias Schmidt\n * @copyright   2001-2022 WoltLab GmbH\n * @license GNU Lesser General Public License &lt;http://opensource.org/licenses/lgpl-license.php&gt;\n * @package WoltLabSuite\\Core\\System\\Event\\Listener\n */\nfinal class PersonUserActivityPointItemsRebuildDataWorkerListener extends AbstractEventListener\n{\n    protected function onExecute(UserActivityPointItemsRebuildDataWorker $worker): void\n    {\n        $objectType = UserActivityPointHandler::getInstance()\n            -&gt;getObjectTypeByName('com.woltlab.wcf.people.information');\n\n        $conditionBuilder = new PreparedStatementConditionBuilder();\n        $conditionBuilder-&gt;add('user_activity_point.objectTypeID = ?', [$objectType-&gt;objectTypeID]);\n        $conditionBuilder-&gt;add('user_activity_point.userID IN (?)', [$worker-&gt;getObjectList()-&gt;getObjectIDs()]);\n\n        $sql = \"UPDATE  wcf1_user_activity_point user_activity_point\n                SET     user_activity_point.items = (\n                            SELECT  COUNT(*)\n                            FROM    wcf1_person_information person_information\n                            WHERE   person_information.userID = user_activity_point.userID\n                        ),\n                        user_activity_point.activityPoints = user_activity_point.items * ?\n{$conditionBuilder}\";\n        $statement = WCF::getDB()-&gt;prepare($sql);\n        $statement-&gt;execute([\n            $objectType-&gt;points,\n            ...$conditionBuilder-&gt;getParameters()\n        ]);\n    }\n}\n</code></pre>"},{"location":"tutorial/series/part_6/#user-activity-events","title":"User Activity Events","text":"<p>To support user activity events, an object type for <code>com.woltlab.wcf.user.recentActivityEvent</code> has to be registered with a class implementing <code>wcf\\system\\user\\activity\\event\\IUserActivityEvent</code>:</p> objectType.xml<pre><code>&lt;type&gt;\n&lt;name&gt;com.woltlab.wcf.people.information&lt;/name&gt;\n&lt;definitionname&gt;com.woltlab.wcf.user.recentActivityEvent&lt;/definitionname&gt;\n&lt;classname&gt;wcf\\system\\user\\activity\\event\\PersonInformationUserActivityEvent&lt;/classname&gt;\n&lt;/type&gt;\n</code></pre> files/lib/system/user/activity/event/PersonInformationUserActivityEvent.class.php <pre><code>&lt;?php\n\nnamespace wcf\\system\\user\\activity\\event;\n\nuse wcf\\data\\person\\information\\PersonInformationList;\nuse wcf\\system\\SingletonFactory;\nuse wcf\\system\\WCF;\n\n/**\n * User activity event implementation for person information.\n *\n * @author  Matthias Schmidt\n * @copyright   2001-2022 WoltLab GmbH\n * @license GNU Lesser General Public License &lt;http://opensource.org/licenses/lgpl-license.php&gt;\n * @package WoltLabSuite\\Core\\System\\User\\Activity\\Event\n */\nfinal class PersonInformationUserActivityEvent extends SingletonFactory implements IUserActivityEvent\n{\n    /**\n     * @inheritDoc\n     */\n    public function prepare(array $events)\n    {\n        $objectIDs = \\array_column($events, 'objectID');\n\n        $informationList = new PersonInformationList();\n        $informationList-&gt;setObjectIDs($objectIDs);\n        $informationList-&gt;readObjects();\n        $information = $informationList-&gt;getObjects();\n\n        foreach ($events as $event) {\n            if (isset($information[$event-&gt;objectID])) {\n                $personInformation = $information[$event-&gt;objectID];\n\n                $event-&gt;setIsAccessible();\n                $event-&gt;setTitle(\n                    WCF::getLanguage()-&gt;getDynamicVariable(\n                        'wcf.user.profile.recentActivity.personInformation',\n                        [\n                            'person' =&gt; $personInformation-&gt;getPerson(),\n                            'personInformation' =&gt; $personInformation,\n                        ]\n                    )\n                );\n                $event-&gt;setDescription($personInformation-&gt;getFormattedExcerpt());\n            }\n        }\n    }\n}\n</code></pre> <p><code>PersonInformationUserActivityEvent::prepare()</code> must check for all events whether the associated piece of information still exists and if it is the case, mark the event as accessible via the <code>setIsAccessible()</code> method, set the title of the activity event via <code>setTitle()</code>, and set a description of the event via <code>setDescription()</code> for which we use the newly added <code>PersonInformation::getFormattedExcerpt()</code> method.</p> <p>Lastly, we have to add the phrase <code>wcf.user.recentActivity.com.woltlab.wcf.people.information</code>, which is shown in the list of activity events as the type of activity event.</p>"},{"location":"view/css/","title":"CSS","text":""},{"location":"view/css/#scss-and-css","title":"SCSS and CSS","text":"<p>SCSS is a scripting language that features a syntax similar to CSS and compiles into native CSS at runtime. It provides many great additions to CSS such as declaration nesting and variables, it is recommended to read the official guide to learn more.</p> <p>You can create <code>.scss</code> files containing only pure CSS code and it will work just fine, you are at no point required to write actual SCSS code.</p>"},{"location":"view/css/#file-location","title":"File Location","text":"<p>Please place your style files in a subdirectory of the <code>style/</code> directory of the target application or the Core's style directory, for example <code>style/layout/pageHeader.scss</code>.</p>"},{"location":"view/css/#variables","title":"Variables","text":"<p>You can access variables with <code>$myVariable</code>, variable interpolation (variables inside strings) is accomplished with <code>#{$myVariable}</code>.</p>"},{"location":"view/css/#linking-images","title":"Linking images","text":"<p>Images used within a style must be located in the style's image folder. To get the folder name within the CSS the SCSS variable <code>#{$style_image_path}</code> can be used. The value will contain a trailing slash.</p>"},{"location":"view/css/#media-breakpoints","title":"Media Breakpoints","text":"<p>Media breakpoints instruct the browser to apply different CSS depending on the viewport dimensions, e.g. serving a desktop PC a different view than when viewed on a smartphone.</p> <pre><code>/* red background color for desktop pc */\n@include screen-lg {\nbody {\nbackground-color: red;\n}\n}\n\n/* green background color on smartphones and tablets */\n@include screen-md-down {\nbody {\nbackground-color: green;\n}\n}\n</code></pre>"},{"location":"view/css/#available-breakpoints","title":"Available Breakpoints","text":"<p>Some very large smartphones, for example the Apple iPhone 7 Plus, do match the media query for <code>Tablets (portrait)</code> when viewed in landscape mode.</p> Name Devices <code>@media</code> equivalent <code>screen-xs</code> Smartphones only <code>(max-width: 544px)</code> <code>screen-sm</code> Tablets (portrait) <code>(min-width: 545px) and (max-width: 768px)</code> <code>screen-sm-down</code> Tablets (portrait) and smartphones <code>(max-width: 768px)</code> <code>screen-sm-up</code> Tablets and desktop PC <code>(min-width: 545px)</code> <code>screen-sm-md</code> Tablets only <code>(min-width: 545px) and (max-width: 1024px)</code> <code>screen-md</code> Tablets (landscape) <code>(min-width: 769px) and (max-width: 1024px)</code> <code>screen-md-down</code> Smartphones and tablets <code>(max-width: 1024px)</code> <code>screen-md-up</code> Tablets (landscape) and desktop PC <code>(min-width: 769px)</code> <code>screen-lg</code> Desktop PC <code>(min-width: 1025px)</code> <code>screen-lg-only</code> Desktop PC <code>(min-width: 1025px) and (max-width: 1280px)</code> <code>screen-lg-down</code> Smartphones, tablets, and desktop PC <code>(max-width: 1280px)</code> <code>screen-xl</code> Desktop PC <code>(min-width: 1281px)</code>"},{"location":"view/css/#asset-preloading","title":"Asset Preloading","text":"<p>WoltLab Suite\u2019s SCSS compiler supports adding preloading metadata to the CSS. To communicate the preloading intent to the compiler, the <code>--woltlab-suite-preload</code> CSS variable is set to the result of the <code>preload()</code> function:</p> <pre><code>.fooBar {\n--woltlab-suite-preload:    #{preload(\n'#{$style_image_path}custom/background.png',\n$as: \"image\",\n$crossorigin: false,\n$type: \"image/png\"\n)};\n\nbackground: url('#{$style_image_path}custom/background.png');\n}\n</code></pre> <p>The parameters of the <code>preload()</code> function map directly to the preloading properties that are used within the <code>&lt;link&gt;</code> tag and the <code>link:</code> HTTP response header.</p> <p>The above example will result in a <code>&lt;link&gt;</code> similar to the following being added to the generated HTML:</p> <pre><code>&lt;link rel=\"preload\" href=\"https://example.com/images/style-1/custom/background.png\" as=\"image\" type=\"image/png\"&gt;\n</code></pre> <p>Use preloading sparingly for the most important resources where you can be certain that the browser will need them. Unused preloaded resources will unnecessarily waste bandwidth.</p>"},{"location":"view/languages-naming-conventions/","title":"Language Naming Conventions","text":"<p>This page contains general rules for naming language items and for their values. API-specific rules are listed on the relevant API page:</p> <ul> <li>Comments</li> </ul>"},{"location":"view/languages-naming-conventions/#forms","title":"Forms","text":""},{"location":"view/languages-naming-conventions/#fields","title":"Fields","text":"<p>If you have an application <code>foo</code> and a database object <code>foo\\data\\bar\\Bar</code> with a property <code>baz</code> that can be set via a form field, the name of the corresponding language item has to be <code>foo.bar.baz</code>. If you want to add an additional description below the field, use the language item <code>foo.bar.baz.description</code>.</p>"},{"location":"view/languages-naming-conventions/#error-texts","title":"Error Texts","text":"<p>If an error of type <code>{error type}</code> for the previously mentioned form field occurs during validation, you have to use the language item <code>foo.bar.baz.error.{error type}</code> for the language item describing the error.</p> <p>Exception to this rule: There are several general error messages like <code>wcf.global.form.error.empty</code> that have to be used for general errors like an empty field that may not be empty to avoid duplication of the same error message text over and over again in different language items.</p>"},{"location":"view/languages-naming-conventions/#naming-conventions","title":"Naming Conventions","text":"<ul> <li>If the entered text does not conform to some special rules, i.e. if the text is invalid, use <code>invalid</code> as error type.</li> <li>If the entered text is required to be unique but is already used for another object, use <code>notUnique</code> as error type.</li> </ul>"},{"location":"view/languages-naming-conventions/#confirmation-messages","title":"Confirmation messages","text":"<p>If the language item for an action is <code>foo.bar.action</code>, the language item for the confirmation message has to be <code>foo.bar.action.confirmMessage</code> instead of <code>foo.bar.action.sure</code> which is still used by some older language items.</p>"},{"location":"view/languages-naming-conventions/#type-specific-deletion-confirmation-message","title":"Type-Specific Deletion Confirmation Message","text":""},{"location":"view/languages-naming-conventions/#german","title":"German","text":"<pre><code>{if LANGUAGE_USE_INFORMAL_VARIANT}Willst du{else}Wollen Sie{/if} {element type} wirklich l\u00f6schen?\n</code></pre> <p>Example:</p> <pre><code>{if LANGUAGE_USE_INFORMAL_VARIANT}Willst du{else}Wollen Sie{/if} das Icon wirklich l\u00f6schen?\n</code></pre>"},{"location":"view/languages-naming-conventions/#english","title":"English","text":"<pre><code>Do you really want delete the {element type}?\n</code></pre> <p>Example:</p> <pre><code>Do you really want delete the icon?\n</code></pre>"},{"location":"view/languages-naming-conventions/#object-specific-deletion-confirmation-message","title":"Object-Specific Deletion Confirmation Message","text":""},{"location":"view/languages-naming-conventions/#german_1","title":"German","text":"<pre><code>{if LANGUAGE_USE_INFORMAL_VARIANT}Willst du{else}Wollen Sie{/if} {element type} &lt;span class=\"confirmationObject\"&gt;{object name}&lt;/span&gt; wirklich l\u00f6schen?\n</code></pre> <p>Example:</p> <pre><code>{if LANGUAGE_USE_INFORMAL_VARIANT}Willst du{else}Wollen Sie{/if} den Artikel &lt;span class=\"confirmationObject\"&gt;{$article-&gt;getTitle()}&lt;/span&gt; wirklich l\u00f6schen?\n</code></pre>"},{"location":"view/languages-naming-conventions/#english_1","title":"English","text":"<pre><code>Do you really want to delete the {element type} &lt;span class=\"confirmationObject\"&gt;{object name}&lt;/span&gt;?\n</code></pre> <p>Example:</p> <pre><code>Do you really want to delete the article &lt;span class=\"confirmationObject\"&gt;{$article-&gt;getTitle()}&lt;/span&gt;?\n</code></pre>"},{"location":"view/languages-naming-conventions/#user-group-options","title":"User Group Options","text":""},{"location":"view/languages-naming-conventions/#comments","title":"Comments","text":""},{"location":"view/languages-naming-conventions/#german_2","title":"German","text":"group type action example permission name language item user adding <code>user.foo.canAddComment</code> <code>Kann Kommentare erstellen</code> user deleting <code>user.foo.canDeleteComment</code> <code>Kann eigene Kommentare l\u00f6schen</code> user editing <code>user.foo.canEditComment</code> <code>Kann eigene Kommentare bearbeiten</code> moderator deleting <code>mod.foo.canDeleteComment</code> <code>Kann Kommentare l\u00f6schen</code> moderator editing <code>mod.foo.canEditComment</code> <code>Kann Kommentare bearbeiten</code> moderator moderating <code>mod.foo.canModerateComment</code> <code>Kann Kommentare moderieren</code>"},{"location":"view/languages-naming-conventions/#english_2","title":"English","text":"group type action example permission name language item user adding <code>user.foo.canAddComment</code> <code>Can create comments</code> user deleting <code>user.foo.canDeleteComment</code> <code>Can delete their comments</code> user editing <code>user.foo.canEditComment</code> <code>Can edit their comments</code> moderator deleting <code>mod.foo.canDeleteComment</code> <code>Can delete comments</code> moderator editing <code>mod.foo.canEditComment</code> <code>Can edit comments</code> moderator moderating <code>mod.foo.canModerateComment</code> <code>Can moderate comments</code>"},{"location":"view/languages/","title":"Languages","text":"<p>WoltLab Suite offers full i18n support with its integrated language system, including but not limited to dynamic phrases using template scripting and the built-in support for right-to-left languages.</p> <p>Phrases are deployed using the language package installation plugin, please also read the naming conventions for language items.</p>"},{"location":"view/languages/#special-phrases","title":"Special Phrases","text":""},{"location":"view/languages/#wcfdatedateformat","title":"<code>wcf.date.dateFormat</code>","text":"<p>Many characters in the format have a special meaning and will be replaced with date fragments. If you want to include a literal character, you'll have to use the backslash <code>\\</code> as an escape sequence to indicate that the character should be output as-is rather than being replaced. For example, <code>Y-m-d</code> will be output as <code>2018-03-30</code>, but <code>\\Y-m-d</code> will result in <code>Y-03-30</code>.</p> <p>Defaults to <code>M jS Y</code>.</p> <p>The date format without time using PHP's format characters for the <code>date()</code> function. This value is also used inside the JavaScript implementation, where the characters are mapped to an equivalent representation.</p>"},{"location":"view/languages/#wcfdatetimeformat","title":"<code>wcf.date.timeFormat</code>","text":"<p>Defaults to <code>g:i a</code>.</p> <p>The date format that is used to represent a time, but not a date. Please see the explanation on <code>wcf.date.dateFormat</code> to learn more about the format characters.</p>"},{"location":"view/languages/#wcfdatefirstdayoftheweek","title":"<code>wcf.date.firstDayOfTheWeek</code>","text":"<p>Defaults to <code>0</code>.</p> <p>Sets the first day of the week: * <code>0</code> - Sunday * <code>1</code> - Monday</p>"},{"location":"view/languages/#wcfglobalpagedirection-rtl-support","title":"<code>wcf.global.pageDirection</code> - RTL support","text":"<p>Defaults to <code>ltr</code>.</p> <p>Changing this value to <code>rtl</code> will reverse the page direction and enable the right-to-left support for phrases. Additionally, a special version of the stylesheet is loaded that contains all necessary adjustments for the reverse direction.</p>"},{"location":"view/template-plugins/","title":"Template Plugins","text":""},{"location":"view/template-plugins/#53-anchor","title":"5.3+ <code>anchor</code>","text":"<p>The <code>anchor</code> template plugin creates <code>a</code> HTML elements. The easiest way to use the template plugin is to pass it an instance of <code>ITitledLinkObject</code>:</p> <pre><code>{anchor object=$object}\n</code></pre> <p>generates the same output as</p> <pre><code>&lt;a href=\"{$object-&gt;getLink()}\"&gt;{$object-&gt;getTitle()}&lt;/a&gt;\n</code></pre> <p>Instead of an <code>object</code> parameter, a <code>link</code> and <code>content</code> parameter can be used:</p> <pre><code>{anchor link=$linkObject content=$content}\n</code></pre> <p>where <code>$linkObject</code> implements <code>ILinkableObject</code> and <code>$content</code> is either an object implementing <code>ITitledObject</code> or having a <code>__toString()</code> method or <code>$content</code> is a string or a number.</p> <p>The last special attribute is <code>append</code> whose contents are appended to the <code>href</code> attribute of the generated anchor element.</p> <p>All of the other attributes matching <code>~^[a-z]+([A-z]+)+$~</code>, expect for <code>href</code> which is disallowed, are added as attributes to the anchor element.</p> <p>If an <code>object</code> attribute is present, the object also implements <code>IPopoverObject</code> and if the return value of <code>IPopoverObject::getPopoverLinkClass()</code> is included in the <code>class</code> attribute of the <code>anchor</code> tag, <code>data-object-id</code> is automatically added. This functionality makes it easy to generate links with popover support. Instead of</p> <pre><code>&lt;a href=\"{$entry-&gt;getLink()}\" class=\"blogEntryLink\" data-object-id=\"{$entry-&gt;entryID}\"&gt;{$entry-&gt;subject}&lt;/a&gt;\n</code></pre> <p>using</p> <pre><code>{anchor object=$entry class='blogEntryLink'}\n</code></pre> <p>is sufficient if <code>Entry::getPopoverLinkClass()</code> returns <code>blogEntryLink</code>.</p>"},{"location":"view/template-plugins/#53-anchorattributes","title":"5.3+ <code>anchorAttributes</code>","text":"<p><code>anchorAttributes</code> compliments the <code>StringUtil::getAnchorTagAttributes(string, bool): string</code> method. It allows to easily generate the necessary attributes for an anchor tag based off the destination URL.</p> <pre><code>&lt;a href=\"https://www.example.com\" {anchorAttributes url='https://www.example.com' appendHref=false appendClassname=true isUgc=true}&gt;\n</code></pre> Attribute Description <code>url</code> destination URL <code>appendHref</code> whether the <code>href</code> attribute should be generated; <code>true</code> by default <code>isUgc</code> whether the <code>rel=\"ugc\"</code> attribute should be generated; <code>false</code> by default <code>appendClassname</code> whether the <code>class=\"externalURL\"</code> attribute should be generated; <code>true</code> by default"},{"location":"view/template-plugins/#append","title":"<code>append</code>","text":"<p>If a string should be appended to the value of a variable, <code>append</code> can be used:</p> <pre><code>{assign var=templateVariable value='newValue'}\n\n{$templateVariable} {* prints 'newValue *}\n\n{append var=templateVariable value='2'}\n\n{$templateVariable} {* now prints 'newValue2 *}\n</code></pre> <p>If the variables does not exist yet, <code>append</code> creates a new one with the given value. If <code>append</code> is used on an array as the variable, the value is appended to all elements of the array.</p>"},{"location":"view/template-plugins/#assign","title":"<code>assign</code>","text":"<p>New template variables can be declared and new values can be assigned to existing template variables using <code>assign</code>:</p> <pre><code>{assign var=templateVariable value='newValue'}\n\n{$templateVariable} {* prints 'newValue *}\n</code></pre>"},{"location":"view/template-plugins/#capture","title":"<code>capture</code>","text":"<p>In some situations, <code>assign</code> is not sufficient to assign values to variables in templates if the value is complex. Instead, <code>capture</code> can be used:</p> <pre><code>{capture var=templateVariable}\n{if $foo}\n        &lt;p&gt;{$bar}&lt;/p&gt;\n{else}\n        &lt;small&gt;{$baz}&lt;/small&gt;\n{/if}\n{/capture}\n</code></pre>"},{"location":"view/template-plugins/#concat","title":"<code>concat</code>","text":"<p><code>concat</code> is a modifier used to concatenate multiple strings:</p> <pre><code>{assign var=foo value='foo'}\n\n{assign var=templateVariable value='bar'|concat:$foo}\n\n{$templateVariable} {* prints 'foobar *}\n</code></pre>"},{"location":"view/template-plugins/#counter","title":"<code>counter</code>","text":"<p><code>counter</code> can be used to generate and optionally print a counter:</p> <pre><code>{counter name=fooCounter print=true} {* prints '1' *}\n\n{counter name=fooCounter print=true} {* prints '2' now *}\n\n{counter name=fooCounter} {* prints nothing, but counter value is '3' now internally *}\n\n{counter name=fooCounter print=true} {* prints '4' *}\n</code></pre> <p>Counter supports the following attributes:</p> Attribute Description <code>assign</code> optional name of the template variable the current counter value is assigned to <code>direction</code> counting direction, either <code>up</code> or <code>down</code>; <code>up</code> by default <code>name</code> name of the counter, relevant if multiple counters are used simultaneously <code>print</code> if <code>true</code>, the current counter value is printed; <code>false</code> by default <code>skip</code> positive counting increment; <code>1</code> by default <code>start</code> start counter value; <code>1</code> by default"},{"location":"view/template-plugins/#54-csrftoken","title":"5.4+ <code>csrfToken</code>","text":"<p><code>{csrfToken}</code> prints out the session's CSRF token (\u201cSecurity Token\u201d).</p> <pre><code>&lt;form action=\"{link controller=\"Foo\"}{/link}\" method=\"post\"&gt;\n{* snip *}\n\n{csrfToken}\n&lt;/form&gt;\n</code></pre> <p>The <code>{csrfToken}</code> template plugin supports a <code>type</code> parameter. Specifying this parameter might be required in rare situations. Please check the implementation for details.</p>"},{"location":"view/template-plugins/#currency","title":"<code>currency</code>","text":"<p><code>currency</code> is a modifier used to format currency values with two decimals using language dependent thousands separators and decimal point:</p> <pre><code>{assign var=currencyValue value=12.345}\n\n{$currencyValue|currency} {* prints '12.34' *}\n</code></pre>"},{"location":"view/template-plugins/#cycle","title":"<code>cycle</code>","text":"<p><code>cycle</code> can be used to cycle between different values:</p> <pre><code>{cycle name=fooCycle values='bar,baz'} {* prints 'bar' *}\n\n{cycle name=fooCycle} {* prints 'baz' *}\n\n{cycle name=fooCycle advance=false} {* prints 'baz' again *}\n\n{cycle name=fooCycle} {* prints 'bar' *}\n</code></pre> <p>The values attribute only has to be present for the first call. If <code>cycle</code> is used in a loop, the presence of the same values in consecutive calls has no effect. Only once the values change, the cycle is reset.</p> Attribute Description <code>advance</code> if <code>true</code>, the current cycle value is advanced to the next value; <code>true</code> by default <code>assign</code> optional name of the template variable the current cycle value is assigned to; if used, <code>print</code> is set to <code>false</code> <code>delimiter</code> delimiter between the different cycle values; <code>,</code> by default <code>name</code> name of the cycle, relevant if multiple cycles are used simultaneously <code>print</code> if <code>true</code>, the current cycle value is printed, <code>false</code> by default <code>reset</code> if <code>true</code>, the current cycle value is set to the first value, <code>false</code> by default <code>values</code> string containing the different cycles values, also see <code>delimiter</code>"},{"location":"view/template-plugins/#date","title":"<code>date</code>","text":"<p><code>date</code> generated a formatted date using <code>wcf\\util\\DateUtil::format()</code> with <code>DateUtil::DATE_FORMAT</code> internally.</p> <pre><code>{$timestamp|date}\n</code></pre>"},{"location":"view/template-plugins/#31-dateinterval","title":"3.1+ <code>dateInterval</code>","text":"<p><code>dateInterval</code> calculates the difference between two unix timestamps and generated a textual date interval.</p> <pre><code>{dateInterval start=$startTimestamp end=$endTimestamp full=true format='sentence'}\n</code></pre> Attribute Description <code>end</code> end of the time interval; current timestamp by default (though either <code>start</code> or <code>end</code> has to be set) <code>format</code> output format, either <code>default</code>, <code>sentence</code>, or <code>plain</code>; defaults to <code>default</code>, see <code>wcf\\util\\DateUtil::FORMAT_*</code> constants <code>full</code> if <code>true</code>, full difference in minutes is shown; if <code>false</code>, only the longest time interval is shown; <code>false</code> by default <code>start</code> start of the time interval; current timestamp by default (though either <code>start</code> or <code>end</code> has to be set)"},{"location":"view/template-plugins/#encodejs","title":"<code>encodeJS</code>","text":"<p><code>encodeJS</code> encodes a string to be used as a single-quoted string in JavaScript by replacing <code>\\\\</code> with <code>\\\\\\\\</code>, <code>'</code> with <code>\\'</code>, linebreaks with <code>\\n</code>, and <code>/</code> with <code>\\/</code>.</p> <pre><code>&lt;script&gt;\n    var foo = '{@$foo|encodeJS}';\n&lt;/script&gt;\n</code></pre>"},{"location":"view/template-plugins/#escapecdata","title":"<code>escapeCDATA</code>","text":"<p><code>escapeCDATA</code> encodes a string to be used in a <code>CDATA</code> element by replacing <code>]]&gt;</code> with <code>]]]]&gt;&lt;![CDATA[&gt;</code>.</p> <pre><code>&lt;![CDATA[{@$foo|encodeCDATA}]]&gt;\n</code></pre>"},{"location":"view/template-plugins/#event","title":"<code>event</code>","text":"<p><code>event</code> provides extension points in templates that template listeners can use.</p> <pre><code>{event name='foo'}\n</code></pre>"},{"location":"view/template-plugins/#fetch","title":"<code>fetch</code>","text":"<p><code>fetch</code> fetches the contents of a file using <code>file_get_contents</code>.</p> <pre><code>{fetch file='foo.html'} {* prints the contents of `foo.html` *}\n\n{fetch file='bar.html' assign=bar} {* assigns the contents of `foo.html` to `$bar`; does not print the contents *}\n</code></pre>"},{"location":"view/template-plugins/#filesizebinary","title":"<code>filesizeBinary</code>","text":"<p><code>filesizeBinary</code> formats the filesize using binary filesize (in bytes).</p> <pre><code>{$filesize|filesizeBinary}\n</code></pre>"},{"location":"view/template-plugins/#filesize","title":"<code>filesize</code>","text":"<p><code>filesize</code> formats the filesize using filesize (in bytes).</p> <pre><code>{$filesize|filesize}\n</code></pre>"},{"location":"view/template-plugins/#hascontent","title":"<code>hascontent</code>","text":"<p>In many cases, conditional statements can be used to determine if a certain section of a template is shown:</p> <pre><code>{if $foo === 'bar'}\n    only shown if $foo is bar\n{/if}\n</code></pre> <p>In some situations, however, such conditional statements are not sufficient. One prominent example is a template event:</p> <pre><code>{if $foo === 'bar'}\n    &lt;ul&gt;\n{if $foo === 'bar'}\n            &lt;li&gt;Bar&lt;/li&gt;\n{/if}\n\n{event name='listItems'}\n    &lt;/li&gt;\n{/if}\n</code></pre> <p>In this example, if <code>$foo !== 'bar'</code>, the list will not be shown, regardless of the additional template code provided by template listeners. In such a situation, <code>hascontent</code> has to be used:</p> <pre><code>{hascontent}\n    &lt;ul&gt;\n{content}\n{if $foo === 'bar'}\n                &lt;li&gt;Bar&lt;/li&gt;\n{/if}\n\n{event name='listItems'}\n{/content}\n    &lt;/ul&gt;\n{/hascontent}\n</code></pre> <p>If the part of the template wrapped in the <code>content</code> tags has any (trimmed) content, the part of the template wrapped by <code>hascontent</code> tags is shown (including the part wrapped by the <code>content</code> tags), otherwise nothing is shown. Thus, this construct avoids an empty list compared to the <code>if</code> solution above.</p> <p>Like <code>foreach</code>, <code>hascontent</code> also supports an <code>else</code> part:</p> <pre><code>{hascontent}\n    &lt;ul&gt;\n{content}\n{* \u2026 *}\n{/content}\n    &lt;/ul&gt;\n{hascontentelse}\n    no list\n{/hascontent}\n</code></pre>"},{"location":"view/template-plugins/#htmlcheckboxes","title":"<code>htmlCheckboxes</code>","text":"<p><code>htmlCheckboxes</code> generates a list of HTML checkboxes.</p> <pre><code>{htmlCheckboxes name=foo options=$fooOptions selected=$currentFoo}\n\n{htmlCheckboxes name=bar output=$barLabels values=$barValues selected=$currentBar}\n</code></pre> Attribute Description 5.2+ <code>disabled</code> if <code>true</code>, all checkboxes are disabled <code>disableEncoding</code> if <code>true</code>, the values are not passed through <code>wcf\\util\\StringUtil::encodeHTML()</code>; <code>false</code> by default <code>name</code> <code>name</code> attribute of the <code>input</code> checkbox element <code>output</code> array used as keys and values for <code>options</code> if present; not present by default <code>options</code> array selectable options with the key used as <code>value</code> attribute and the value as the checkbox label <code>selected</code> current selected value(s) <code>separator</code> separator between the different checkboxes in the generated output; empty string by default <code>values</code> array with values used in combination with <code>output</code>, where <code>output</code> is only used as keys for <code>options</code>"},{"location":"view/template-plugins/#htmloptions","title":"<code>htmlOptions</code>","text":"<p><code>htmlOptions</code> generates an <code>select</code> HTML element.</p> <pre><code>{htmlOptions name='foo' options=$options selected=$selected}\n\n&lt;select name=\"bar\"&gt;\n    &lt;option value=\"\"{if !$selected} selected{/if}&gt;{lang}foo.bar.default{/lang}&lt;/option&gt;\n{htmlOptions options=$options selected=$selected} {* no `name` attribute *}\n&lt;/select&gt;\n</code></pre> Attribute Description <code>disableEncoding</code> if <code>true</code>, the values are not passed through <code>wcf\\util\\StringUtil::encodeHTML()</code>; <code>false</code> by default <code>object</code> optional instance of <code>wcf\\data\\DatabaseObjectList</code> that provides the selectable options (overwrites <code>options</code> attribute internally) <code>name</code> <code>name</code> attribute of the <code>select</code> element; if not present, only the contents of the <code>select</code> element are printed <code>output</code> array used as keys and values for <code>options</code> if present; not present by default <code>values</code> array with values used in combination with <code>output</code>, where <code>output</code> is only used as keys for <code>options</code> <code>options</code> array selectable options with the key used as <code>value</code> attribute and the value as the option label; if a value is an array, an <code>optgroup</code> is generated with the array key as the <code>optgroup</code> label <code>selected</code> current selected value(s) <p>All additional attributes are added as attributes of the <code>select</code> HTML element.</p>"},{"location":"view/template-plugins/#implode","title":"<code>implode</code>","text":"<p><code>implodes</code> transforms an array into a string and prints it.</p> <pre><code>{implode from=$array key=key item=item glue=\";\"}{$key}: {$value}{/implode}\n</code></pre> Attribute Description <code>from</code> array with the imploded values <code>glue</code> separator between the different array values; <code>', '</code> by default <code>item</code> template variable name where the current array value is stored during the iteration <code>key</code> optional template variable name where the current array key is stored during the iteration"},{"location":"view/template-plugins/#52-ipsearch","title":"5.2+ <code>ipSearch</code>","text":"<p><code>ipSearch</code> generates a link to search for an IP address.</p> <pre><code>{\"127.0.0.1\"|ipSearch}\n</code></pre>"},{"location":"view/template-plugins/#js","title":"<code>js</code>","text":"<p><code>js</code> generates script tags based on whether <code>ENABLE_DEBUG_MODE</code> and <code>VISITOR_USE_TINY_BUILD</code> are enabled.</p> <pre><code>{js application='wbb' file='WBB'} {* generates 'http://example.com/js/WBB.js' *}\n\n{js application='wcf' file='WCF.User' bundle='WCF.Combined'}\n{* generates 'http://example.com/wcf/js/WCF.User.js' if ENABLE_DEBUG_MODE=1 *}\n{* generates 'http://example.com/wcf/js/WCF.Combined.min.js' if ENABLE_DEBUG_MODE=0 *}\n\n{js application='wcf' lib='jquery'}\n{* generates 'http://example.com/wcf/js/3rdParty/jquery.js' *}\n\n{js application='wcf' lib='jquery-ui' file='awesomeWidget'}\n{* generates 'http://example.com/wcf/js/3rdParty/jquery-ui/awesomeWidget.js' *}\n\n{js application='wcf' file='WCF.User' bundle='WCF.Combined' hasTiny=true}\n{* generates 'http://example.com/wcf/js/WCF.User.js' if ENABLE_DEBUG_MODE=1 *}\n{* generates 'http://example.com/wcf/js/WCF.Combined.min.js' (ENABLE_DEBUG_MODE=0 *}\n{* generates 'http://example.com/wcf/js/WCF.Combined.tiny.min.js' if ENABLE_DEBUG_MODE=0 and VISITOR_USE_TINY_BUILD=1 *}\n</code></pre>"},{"location":"view/template-plugins/#53-jslang","title":"5.3+ <code>jslang</code>","text":"<p><code>jslang</code> works like <code>lang</code> with the difference that the resulting string is automatically passed through <code>encodeJS</code>.</p> <pre><code>require(['Language', /* \u2026 */], function(Language, /* \u2026 */) {\n    Language.addObject({\n        'app.foo.bar': '{jslang}app.foo.bar{/jslang}',\n    });\n\n    // \u2026\n});\n</code></pre>"},{"location":"view/template-plugins/#55-json","title":"5.5+ <code>json</code>","text":"<p><code>json</code> JSON-encodes the given value.</p> <pre><code>&lt;script&gt;\nlet data = { \"title\": {@$foo-&gt;getTitle()|json} };\n&lt;/script&gt;\n</code></pre>"},{"location":"view/template-plugins/#lang","title":"<code>lang</code>","text":"<p><code>lang</code> replaces a language items with its value.</p> <pre><code>{lang}foo.bar.baz{/lang}\n\n{lang __literal=true}foo.bar.baz{/lang}\n\n{lang foo='baz'}foo.bar.baz{/lang}\n\n{lang}foo.bar.baz.{$action}{/lang}\n</code></pre> Attribute Description <code>__encode</code> if <code>true</code>, the output will be passed through <code>StringUtil::encodeHTML()</code> <code>__literal</code> if <code>true</code>, template variables will not resolved but printed as they are in the language item; <code>false</code> by default <code>__optional</code> if <code>true</code> and the language item does not exist, an empty string is printed; <code>false</code> by default <p>All additional attributes are available when parsing the language item.</p>"},{"location":"view/template-plugins/#language","title":"<code>language</code>","text":"<p><code>language</code> replaces a language items with its value. If the template variable <code>__language</code> exists, this language object will be used instead of <code>WCF::getLanguage()</code>. This modifier is useful when assigning the value directly to a variable.</p> <p>Note that template scripting is applied to the output of the variable, which can lead to unwanted side effects. Use <code>phrase</code> instead if you don't want to use template scripting.</p> <pre><code>{$languageItem|language}\n\n{assign var=foo value=$languageItem|language}\n</code></pre>"},{"location":"view/template-plugins/#link","title":"<code>link</code>","text":"<p><code>link</code> generates internal links using <code>LinkHandler</code>.</p> <pre><code>&lt;a href=\"{link controller='FooList' application='bar'}param1=2&amp;param2=A{/link}\"&gt;Foo&lt;/a&gt;\n</code></pre> Attribute Description <code>application</code> abbreviation of the application the controller belongs to; <code>wcf</code> by default <code>controller</code> name of the controller; if not present, the landing page is linked in the frontend and the index page in the ACP <code>encode</code> if <code>true</code>, the generated link is passed through <code>wcf\\util\\StringUtil::encodeHTML()</code>; <code>true</code> by default <code>isEmail</code> sets <code>encode=false</code> and forces links to link to the frontend <p>Additional attributes are passed to <code>LinkHandler::getLink()</code>.</p>"},{"location":"view/template-plugins/#newlinetobreak","title":"<code>newlineToBreak</code>","text":"<p><code>newlineToBreak</code> transforms newlines into HTML <code>&lt;br&gt;</code> elements after encoding the content via <code>wcf\\util\\StringUtil::encodeHTML()</code>.</p> <pre><code>{$foo|newlineToBreak}\n</code></pre>"},{"location":"view/template-plugins/#54-objectaction","title":"5.4+ <code>objectAction</code>","text":"<p><code>objectAction</code> generates action buttons to be used in combination with the <code>WoltLabSuite/Core/Ui/Object/Action</code> API. For detailed information on its usage, we refer to the extensive documentation in the <code>ObjectActionFunctionTemplatePlugin</code> class itself.</p>"},{"location":"view/template-plugins/#page","title":"<code>page</code>","text":"<p><code>page</code> generates an internal link to a CMS page.</p> <pre><code>{page}com.woltlab.wcf.CookiePolicy{/page}\n\n{page pageID=1}{/page}\n\n{page language='de'}com.woltlab.wcf.CookiePolicy{/page}\n\n{page languageID=2}com.woltlab.wcf.CookiePolicy{/page}\n</code></pre> Attribute Description <code>pageID</code> unique id of the page (cannot be used together with a page identifier as value) <code>languageID</code> id of the page language (cannot be used together with <code>language</code>) <code>language</code> language code of the page language (cannot be used together with <code>languageID</code>)"},{"location":"view/template-plugins/#pages","title":"<code>pages</code>","text":"<p><code>pages</code> generates a pagination.</p> <pre><code>{pages controller='FooList' link=\"pageNo=%d\" print=true assign=pagesLinks} {* prints pagination *}\n\n{@$pagesLinks} {* prints same pagination again *}\n</code></pre> Attribute Description <code>assign</code> optional name of the template variable the pagination is assigned to <code>controller</code> controller name of the generated links <code>link</code> additional link parameter where <code>%d</code> will be replaced with the relevant page number <code>pages</code> maximum number of of pages; by default, the template variable <code>$pages</code> is used <code>print</code> if <code>false</code> and <code>assign=true</code>, the pagination is not printed <code>application</code>, <code>id</code>, <code>object</code>, <code>title</code> additional parameters passed to <code>LinkHandler::getLink()</code> to generate page links"},{"location":"view/template-plugins/#55-phrase","title":"5.5+ <code>phrase</code>","text":"<p><code>phrase</code> replaces a language items with its value. If the template variable <code>__language</code> exists, this language object will be used instead of <code>WCF::getLanguage()</code>. This modifier is useful when assigning the value directly to a variable.</p> <p><code>phrase</code> should be used instead of <code>language</code> unless you want to explicitly allow template scripting on a variable's output.</p> <pre><code>{$languageItem|phrase}\n\n{assign var=foo value=$languageItem|phrase}\n</code></pre>"},{"location":"view/template-plugins/#plaintime","title":"<code>plainTime</code>","text":"<p><code>plainTime</code> formats a timestamp to include year, month, day, hour, and minutes. The exact formatting depends on the current language (via the language items <code>wcf.date.dateTimeFormat</code>, <code>wcf.date.dateFormat</code>, and <code>wcf.date.timeFormat</code>).</p> <pre><code>{$timestamp|plainTime}\n</code></pre>"},{"location":"view/template-plugins/#53-plural","title":"5.3+ <code>plural</code>","text":"<p><code>plural</code> allows to easily select the correct plural form of a phrase based on a given <code>value</code>. The pluralization logic follows the Unicode Language Plural Rules for cardinal numbers.</p> <p>The <code>#</code> placeholder within the resulting phrase is replaced by the <code>value</code>. It is automatically formatted using <code>StringUtil::formatNumeric</code>.</p> <p>English:</p> <p>Note the use of <code>1</code> if the number (<code>#</code>) is not used within the phrase and the use of <code>one</code> otherwise. They are equivalent for English, but following this rule generalizes better to other languages, helping the translator. <pre><code>{assign var=numberOfWorlds value=2}\n&lt;h1&gt;Hello {plural value=$numberOfWorlds 1='World' other='Worlds'}!&lt;/h1&gt;\n&lt;p&gt;There {plural value=$numberOfWorlds 1='is one world' other='are # worlds'}!&lt;/p&gt;\n&lt;p&gt;There {plural value=$numberOfWorlds one='is # world' other='are # worlds'}!&lt;/p&gt;\n</code></pre></p> <p>German: <pre><code>{assign var=numberOfWorlds value=2}\n&lt;h1&gt;Hallo {plural value=$numberOfWorlds 1='Welt' other='Welten'}!&lt;/h1&gt;\n&lt;p&gt;Es gibt {plural value=$numberOfWorlds 1='eine Welt' other='# Welten'}!&lt;/p&gt;\n&lt;p&gt;Es gibt {plural value=$numberOfWorlds one='# Welt' other='# Welten'}!&lt;/p&gt;\n</code></pre></p> <p>Romanian:</p> <p>Note the additional use of <code>few</code> which is not required in English or German. <pre><code>{assign var=numberOfWorlds value=2}\n&lt;h1&gt;Salut {plural value=$numberOfWorlds 1='lume' other='lumi'}!&lt;/h1&gt;\n&lt;p&gt;Exist\u0103 {plural value=$numberOfWorlds 1='o lume' few='# lumi' other='# de lumi'}!&lt;/p&gt;\n&lt;p&gt;Exist\u0103 {plural value=$numberOfWorlds one='# lume' few='# lumi' other='# de lumi'}!&lt;/p&gt;\n</code></pre></p> <p>Russian:</p> <p>Note the difference between <code>1</code> (exactly <code>1</code>) and <code>one</code> (ending in <code>1</code>, except ending in <code>11</code>). <pre><code>{assign var=numberOfWorlds value=2}\n&lt;h1&gt;\u041f\u0440\u0438\u0432\u0435\u0442 {plural value=$numberOfWorld 1='\u043c\u0438\u0440' other='\u043c\u0438\u0440\u044b'}!&lt;/h1&gt;\n&lt;p&gt;\u0415\u0441\u0442\u044c {plural value=$numberOfWorlds 1='\u043c\u0438\u0440' one='# \u043c\u0438\u0440' few='# \u043c\u0438\u0440\u0430' many='# \u043c\u0438\u0440\u043e\u0432' other='# \u043c\u0438\u0440\u043e\u0432'}!&lt;/p&gt;\n</code></pre></p> Attribute Description value The value that is used to select the proper phrase. other The phrase that is used when no other selector matches. Any Category Name The phrase that is used when <code>value</code> belongs to the named category. Available categories depend on the language. Any Integer The phrase that is used when <code>value</code> is that exact integer."},{"location":"view/template-plugins/#prepend","title":"<code>prepend</code>","text":"<p>If a string should be prepended to the value of a variable, <code>prepend</code> can be used:</p> <pre><code>{assign var=templateVariable value='newValue'}\n\n{$templateVariable} {* prints 'newValue *}\n\n{prepend var=templateVariable value='2'}\n\n{$templateVariable} {* now prints '2newValue' *}\n</code></pre> <p>If the variables does not exist yet, <code>prepend</code> creates a new one with the given value. If <code>prepend</code> is used on an array as the variable, the value is prepended to all elements of the array.</p>"},{"location":"view/template-plugins/#shortunit","title":"<code>shortUnit</code>","text":"<p><code>shortUnit</code> shortens numbers larger than 1000 by using unit suffixes:</p> <pre><code>{10000|shortUnit} {* prints 10k *}\n{5400000|shortUnit} {* prints 5.4M *}\n</code></pre>"},{"location":"view/template-plugins/#smallpages","title":"<code>smallpages</code>","text":"<p><code>smallpages</code> generates a smaller version of <code>pages</code> by using adding the <code>small</code> CSS class to the generated <code>&lt;nav&gt;</code> element and only showing 7 instead of 9 links. </p>"},{"location":"view/template-plugins/#tablewordwrap","title":"<code>tableWordwrap</code>","text":"<p><code>tableWordwrap</code> inserts zero width spaces every 30 characters in words longer than 30 characters.</p> <pre><code>{$foo|tableWordwrap}\n</code></pre>"},{"location":"view/template-plugins/#time","title":"<code>time</code>","text":"<p><code>time</code> generates an HTML <code>time</code> elements based on a timestamp that shows a relative time or the absolute time if the timestamp more than six days ago.</p> <pre><code>{$timestamp|time} {* prints a '&lt;time&gt;' element *}\n</code></pre>"},{"location":"view/template-plugins/#truncate","title":"<code>truncate</code>","text":"<p><code>truncate</code> truncates a long string into a shorter one:</p> <pre><code>{$foo|truncate:35}\n\n{$foo|truncate:35:'_':true}\n</code></pre> Parameter Number Description 0 truncated string 1 truncated length; <code>80</code> by default 2 ellipsis symbol; <code>wcf\\util\\StringUtil::HELLIP</code> by default 3 if <code>true</code>, words can be broken up in the middle; <code>false</code> by default"},{"location":"view/template-plugins/#53-user","title":"5.3+ <code>user</code>","text":"<p><code>user</code> generates links to user profiles. The mandatory <code>object</code> parameter requires an instances of <code>UserProfile</code>. The optional <code>type</code> parameter is responsible for what the generated link contains:</p> <ul> <li><code>type='default'</code> (also applies if no <code>type</code> is given) outputs the formatted username relying on the \u201cUser Marking\u201d setting of the relevant user group.   Additionally, the user popover card will be shown when hovering over the generated link.</li> <li><code>type='plain'</code> outputs the username without additional formatting.</li> <li><code>type='avatar(\\d+)'</code> outputs the user\u2019s avatar in the specified size, i.e., <code>avatar48</code> outputs the avatar with a width and height of 48 pixels.</li> </ul> <p>The last special attribute is <code>append</code> whose contents are appended to the <code>href</code> attribute of the generated anchor element.</p> <p>All of the other attributes matching <code>~^[a-z]+([A-z]+)+$~</code>, except for <code>href</code> which may not be added, are added as attributes to the anchor element.</p> <p>Examples:</p> <pre><code>{user object=$user}\n</code></pre> <p>generates</p> <pre><code>&lt;a href=\"{$user-&gt;getLink()}\" data-object-id=\"{$user-&gt;userID}\" class=\"userLink\"&gt;{@$user-&gt;getFormattedUsername()}&lt;/a&gt;\n</code></pre> <p>and</p> <pre><code>{user object=$user type='avatar48' foo='bar'}\n</code></pre> <p>generates</p> <pre><code>&lt;a href=\"{$user-&gt;getLink()}\" foo=\"bar\"&gt;{@$object-&gt;getAvatar()-&gt;getImageTag(48)}&lt;/a&gt;\n</code></pre>"},{"location":"view/templates/","title":"Templates","text":"<p>Templates are responsible for the output a user sees when requesting a page (while the PHP code is responsible for providing the data that will be shown). Templates are text files with <code>.tpl</code> as the file extension. WoltLab Suite Core compiles the template files once into a PHP file that is executed when a user requests the page. In subsequent request, as the PHP file containing the compiled template already exists, compiling the template is not necessary anymore.</p>"},{"location":"view/templates/#template-types-and-conventions","title":"Template Types and Conventions","text":"<p>WoltLab Suite Core supports two types of templates: frontend templates (or simply templates) and backend templates (ACP templates). Each type of template is only available in its respective domain, thus frontend templates cannot be included or used in the ACP and vice versa.</p> <p>For pages and forms, the name of the template matches the unqualified name of the PHP class except for the <code>Page</code> or <code>Form</code> suffix:</p> <ul> <li><code>RegisterForm.class.php</code> \u2192 <code>register.tpl</code></li> <li><code>UserPage.class.php</code> \u2192 <code>user.tpl</code></li> </ul> <p>If you follow this convention, WoltLab Suite Core will automatically determine the template name so that you do not have to explicitly set it.</p> <p>For forms that handle creating and editing objects, in general, there are two form classes: <code>FooAddForm</code> and <code>FooEditForm</code>. WoltLab Suite Core, however, generally only uses one template <code>fooAdd.tpl</code> and the template variable <code>$action</code> to distinguish between creating a new object (<code>$action = 'add'</code>) and editing an existing object (<code>$action = 'edit'</code>) as the differences between templates for adding and editing an object are minimal.</p>"},{"location":"view/templates/#installing-templates","title":"Installing Templates","text":"<p>Templates and ACP templates are installed by two different package installation plugins: the template PIP and the ACP template PIP. More information about installing templates can be found on those pages. </p>"},{"location":"view/templates/#base-templates","title":"Base Templates","text":""},{"location":"view/templates/#frontend","title":"Frontend","text":"<pre><code>{include file='header'}\n\n{* content *}\n\n{include file='footer'}\n</code></pre>"},{"location":"view/templates/#backend","title":"Backend","text":"<pre><code>{include file='header' pageTitle='foo.bar.baz'}\n\n&lt;header class=\"contentHeader\"&gt;\n    &lt;div class=\"contentHeaderTitle\"&gt;\n        &lt;h1 class=\"contentTitle\"&gt;Title&lt;/h1&gt;\n    &lt;/div&gt;\n\n    &lt;nav class=\"contentHeaderNavigation\"&gt;\n        &lt;ul&gt;\n{* your default content header navigation buttons *}\n\n{event name='contentHeaderNavigation'}\n        &lt;/ul&gt;\n    &lt;/nav&gt;\n&lt;/header&gt;\n\n{* content *}\n\n{include file='footer'}\n</code></pre> <p><code>foo.bar.baz</code> is the language item that contains the title of the page.</p>"},{"location":"view/templates/#common-template-components","title":"Common Template Components","text":""},{"location":"view/templates/#forms","title":"Forms","text":"<p>For new forms, use the new form builder API introduced with WoltLab Suite 5.2.</p> <pre><code>&lt;form method=\"post\" action=\"{link controller='FooBar'}{/link}\"&gt;\n    &lt;div class=\"section\"&gt;\n        &lt;dl{if $errorField == 'baz'} class=\"formError\"{/if}&gt;\n            &lt;dt&gt;&lt;label for=\"baz\"&gt;{lang}foo.bar.baz{/lang}&lt;/label&gt;&lt;/dt&gt;\n            &lt;dd&gt;\n                &lt;input type=\"text\" id=\"baz\" name=\"baz\" value=\"{$baz}\" class=\"long\" required autofocus&gt;\n{if $errorField == 'baz'}\n                    &lt;small class=\"innerError\"&gt;\n{if $errorType == 'empty'}\n{lang}wcf.global.form.error.empty{/lang}\n{else}\n{lang}foo.bar.baz.error.{@$errorType}{/lang}\n{/if}\n                    &lt;/small&gt;\n{/if}\n            &lt;/dd&gt;\n        &lt;/dl&gt;\n\n        &lt;dl&gt;\n            &lt;dt&gt;&lt;label for=\"bar\"&gt;{lang}foo.bar.bar{/lang}&lt;/label&gt;&lt;/dt&gt;\n            &lt;dd&gt;\n                &lt;textarea name=\"bar\" id=\"bar\" cols=\"40\" rows=\"10\"&gt;{$bar}&lt;/textarea&gt;\n{if $errorField == 'bar'}\n                    &lt;small class=\"innerError\"&gt;{lang}foo.bar.bar.error.{@$errorType}{/lang}&lt;/small&gt;\n{/if}\n            &lt;/dd&gt;\n        &lt;/dl&gt;\n\n{* other fields *}\n\n{event name='dataFields'}\n    &lt;/div&gt;\n\n{* other sections *}\n\n{event name='sections'}\n\n    &lt;div class=\"formSubmit\"&gt;\n        &lt;input type=\"submit\" value=\"{lang}wcf.global.button.submit{/lang}\" accesskey=\"s\"&gt;\n{csrfToken}\n    &lt;/div&gt;\n&lt;/form&gt;\n</code></pre>"},{"location":"view/templates/#tab-menus","title":"Tab Menus","text":"<pre><code>&lt;div class=\"section tabMenuContainer\"&gt;\n    &lt;nav class=\"tabMenu\"&gt;\n        &lt;ul&gt;\n            &lt;li&gt;&lt;a href=\"#tab1\"&gt;Tab 1&lt;/a&gt;&lt;/li&gt;\n            &lt;li&gt;&lt;a href=\"#tab2\"&gt;Tab 2&lt;/a&gt;&lt;/li&gt;\n\n{event name='tabMenuTabs'}\n        &lt;/ul&gt;\n    &lt;/nav&gt;\n\n    &lt;div id=\"tab1\" class=\"tabMenuContent\"&gt;\n        &lt;div class=\"section\"&gt;\n{* contents of first tab *}\n        &lt;/div&gt;\n    &lt;/div&gt;\n\n    &lt;div id=\"tab2\" class=\"tabMenuContainer tabMenuContent\"&gt;\n        &lt;nav class=\"menu\"&gt;\n            &lt;ul&gt;\n                &lt;li&gt;&lt;a href=\"#tab2A\"&gt;Tab 2A&lt;/a&gt;&lt;/li&gt;\n                &lt;li&gt;&lt;a href=\"#tab2B\"&gt;Tab 2B&lt;/a&gt;&lt;/li&gt;\n\n{event name='tabMenuTab2Subtabs'}\n            &lt;/ul&gt;\n        &lt;/nav&gt;\n\n        &lt;div id=\"tab2A\" class=\"tabMenuContent\"&gt;\n            &lt;div class=\"section\"&gt;\n{* contents of first subtab for second tab *}\n            &lt;/div&gt;\n        &lt;/div&gt;\n\n        &lt;div id=\"tab2B\" class=\"tabMenuContent\"&gt;\n            &lt;div class=\"section\"&gt;\n{* contents of second subtab for second tab *}\n            &lt;/div&gt;\n        &lt;/div&gt;\n\n{event name='tabMenuTab2Contents'}\n    &lt;/div&gt;\n\n{event name='tabMenuContents'}\n&lt;/div&gt;\n</code></pre>"},{"location":"view/templates/#template-scripting","title":"Template Scripting","text":""},{"location":"view/templates/#template-variables","title":"Template Variables","text":"<p>Template variables can be assigned via <code>WCF::getTPL()-&gt;assign('foo', 'bar')</code> and accessed in templates via <code>$foo</code>:</p> <ul> <li><code>{$foo}</code> will result in the contents of <code>$foo</code> to be passed to <code>StringUtil::encodeHTML()</code> before being printed.</li> <li><code>{#$foo}</code> will result in the contents of <code>$foo</code> to be passed to <code>StringUtil::formatNumeric()</code> before being printed.   Thus, this method is relevant when printing numbers and having them formatted correctly according the the user\u2019s language.</li> <li><code>{@$foo}</code> will result in the contents of <code>$foo</code> to be printed directly.   In general, this method should not be used for user-generated input.</li> </ul> <p>Multiple template variables can be assigned by passing an array:</p> <pre><code>WCF::getTPL()-&gt;assign([\n    'foo' =&gt; 'bar',\n    'baz' =&gt; false \n]);\n</code></pre>"},{"location":"view/templates/#modifiers","title":"Modifiers","text":"<p>If you want to call a function on a variable, you can use the modifier syntax: <code>{@$foo|trim}</code>, for example, results in the trimmed contents of <code>$foo</code> to be printed.</p>"},{"location":"view/templates/#system-template-variable","title":"System Template Variable","text":"<p>The template variable <code>$tpl</code> is automatically assigned and is an array containing different data:</p> <ul> <li><code>$tpl[get]</code> contains <code>$_GET</code>.</li> <li><code>$tpl[post]</code> contains <code>$_POST</code>.</li> <li><code>$tpl[cookie]</code> contains <code>$_COOKIE</code>.</li> <li><code>$tpl[server]</code> contains <code>$_SERVER</code>.</li> <li><code>$tpl[env]</code> contains <code>$_ENV</code>.</li> <li><code>$tpl[now]</code> contains <code>TIME_NOW</code> (current timestamp).</li> </ul> <p>Furthermore, the following template variables are also automatically assigned:</p> <ul> <li><code>$__wcf</code> contains the <code>WCF</code> object (or <code>WCFACP</code> object in the backend).</li> </ul>"},{"location":"view/templates/#comments","title":"Comments","text":"<p>Comments are wrapped in <code>{*</code> and <code>*}</code> and can span multiple lines:</p> <pre><code>{* some\n   comment *}\n</code></pre> <p>The template compiler discards the comments, so that they not included in the compiled template.</p>"},{"location":"view/templates/#conditions","title":"Conditions","text":"<p>Conditions follow a similar syntax to PHP code:</p> <pre><code>{if $foo === 'bar'}\n    foo is bar\n{elseif $foo === 'baz'}\n    foo is baz\n{else}\n    foo is neither bar nor baz\n{/if}\n</code></pre> <p>The supported operators in conditions are <code>===</code>, <code>!==</code>, <code>==</code>, <code>!=</code>, <code>&lt;=</code>, <code>&lt;</code>, <code>&gt;=</code>, <code>&gt;</code>, <code>||</code>, <code>&amp;&amp;</code>, <code>!</code>, and <code>=</code>.</p> <p>More examples:</p> <pre><code>{if $bar|isset}\u2026{/if}\n\n{if $bar|count &gt; 3 &amp;&amp; $bar|count &lt; 100}\u2026{/if}\n</code></pre>"},{"location":"view/templates/#foreach-loops","title":"Foreach Loops","text":"<p>Foreach loops allow to iterate over arrays or iterable objects:</p> <pre><code>&lt;ul&gt;\n{foreach from=$array key=key item=value}\n        &lt;li&gt;{$key}: {$value}&lt;/li&gt;\n{/foreach}\n&lt;/ul&gt;\n</code></pre> <p>While the <code>from</code> attribute containing the iterated structure and the <code>item</code> attribute containg the current value are mandatory, the <code>key</code> attribute is optional. If the foreach loop has a name assigned to it via the <code>name</code> attribute, the <code>$tpl</code> template variable provides additional data about the loop:</p> <pre><code>&lt;ul&gt;\n{foreach from=$array key=key item=value name=foo}\n{if $tpl[foreach][foo][first]}\n            something special for the first iteration\n{elseif $tpl[foreach][foo][last]}\n            something special for the last iteration\n{/if}\n\n        &lt;li&gt;iteration {#$tpl[foreach][foo][iteration]+1} out of {#$tpl[foreach][foo][total]} {$key}: {$value}&lt;/li&gt;\n{/foreach}\n&lt;/ul&gt;\n</code></pre> <p>In contrast to PHP\u2019s foreach loop, templates also support <code>foreachelse</code>:</p> <pre><code>{foreach from=$array item=value}\n    \u2026\n{foreachelse}\n    there is nothing to iterate over\n{/foreach}\n</code></pre>"},{"location":"view/templates/#including-other-templates","title":"Including Other Templates","text":"<p>To include template named <code>foo</code> from the same domain (frontend/backend), you can use</p> <pre><code>{include file='foo'}\n</code></pre> <p>If the template belongs to an application, you have to specify that application using the <code>application</code> attribute:</p> <pre><code>{include file='foo' application='app'}\n</code></pre> <p>Additional template variables can be passed to the included template as additional attributes:</p> <pre><code>{include file='foo' application='app' var1='foo1' var2='foo2'}\n</code></pre>"},{"location":"view/templates/#template-plugins","title":"Template Plugins","text":"<p>An overview of all available template plugins can be found here.</p>"}]}